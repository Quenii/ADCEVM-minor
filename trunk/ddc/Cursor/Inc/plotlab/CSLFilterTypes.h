//------------------------------------------------------------------------------
//
//                    Generated by VCL C++ .NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2009
//                              www.mitov.com
//
//------------------------------------------------------------------------------
#ifndef CSLFilterTypes_H_
#define CSLFilterTypes_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabBasicPkgCB6_H_
  #include <CSignalLabBasicPkgCB6.h>
#endif
#ifndef CSLStreamTypes_H_
  #include <CSLStreamTypes.h>
#endif


//------------------------------------------------------------------------------

enum CTSLExtendedWindowType { xwtRect, xwtBartlett, xwtBlackman, xwtHamming, xwtHanning, xwtKaiser, xwtFourTermCosSum, xwtSixTermCosSum, xwtElevenTermCosSum, xwtFlatTop };
enum CTSLWindowType { wtRect, wtBartlett, wtBlackman, wtHamming, wtHanning, wtKaiser };
enum CTSLDelayMode { dmMilliseconds, dmSamples };
enum CTSLCombFeed { cfForward, cfBack };
enum CTSLClockSource { csInternal, csExternal };
enum CTSLFourierNormalization { fnNone, fnNormalize, fnNormalizeSqrt };
enum CTSLDisplayMarkerShape { msPoint, msCircle, msSquare, msDiamond, msPlus, msCross, msStar, msTriangleUp, msTriangleDown, msTriangleLeft, msTriangleRight, msHLine, msVLine };
enum CTSLCoordinateMode { cmLeftTop, cmLeftBottom, cmLeftCenter, cmRightTop, cmRightBottom, cmRightCenter, cmTopCenter, cmBottomCenter, cmCenter };

//------------------------------------------------------------------------------
class CTSLOffset : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<int> CX;
  CLPProperty<int> CY;

public:
  CTSLOffset( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLOffset( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLOffset( CLPClassProperty *a_property, CTSLOffset ( CLPBaseClass::*a_getter )() );
  CTSLOffset( CLPClassProperty *a_property, CTSLOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOffset ) );
  CTSLOffset( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLOffset ) );
  CTSLOffset( CLPBaseComponent *a_control, CTSLOffset ( CLPBaseClass::*a_getter )() );
  CTSLOffset( CLPBaseComponent *a_control, CTSLOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOffset ) );
  CTSLOffset( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLOffset( const CTSLOffset &other );

public:
  CTSLOffset & operator = ( const CTSLOffset & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLOffset ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLOffset Value );
};
//------------------------------------------------------------------------------
class CTSLDelayValue : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<__int64> Value;
  CLPEnumProperty<CTSLDelayMode> Mode;

public:
  CTSLDelayValue( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDelayValue( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDelayValue( CLPClassProperty *a_property, CTSLDelayValue ( CLPBaseClass::*a_getter )() );
  CTSLDelayValue( CLPClassProperty *a_property, CTSLDelayValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDelayValue ) );
  CTSLDelayValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDelayValue ) );
  CTSLDelayValue( CLPBaseComponent *a_control, CTSLDelayValue ( CLPBaseClass::*a_getter )() );
  CTSLDelayValue( CLPBaseComponent *a_control, CTSLDelayValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDelayValue ) );
  CTSLDelayValue( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDelayValue( const CTSLDelayValue &other );

public:
  CTSLDelayValue & operator = ( const CTSLDelayValue & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDelayValue ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDelayValue Value );
};
//------------------------------------------------------------------------------
class CTSLCoordinateOffset : public CTSLOffset
{
//DOM-IGNORE-BEGIN
  typedef CTSLOffset inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPEnumProperty<CTSLCoordinateMode> CoordinateMode;

public:
  CTSLCoordinateOffset( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLCoordinateOffset( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLCoordinateOffset( CLPClassProperty *a_property, CTSLCoordinateOffset ( CLPBaseClass::*a_getter )() );
  CTSLCoordinateOffset( CLPClassProperty *a_property, CTSLCoordinateOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLCoordinateOffset ) );
  CTSLCoordinateOffset( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLCoordinateOffset ) );
  CTSLCoordinateOffset( CLPBaseComponent *a_control, CTSLCoordinateOffset ( CLPBaseClass::*a_getter )() );
  CTSLCoordinateOffset( CLPBaseComponent *a_control, CTSLCoordinateOffset ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLCoordinateOffset ) );
  CTSLCoordinateOffset( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLCoordinateOffset( const CTSLCoordinateOffset &other );

public:
  CTSLCoordinateOffset & operator = ( const CTSLCoordinateOffset & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLCoordinateOffset ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLCoordinateOffset Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayBrush : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPAccessProperty<CTSLDisplayBrush,CTColor> Color;
  CLPAccessProperty<CTSLDisplayBrush,unsigned char> Style;

protected:
  unsigned char GetStyle();
  void SetStyle( unsigned char Value );
  CTColor GetColor();
  void SetColor( CTColor Value );

public:
  CTSLDisplayBrush( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayBrush( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayBrush( CLPClassProperty *a_property, CTSLDisplayBrush ( CLPBaseClass::*a_getter )() );
  CTSLDisplayBrush( CLPClassProperty *a_property, CTSLDisplayBrush ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayBrush ) );
  CTSLDisplayBrush( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayBrush ) );
  CTSLDisplayBrush( CLPBaseComponent *a_control, CTSLDisplayBrush ( CLPBaseClass::*a_getter )() );
  CTSLDisplayBrush( CLPBaseComponent *a_control, CTSLDisplayBrush ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayBrush ) );
  CTSLDisplayBrush( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayBrush( const CTSLDisplayBrush &other );

public:
  CTSLDisplayBrush & operator = ( const CTSLDisplayBrush & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayBrush ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayBrush Value );
};
//------------------------------------------------------------------------------
class CTSLBasicOptionalLabel : public CTLPLockedPersistent
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistent inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTFont &Font;

public:    // Properties
  CLPProperty<bool> Visible;

public:
  CTSLBasicOptionalLabel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicOptionalLabel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicOptionalLabel( CLPClassProperty *a_property, CTSLBasicOptionalLabel ( CLPBaseClass::*a_getter )() );
  CTSLBasicOptionalLabel( CLPClassProperty *a_property, CTSLBasicOptionalLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicOptionalLabel ) );
  CTSLBasicOptionalLabel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicOptionalLabel ) );
  CTSLBasicOptionalLabel( CLPBaseComponent *a_control, CTSLBasicOptionalLabel ( CLPBaseClass::*a_getter )() );
  CTSLBasicOptionalLabel( CLPBaseComponent *a_control, CTSLBasicOptionalLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicOptionalLabel ) );
  CTSLBasicOptionalLabel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicOptionalLabel( const CTSLBasicOptionalLabel &other );
  virtual ~CTSLBasicOptionalLabel();

public:
  CTSLBasicOptionalLabel & operator = ( const CTSLBasicOptionalLabel & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicOptionalLabel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicOptionalLabel Value );
};
//------------------------------------------------------------------------------
class CTSLOptionalLabel : public CTSLBasicOptionalLabel
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicOptionalLabel inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTString> Text;

public:
  CTSLOptionalLabel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLOptionalLabel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLOptionalLabel( CLPClassProperty *a_property, CTSLOptionalLabel ( CLPBaseClass::*a_getter )() );
  CTSLOptionalLabel( CLPClassProperty *a_property, CTSLOptionalLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalLabel ) );
  CTSLOptionalLabel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLOptionalLabel ) );
  CTSLOptionalLabel( CLPBaseComponent *a_control, CTSLOptionalLabel ( CLPBaseClass::*a_getter )() );
  CTSLOptionalLabel( CLPBaseComponent *a_control, CTSLOptionalLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalLabel ) );
  CTSLOptionalLabel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLOptionalLabel( const CTSLOptionalLabel &other );

public:
  CTSLOptionalLabel & operator = ( const CTSLOptionalLabel & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLOptionalLabel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLOptionalLabel Value );
};
//------------------------------------------------------------------------------
#include <CSLFilterTypesCode.h>
//------------------------------------------------------------------------------
#endif   // CSLFilterTypes_H_
//------------------------------------------------------------------------------
