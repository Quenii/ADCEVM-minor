//------------------------------------------------------------------------------
//
//                    Generated by VCL C++ .NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2009
//                              www.mitov.com
//
//------------------------------------------------------------------------------
#ifndef CLPDrawLayers_H_
#define CLPDrawLayers_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabBasicPkgCB6_H_
  #include <CSignalLabBasicPkgCB6.h>
#endif
#ifndef CLPGDIPlusProperties_H_
  #include <CLPGDIPlusProperties.h>
#endif
#ifndef CSLComponentCollection_H_
  #include <CSLComponentCollection.h>
#endif


//------------------------------------------------------------------------------


//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
class CTLPDrawLayer : public CTSLComponentItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLComponentItem inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Properties
  CLPProperty<bool> Visible;

public:
  virtual bool GetHasEnable();
  virtual bool GetCanDisable();

public:
  CTLPDrawLayer();
};
//------------------------------------------------------------------------------
class CTLPControlDrawLayer : public CTSLCustomControlItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLCustomControlItem inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:

};
//------------------------------------------------------------------------------
class CTLPDrawLayers : public CLPComponentCollectionBase
{
//DOM-IGNORE-BEGIN
  typedef CLPComponentCollectionBase inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTLPDrawLayers( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPDrawLayers( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPDrawLayers( CLPClassProperty *a_property, CTLPDrawLayers ( CLPBaseClass::*a_getter )() );
  CTLPDrawLayers( CLPClassProperty *a_property, CTLPDrawLayers ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPDrawLayers ) );
  CTLPDrawLayers( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPDrawLayers ) );
  CTLPDrawLayers( CLPBaseComponent *a_control, CTLPDrawLayers ( CLPBaseClass::*a_getter )() );
  CTLPDrawLayers( CLPBaseComponent *a_control, CTLPDrawLayers ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPDrawLayers ) );
  CTLPDrawLayers( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPDrawLayers( const CTLPDrawLayers &other );

public:
  CTLPDrawLayers & operator = ( const CTLPDrawLayers & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPDrawLayers ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPDrawLayers Value );
};
//------------------------------------------------------------------------------
class CTLPLayerCollectionItem : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPAccessProperty<CTLPLayerCollectionItem,int> LayerIndex;

protected:
  void SetLayerIndex( int AValue );
  int GetLayerIndex();

public:
  CTLPLayerCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPLayerCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPLayerCollectionItem( CLPClassProperty *a_property, CTLPLayerCollectionItem ( CLPBaseClass::*a_getter )() );
  CTLPLayerCollectionItem( CLPClassProperty *a_property, CTLPLayerCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPLayerCollectionItem ) );
  CTLPLayerCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPLayerCollectionItem ) );
  CTLPLayerCollectionItem( CLPBaseComponent *a_control, CTLPLayerCollectionItem ( CLPBaseClass::*a_getter )() );
  CTLPLayerCollectionItem( CLPBaseComponent *a_control, CTLPLayerCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPLayerCollectionItem ) );
  CTLPLayerCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPLayerCollectionItem( const CTLPLayerCollectionItem &other );

public:
  CTLPLayerCollectionItem & operator = ( const CTLPLayerCollectionItem & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPLayerCollectionItem ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPLayerCollectionItem Value );
};
//------------------------------------------------------------------------------
class CTLPLayerCollection : public CLPCollectionProperty<CTLPLayerCollectionItem>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<CTLPLayerCollectionItem> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTLPLayerCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPLayerCollection( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPLayerCollection( CLPClassProperty *a_property, CTLPLayerCollection ( CLPBaseClass::*a_getter )() );
  CTLPLayerCollection( CLPClassProperty *a_property, CTLPLayerCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPLayerCollection ) );
  CTLPLayerCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPLayerCollection ) );
  CTLPLayerCollection( CLPBaseComponent *a_control, CTLPLayerCollection ( CLPBaseClass::*a_getter )() );
  CTLPLayerCollection( CLPBaseComponent *a_control, CTLPLayerCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPLayerCollection ) );
  CTLPLayerCollection( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPLayerCollection( const CTLPLayerCollection &other );

public:
  CTLPLayerCollection & operator = ( const CTLPLayerCollection & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPLayerCollection ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPLayerCollection Value );
};
//------------------------------------------------------------------------------
#include <CLPDrawLayersCode.h>
//------------------------------------------------------------------------------
#endif   // CLPDrawLayers_H_
//------------------------------------------------------------------------------
