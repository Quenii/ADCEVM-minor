//------------------------------------------------------------------------------
//
//                    Generated by VCL C++ .NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2009
//                              www.mitov.com
//
//------------------------------------------------------------------------------
#ifndef CSLScopeCode_H_
#define CSLScopeCode_H_

//------------------------------------------------------------------------------
inline CTSLDisplayCollectionItem::CTSLDisplayCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Name( GetInstance(), _T( "Name" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCollectionItem::CTSLDisplayCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Name( GetInstance(), _T( "Name" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCollectionItem::CTSLDisplayCollectionItem( CLPClassProperty *a_property, CTSLDisplayCollectionItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Name( GetInstance(), _T( "Name" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCollectionItem::CTSLDisplayCollectionItem( CLPClassProperty *a_property, CTSLDisplayCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCollectionItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Name( GetInstance(), _T( "Name" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCollectionItem::CTSLDisplayCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCollectionItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Name( GetInstance(), _T( "Name" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCollectionItem::CTSLDisplayCollectionItem( CLPBaseComponent *a_control, CTSLDisplayCollectionItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Name( GetInstance(), _T( "Name" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCollectionItem::CTSLDisplayCollectionItem( CLPBaseComponent *a_control, CTSLDisplayCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCollectionItem ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Name( GetInstance(), _T( "Name" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCollectionItem::CTSLDisplayCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Name( GetInstance(), _T( "Name" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCollectionItem::CTSLDisplayCollectionItem( const CTSLDisplayCollectionItem &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Name( GetInstance(), _T( "Name" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCollectionItem & CTSLDisplayCollectionItem::operator = ( const CTSLDisplayCollectionItem & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayCollectionItem::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayCollection<_TMP_TYPE_>::CTSLDisplayCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayCollection<_TMP_TYPE_>::CTSLDisplayCollection( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayCollection<_TMP_TYPE_>::CTSLDisplayCollection( CLPClassProperty *a_property, CTSLDisplayCollection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayCollection<_TMP_TYPE_>::CTSLDisplayCollection( CLPClassProperty *a_property, CTSLDisplayCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCollection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayCollection<_TMP_TYPE_>::CTSLDisplayCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCollection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayCollection<_TMP_TYPE_>::CTSLDisplayCollection( CLPBaseComponent *a_control, CTSLDisplayCollection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayCollection<_TMP_TYPE_>::CTSLDisplayCollection( CLPBaseComponent *a_control, CTSLDisplayCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCollection ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayCollection<_TMP_TYPE_>::CTSLDisplayCollection( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayCollection<_TMP_TYPE_>::CTSLDisplayCollection( const CTSLDisplayCollection &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayCollection<_TMP_TYPE_> & CTSLDisplayCollection<_TMP_TYPE_>::operator = ( const CTSLDisplayCollection & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> VCLHANDLE CTSLDisplayCollection<_TMP_TYPE_>::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLOptionalDisplayCollectionItem::CTSLOptionalDisplayCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalDisplayCollectionItem::CTSLOptionalDisplayCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalDisplayCollectionItem::CTSLOptionalDisplayCollectionItem( CLPClassProperty *a_property, CTSLOptionalDisplayCollectionItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalDisplayCollectionItem::CTSLOptionalDisplayCollectionItem( CLPClassProperty *a_property, CTSLOptionalDisplayCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalDisplayCollectionItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalDisplayCollectionItem::CTSLOptionalDisplayCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLOptionalDisplayCollectionItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalDisplayCollectionItem::CTSLOptionalDisplayCollectionItem( CLPBaseComponent *a_control, CTSLOptionalDisplayCollectionItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalDisplayCollectionItem::CTSLOptionalDisplayCollectionItem( CLPBaseComponent *a_control, CTSLOptionalDisplayCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalDisplayCollectionItem ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalDisplayCollectionItem::CTSLOptionalDisplayCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalDisplayCollectionItem::CTSLOptionalDisplayCollectionItem( const CTSLOptionalDisplayCollectionItem &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalDisplayCollectionItem & CTSLOptionalDisplayCollectionItem::operator = ( const CTSLOptionalDisplayCollectionItem & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLOptionalDisplayCollectionItem::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLOptionalDisplayCollection<_TMP_TYPE_>::CTSLOptionalDisplayCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLOptionalDisplayCollection<_TMP_TYPE_>::CTSLOptionalDisplayCollection( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLOptionalDisplayCollection<_TMP_TYPE_>::CTSLOptionalDisplayCollection( CLPClassProperty *a_property, CTSLOptionalDisplayCollection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLOptionalDisplayCollection<_TMP_TYPE_>::CTSLOptionalDisplayCollection( CLPClassProperty *a_property, CTSLOptionalDisplayCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalDisplayCollection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLOptionalDisplayCollection<_TMP_TYPE_>::CTSLOptionalDisplayCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLOptionalDisplayCollection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLOptionalDisplayCollection<_TMP_TYPE_>::CTSLOptionalDisplayCollection( CLPBaseComponent *a_control, CTSLOptionalDisplayCollection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLOptionalDisplayCollection<_TMP_TYPE_>::CTSLOptionalDisplayCollection( CLPBaseComponent *a_control, CTSLOptionalDisplayCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalDisplayCollection ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLOptionalDisplayCollection<_TMP_TYPE_>::CTSLOptionalDisplayCollection( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLOptionalDisplayCollection<_TMP_TYPE_>::CTSLOptionalDisplayCollection( const CTSLOptionalDisplayCollection &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLOptionalDisplayCollection<_TMP_TYPE_> & CTSLOptionalDisplayCollection<_TMP_TYPE_>::operator = ( const CTSLOptionalDisplayCollection & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> VCLHANDLE CTSLOptionalDisplayCollection<_TMP_TYPE_>::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarkerGroup::CTSLDisplayMarkerGroup( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Labels( *new CTSLOptionalLabel( GetInstance(), _T( "Labels" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarkerGroup::CTSLDisplayMarkerGroup( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Labels( *new CTSLOptionalLabel( GetInstance(), _T( "Labels" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarkerGroup::CTSLDisplayMarkerGroup( CLPClassProperty *a_property, CTSLDisplayMarkerGroup ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Labels( *new CTSLOptionalLabel( GetInstance(), _T( "Labels" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarkerGroup::CTSLDisplayMarkerGroup( CLPClassProperty *a_property, CTSLDisplayMarkerGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayMarkerGroup ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Labels( *new CTSLOptionalLabel( GetInstance(), _T( "Labels" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarkerGroup::CTSLDisplayMarkerGroup( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayMarkerGroup ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Labels( *new CTSLOptionalLabel( GetInstance(), _T( "Labels" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarkerGroup::CTSLDisplayMarkerGroup( CLPBaseComponent *a_control, CTSLDisplayMarkerGroup ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Labels( *new CTSLOptionalLabel( GetInstance(), _T( "Labels" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarkerGroup::CTSLDisplayMarkerGroup( CLPBaseComponent *a_control, CTSLDisplayMarkerGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayMarkerGroup ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Labels( *new CTSLOptionalLabel( GetInstance(), _T( "Labels" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarkerGroup::CTSLDisplayMarkerGroup( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Labels( *new CTSLOptionalLabel( GetInstance(), _T( "Labels" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarkerGroup::CTSLDisplayMarkerGroup( const CTSLDisplayMarkerGroup &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Labels( *new CTSLOptionalLabel( GetInstance(), _T( "Labels" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarkerGroup::~CTSLDisplayMarkerGroup()
{
  delete &Brush;
  delete &Pen;
  delete &Labels;
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarkerGroup & CTSLDisplayMarkerGroup::operator = ( const CTSLDisplayMarkerGroup & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayMarkerGroup::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroup::CTSLScopeMarkerGroup( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroup::CTSLScopeMarkerGroup( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroup::CTSLScopeMarkerGroup( CLPClassProperty *a_property, CTSLScopeMarkerGroup ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroup::CTSLScopeMarkerGroup( CLPClassProperty *a_property, CTSLScopeMarkerGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMarkerGroup ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroup::CTSLScopeMarkerGroup( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeMarkerGroup ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroup::CTSLScopeMarkerGroup( CLPBaseComponent *a_control, CTSLScopeMarkerGroup ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroup::CTSLScopeMarkerGroup( CLPBaseComponent *a_control, CTSLScopeMarkerGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMarkerGroup ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroup::CTSLScopeMarkerGroup( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroup::CTSLScopeMarkerGroup( const CTSLScopeMarkerGroup &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroup & CTSLScopeMarkerGroup::operator = ( const CTSLScopeMarkerGroup & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeMarkerGroup::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTSLScopeMarkerGroup::Clear()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLScopeMarkerGroup@Clear$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroups::CTSLScopeMarkerGroups( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroups::CTSLScopeMarkerGroups( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroups::CTSLScopeMarkerGroups( CLPClassProperty *a_property, CTSLScopeMarkerGroups ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroups::CTSLScopeMarkerGroups( CLPClassProperty *a_property, CTSLScopeMarkerGroups ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMarkerGroups ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroups::CTSLScopeMarkerGroups( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeMarkerGroups ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroups::CTSLScopeMarkerGroups( CLPBaseComponent *a_control, CTSLScopeMarkerGroups ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroups::CTSLScopeMarkerGroups( CLPBaseComponent *a_control, CTSLScopeMarkerGroups ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMarkerGroups ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroups::CTSLScopeMarkerGroups( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroups::CTSLScopeMarkerGroups( const CTSLScopeMarkerGroups &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMarkerGroups & CTSLScopeMarkerGroups::operator = ( const CTSLScopeMarkerGroups & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeMarkerGroups::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoint::CTSLDisplayZonePoint( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoint::CTSLDisplayZonePoint( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoint::CTSLDisplayZonePoint( CLPClassProperty *a_property, CTSLDisplayZonePoint ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoint::CTSLDisplayZonePoint( CLPClassProperty *a_property, CTSLDisplayZonePoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZonePoint ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoint::CTSLDisplayZonePoint( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayZonePoint ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoint::CTSLDisplayZonePoint( CLPBaseComponent *a_control, CTSLDisplayZonePoint ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoint::CTSLDisplayZonePoint( CLPBaseComponent *a_control, CTSLDisplayZonePoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZonePoint ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoint::CTSLDisplayZonePoint( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoint::CTSLDisplayZonePoint( const CTSLDisplayZonePoint &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoint & CTSLDisplayZonePoint::operator = ( const CTSLDisplayZonePoint & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayZonePoint::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoints::CTSLDisplayZonePoints( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoints::CTSLDisplayZonePoints( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoints::CTSLDisplayZonePoints( CLPClassProperty *a_property, CTSLDisplayZonePoints ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoints::CTSLDisplayZonePoints( CLPClassProperty *a_property, CTSLDisplayZonePoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZonePoints ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoints::CTSLDisplayZonePoints( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayZonePoints ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoints::CTSLDisplayZonePoints( CLPBaseComponent *a_control, CTSLDisplayZonePoints ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoints::CTSLDisplayZonePoints( CLPBaseComponent *a_control, CTSLDisplayZonePoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZonePoints ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoints::CTSLDisplayZonePoints( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoints::CTSLDisplayZonePoints( const CTSLDisplayZonePoints &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZonePoints & CTSLDisplayZonePoints::operator = ( const CTSLDisplayZonePoints & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayZonePoints::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayZone::CTSLBasicDisplayZone( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  IsDynamic( (CTSLBasicDisplayZone *)GetInstance(), &CTSLBasicDisplayZone::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayZone::CTSLBasicDisplayZone( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  IsDynamic( (CTSLBasicDisplayZone *)GetInstance(), &CTSLBasicDisplayZone::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayZone::CTSLBasicDisplayZone( CLPClassProperty *a_property, CTSLBasicDisplayZone ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  IsDynamic( (CTSLBasicDisplayZone *)GetInstance(), &CTSLBasicDisplayZone::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayZone::CTSLBasicDisplayZone( CLPClassProperty *a_property, CTSLBasicDisplayZone ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayZone ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  IsDynamic( (CTSLBasicDisplayZone *)GetInstance(), &CTSLBasicDisplayZone::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayZone::CTSLBasicDisplayZone( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayZone ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  IsDynamic( (CTSLBasicDisplayZone *)GetInstance(), &CTSLBasicDisplayZone::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayZone::CTSLBasicDisplayZone( CLPBaseComponent *a_control, CTSLBasicDisplayZone ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  IsDynamic( (CTSLBasicDisplayZone *)GetInstance(), &CTSLBasicDisplayZone::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayZone::CTSLBasicDisplayZone( CLPBaseComponent *a_control, CTSLBasicDisplayZone ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayZone ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  IsDynamic( (CTSLBasicDisplayZone *)GetInstance(), &CTSLBasicDisplayZone::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayZone::CTSLBasicDisplayZone( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  IsDynamic( (CTSLBasicDisplayZone *)GetInstance(), &CTSLBasicDisplayZone::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayZone::CTSLBasicDisplayZone( const CTSLBasicDisplayZone &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  IsDynamic( (CTSLBasicDisplayZone *)GetInstance(), &CTSLBasicDisplayZone::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayZone::~CTSLBasicDisplayZone()
{
  delete &Brush;
  delete &Pen;
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayZone & CTSLBasicDisplayZone::operator = ( const CTSLBasicDisplayZone & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLBasicDisplayZone::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline bool CTSLBasicDisplayZone::GetVC_IsDynamic()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicDisplayZone@GetVC_IsDynamic$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLBasicDisplayZones<_TMP_TYPE_>::CTSLBasicDisplayZones( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLBasicDisplayZones<_TMP_TYPE_>::CTSLBasicDisplayZones( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLBasicDisplayZones<_TMP_TYPE_>::CTSLBasicDisplayZones( CLPClassProperty *a_property, CTSLBasicDisplayZones ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLBasicDisplayZones<_TMP_TYPE_>::CTSLBasicDisplayZones( CLPClassProperty *a_property, CTSLBasicDisplayZones ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayZones ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLBasicDisplayZones<_TMP_TYPE_>::CTSLBasicDisplayZones( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayZones ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLBasicDisplayZones<_TMP_TYPE_>::CTSLBasicDisplayZones( CLPBaseComponent *a_control, CTSLBasicDisplayZones ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLBasicDisplayZones<_TMP_TYPE_>::CTSLBasicDisplayZones( CLPBaseComponent *a_control, CTSLBasicDisplayZones ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayZones ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLBasicDisplayZones<_TMP_TYPE_>::CTSLBasicDisplayZones( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLBasicDisplayZones<_TMP_TYPE_>::CTSLBasicDisplayZones( const CTSLBasicDisplayZones &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLBasicDisplayZones<_TMP_TYPE_> & CTSLBasicDisplayZones<_TMP_TYPE_>::operator = ( const CTSLBasicDisplayZones & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> VCLHANDLE CTSLBasicDisplayZones<_TMP_TYPE_>::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayZone::CTSLDisplayZone( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Points( *new CTSLDisplayZonePoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZone::CTSLDisplayZone( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Points( *new CTSLDisplayZonePoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZone::CTSLDisplayZone( CLPClassProperty *a_property, CTSLDisplayZone ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Points( *new CTSLDisplayZonePoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZone::CTSLDisplayZone( CLPClassProperty *a_property, CTSLDisplayZone ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZone ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Points( *new CTSLDisplayZonePoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZone::CTSLDisplayZone( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayZone ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Points( *new CTSLDisplayZonePoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZone::CTSLDisplayZone( CLPBaseComponent *a_control, CTSLDisplayZone ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Points( *new CTSLDisplayZonePoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZone::CTSLDisplayZone( CLPBaseComponent *a_control, CTSLDisplayZone ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZone ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Points( *new CTSLDisplayZonePoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZone::CTSLDisplayZone( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Points( *new CTSLDisplayZonePoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZone::CTSLDisplayZone( const CTSLDisplayZone &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Points( *new CTSLDisplayZonePoints( GetInstance(), _T( "Points" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZone::~CTSLDisplayZone()
{
  delete &Points;
}
//------------------------------------------------------------------------------
inline CTSLDisplayZone & CTSLDisplayZone::operator = ( const CTSLDisplayZone & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayZone::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayZones::CTSLDisplayZones( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZones::CTSLDisplayZones( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZones::CTSLDisplayZones( CLPClassProperty *a_property, CTSLDisplayZones ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZones::CTSLDisplayZones( CLPClassProperty *a_property, CTSLDisplayZones ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZones ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZones::CTSLDisplayZones( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayZones ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZones::CTSLDisplayZones( CLPBaseComponent *a_control, CTSLDisplayZones ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZones::CTSLDisplayZones( CLPBaseComponent *a_control, CTSLDisplayZones ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZones ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZones::CTSLDisplayZones( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZones::CTSLDisplayZones( const CTSLDisplayZones &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZones & CTSLDisplayZones::operator = ( const CTSLDisplayZones & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayZones::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticPoint::CTSLDisplayEllipticPoint( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticPoint::CTSLDisplayEllipticPoint( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticPoint::CTSLDisplayEllipticPoint( CLPClassProperty *a_property, CTSLDisplayEllipticPoint ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticPoint::CTSLDisplayEllipticPoint( CLPClassProperty *a_property, CTSLDisplayEllipticPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticPoint ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticPoint::CTSLDisplayEllipticPoint( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticPoint ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticPoint::CTSLDisplayEllipticPoint( CLPBaseComponent *a_control, CTSLDisplayEllipticPoint ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticPoint::CTSLDisplayEllipticPoint( CLPBaseComponent *a_control, CTSLDisplayEllipticPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticPoint ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticPoint::CTSLDisplayEllipticPoint( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticPoint::CTSLDisplayEllipticPoint( const CTSLDisplayEllipticPoint &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticPoint & CTSLDisplayEllipticPoint::operator = ( const CTSLDisplayEllipticPoint & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayEllipticPoint::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZone::CTSLDisplayEllipticZone( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Point1( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point1" ))),
  Point2( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point2" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZone::CTSLDisplayEllipticZone( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Point1( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point1" ))),
  Point2( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point2" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZone::CTSLDisplayEllipticZone( CLPClassProperty *a_property, CTSLDisplayEllipticZone ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Point1( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point1" ))),
  Point2( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point2" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZone::CTSLDisplayEllipticZone( CLPClassProperty *a_property, CTSLDisplayEllipticZone ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticZone ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Point1( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point1" ))),
  Point2( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point2" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZone::CTSLDisplayEllipticZone( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticZone ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Point1( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point1" ))),
  Point2( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point2" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZone::CTSLDisplayEllipticZone( CLPBaseComponent *a_control, CTSLDisplayEllipticZone ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Point1( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point1" ))),
  Point2( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point2" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZone::CTSLDisplayEllipticZone( CLPBaseComponent *a_control, CTSLDisplayEllipticZone ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticZone ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Point1( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point1" ))),
  Point2( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point2" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZone::CTSLDisplayEllipticZone( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Point1( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point1" ))),
  Point2( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point2" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZone::CTSLDisplayEllipticZone( const CTSLDisplayEllipticZone &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Point1( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point1" ))),
  Point2( *new CTSLDisplayEllipticPoint( GetInstance(), _T( "Point2" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZone::~CTSLDisplayEllipticZone()
{
  delete &Point1;
  delete &Point2;
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZone & CTSLDisplayEllipticZone::operator = ( const CTSLDisplayEllipticZone & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayEllipticZone::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZones::CTSLDisplayEllipticZones( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZones::CTSLDisplayEllipticZones( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZones::CTSLDisplayEllipticZones( CLPClassProperty *a_property, CTSLDisplayEllipticZones ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZones::CTSLDisplayEllipticZones( CLPClassProperty *a_property, CTSLDisplayEllipticZones ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticZones ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZones::CTSLDisplayEllipticZones( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticZones ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZones::CTSLDisplayEllipticZones( CLPBaseComponent *a_control, CTSLDisplayEllipticZones ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZones::CTSLDisplayEllipticZones( CLPBaseComponent *a_control, CTSLDisplayEllipticZones ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticZones ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZones::CTSLDisplayEllipticZones( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZones::CTSLDisplayEllipticZones( const CTSLDisplayEllipticZones &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayEllipticZones & CTSLDisplayEllipticZones::operator = ( const CTSLDisplayEllipticZones & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayEllipticZones::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarker::CTSLDisplayMarker( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarker::CTSLDisplayMarker( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarker::CTSLDisplayMarker( CLPClassProperty *a_property, CTSLDisplayMarker ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarker::CTSLDisplayMarker( CLPClassProperty *a_property, CTSLDisplayMarker ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayMarker ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarker::CTSLDisplayMarker( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayMarker ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarker::CTSLDisplayMarker( CLPBaseComponent *a_control, CTSLDisplayMarker ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarker::CTSLDisplayMarker( CLPBaseComponent *a_control, CTSLDisplayMarker ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayMarker ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarker::CTSLDisplayMarker( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarker::CTSLDisplayMarker( const CTSLDisplayMarker &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayMarker & CTSLDisplayMarker::operator = ( const CTSLDisplayMarker & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayMarker::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarker::CTSLScopeChannelMarker( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( GetInstance(), _T( "Position" ) ),
  MarkerGroupIndex( (CTSLScopeChannelMarker *)GetInstance(), &CTSLScopeChannelMarker::GetGroupIndex, &CTSLScopeChannelMarker::SetGroupIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarker::CTSLScopeChannelMarker( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( GetInstance(), _T( "Position" ) ),
  MarkerGroupIndex( (CTSLScopeChannelMarker *)GetInstance(), &CTSLScopeChannelMarker::GetGroupIndex, &CTSLScopeChannelMarker::SetGroupIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarker::CTSLScopeChannelMarker( CLPClassProperty *a_property, CTSLScopeChannelMarker ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Position( GetInstance(), _T( "Position" ) ),
  MarkerGroupIndex( (CTSLScopeChannelMarker *)GetInstance(), &CTSLScopeChannelMarker::GetGroupIndex, &CTSLScopeChannelMarker::SetGroupIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarker::CTSLScopeChannelMarker( CLPClassProperty *a_property, CTSLScopeChannelMarker ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannelMarker ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Position( GetInstance(), _T( "Position" ) ),
  MarkerGroupIndex( (CTSLScopeChannelMarker *)GetInstance(), &CTSLScopeChannelMarker::GetGroupIndex, &CTSLScopeChannelMarker::SetGroupIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarker::CTSLScopeChannelMarker( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeChannelMarker ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Position( GetInstance(), _T( "Position" ) ),
  MarkerGroupIndex( (CTSLScopeChannelMarker *)GetInstance(), &CTSLScopeChannelMarker::GetGroupIndex, &CTSLScopeChannelMarker::SetGroupIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarker::CTSLScopeChannelMarker( CLPBaseComponent *a_control, CTSLScopeChannelMarker ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Position( GetInstance(), _T( "Position" ) ),
  MarkerGroupIndex( (CTSLScopeChannelMarker *)GetInstance(), &CTSLScopeChannelMarker::GetGroupIndex, &CTSLScopeChannelMarker::SetGroupIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarker::CTSLScopeChannelMarker( CLPBaseComponent *a_control, CTSLScopeChannelMarker ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannelMarker ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Position( GetInstance(), _T( "Position" ) ),
  MarkerGroupIndex( (CTSLScopeChannelMarker *)GetInstance(), &CTSLScopeChannelMarker::GetGroupIndex, &CTSLScopeChannelMarker::SetGroupIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarker::CTSLScopeChannelMarker( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( GetInstance(), _T( "Position" ) ),
  MarkerGroupIndex( (CTSLScopeChannelMarker *)GetInstance(), &CTSLScopeChannelMarker::GetGroupIndex, &CTSLScopeChannelMarker::SetGroupIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarker::CTSLScopeChannelMarker( const CTSLScopeChannelMarker &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( GetInstance(), _T( "Position" ) ),
  MarkerGroupIndex( (CTSLScopeChannelMarker *)GetInstance(), &CTSLScopeChannelMarker::GetGroupIndex, &CTSLScopeChannelMarker::SetGroupIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarker & CTSLScopeChannelMarker::operator = ( const CTSLScopeChannelMarker & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeChannelMarker::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTSLScopeChannelMarker::SetGroupIndex( int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLScopeChannelMarker@SetGroupIndex$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTSLScopeChannelMarker::GetGroupIndex()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLScopeChannelMarker@GetGroupIndex$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarkers::CTSLScopeChannelMarkers( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarkers::CTSLScopeChannelMarkers( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarkers::CTSLScopeChannelMarkers( CLPClassProperty *a_property, CTSLScopeChannelMarkers ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarkers::CTSLScopeChannelMarkers( CLPClassProperty *a_property, CTSLScopeChannelMarkers ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannelMarkers ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarkers::CTSLScopeChannelMarkers( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeChannelMarkers ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarkers::CTSLScopeChannelMarkers( CLPBaseComponent *a_control, CTSLScopeChannelMarkers ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarkers::CTSLScopeChannelMarkers( CLPBaseComponent *a_control, CTSLScopeChannelMarkers ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannelMarkers ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarkers::CTSLScopeChannelMarkers( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarkers::CTSLScopeChannelMarkers( const CTSLScopeChannelMarkers &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarkers & CTSLScopeChannelMarkers::operator = ( const CTSLScopeChannelMarkers & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeChannelMarkers::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarker CTSLScopeChannelMarkers::AddMarkerAt( int AMarkerGroupIndex, int XValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLScopeChannelMarkers@AddMarkerAt$qqrii" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AMarkerGroupIndex;
    int __1_Param2 = XValue;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  ecx
      pop  edx
      pop  eax
      }
    }

  return (CTSLScopeChannelMarker)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarker CTSLScopeChannelMarkers::AddMarkerAtCurrentPos( int AMarkerGroupIndex )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLScopeChannelMarkers@AddMarkerAtCurrentPos$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AMarkerGroupIndex;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  edx
      pop  eax
      }
    }

  return (CTSLScopeChannelMarker)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLDisplayLabel::CTSLDisplayLabel( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayLabel::CTSLDisplayLabel( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayLabel::CTSLDisplayLabel( CLPClassProperty *a_property, CTSLDisplayLabel ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayLabel::CTSLDisplayLabel( CLPClassProperty *a_property, CTSLDisplayLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayLabel ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayLabel::CTSLDisplayLabel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayLabel ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayLabel::CTSLDisplayLabel( CLPBaseComponent *a_control, CTSLDisplayLabel ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayLabel::CTSLDisplayLabel( CLPBaseComponent *a_control, CTSLDisplayLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayLabel ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayLabel::CTSLDisplayLabel( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayLabel::CTSLDisplayLabel( const CTSLDisplayLabel &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayLabel & CTSLDisplayLabel::operator = ( const CTSLDisplayLabel & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayLabel::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLink::CTSLDisplayCursorChannelLink( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  ChannelLabel( *new CTSLDisplayLabel( GetInstance(), _T( "ChannelLabel" ))),
  ChannelIndex( (CTSLDisplayCursorChannelLink *)GetInstance(), &CTSLDisplayCursorChannelLink::GetChannelIndex, &CTSLDisplayCursorChannelLink::SetChannelIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLink::CTSLDisplayCursorChannelLink( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  ChannelLabel( *new CTSLDisplayLabel( GetInstance(), _T( "ChannelLabel" ))),
  ChannelIndex( (CTSLDisplayCursorChannelLink *)GetInstance(), &CTSLDisplayCursorChannelLink::GetChannelIndex, &CTSLDisplayCursorChannelLink::SetChannelIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLink::CTSLDisplayCursorChannelLink( CLPClassProperty *a_property, CTSLDisplayCursorChannelLink ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  ChannelLabel( *new CTSLDisplayLabel( GetInstance(), _T( "ChannelLabel" ))),
  ChannelIndex( (CTSLDisplayCursorChannelLink *)GetInstance(), &CTSLDisplayCursorChannelLink::GetChannelIndex, &CTSLDisplayCursorChannelLink::SetChannelIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLink::CTSLDisplayCursorChannelLink( CLPClassProperty *a_property, CTSLDisplayCursorChannelLink ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorChannelLink ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  ChannelLabel( *new CTSLDisplayLabel( GetInstance(), _T( "ChannelLabel" ))),
  ChannelIndex( (CTSLDisplayCursorChannelLink *)GetInstance(), &CTSLDisplayCursorChannelLink::GetChannelIndex, &CTSLDisplayCursorChannelLink::SetChannelIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLink::CTSLDisplayCursorChannelLink( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorChannelLink ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  ChannelLabel( *new CTSLDisplayLabel( GetInstance(), _T( "ChannelLabel" ))),
  ChannelIndex( (CTSLDisplayCursorChannelLink *)GetInstance(), &CTSLDisplayCursorChannelLink::GetChannelIndex, &CTSLDisplayCursorChannelLink::SetChannelIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLink::CTSLDisplayCursorChannelLink( CLPBaseComponent *a_control, CTSLDisplayCursorChannelLink ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  ChannelLabel( *new CTSLDisplayLabel( GetInstance(), _T( "ChannelLabel" ))),
  ChannelIndex( (CTSLDisplayCursorChannelLink *)GetInstance(), &CTSLDisplayCursorChannelLink::GetChannelIndex, &CTSLDisplayCursorChannelLink::SetChannelIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLink::CTSLDisplayCursorChannelLink( CLPBaseComponent *a_control, CTSLDisplayCursorChannelLink ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorChannelLink ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  ChannelLabel( *new CTSLDisplayLabel( GetInstance(), _T( "ChannelLabel" ))),
  ChannelIndex( (CTSLDisplayCursorChannelLink *)GetInstance(), &CTSLDisplayCursorChannelLink::GetChannelIndex, &CTSLDisplayCursorChannelLink::SetChannelIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLink::CTSLDisplayCursorChannelLink( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  ChannelLabel( *new CTSLDisplayLabel( GetInstance(), _T( "ChannelLabel" ))),
  ChannelIndex( (CTSLDisplayCursorChannelLink *)GetInstance(), &CTSLDisplayCursorChannelLink::GetChannelIndex, &CTSLDisplayCursorChannelLink::SetChannelIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLink::CTSLDisplayCursorChannelLink( const CTSLDisplayCursorChannelLink &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" ))),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  ChannelLabel( *new CTSLDisplayLabel( GetInstance(), _T( "ChannelLabel" ))),
  ChannelIndex( (CTSLDisplayCursorChannelLink *)GetInstance(), &CTSLDisplayCursorChannelLink::GetChannelIndex, &CTSLDisplayCursorChannelLink::SetChannelIndex)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLink::~CTSLDisplayCursorChannelLink()
{
  delete &Pen;
  delete &Brush;
  delete &ChannelLabel;
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLink & CTSLDisplayCursorChannelLink::operator = ( const CTSLDisplayCursorChannelLink & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayCursorChannelLink::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTSLDisplayCursorChannelLink::SetChannelIndex( int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursorChannelLink@SetChannelIndex$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTSLDisplayCursorChannelLink::GetChannelIndex()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursorChannelLink@GetChannelIndex$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLinks::CTSLDisplayCursorChannelLinks( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLinks::CTSLDisplayCursorChannelLinks( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLinks::CTSLDisplayCursorChannelLinks( CLPClassProperty *a_property, CTSLDisplayCursorChannelLinks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLinks::CTSLDisplayCursorChannelLinks( CLPClassProperty *a_property, CTSLDisplayCursorChannelLinks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorChannelLinks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLinks::CTSLDisplayCursorChannelLinks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorChannelLinks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLinks::CTSLDisplayCursorChannelLinks( CLPBaseComponent *a_control, CTSLDisplayCursorChannelLinks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLinks::CTSLDisplayCursorChannelLinks( CLPBaseComponent *a_control, CTSLDisplayCursorChannelLinks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorChannelLinks ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLinks::CTSLDisplayCursorChannelLinks( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLinks::CTSLDisplayCursorChannelLinks( const CTSLDisplayCursorChannelLinks &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorChannelLinks & CTSLDisplayCursorChannelLinks::operator = ( const CTSLDisplayCursorChannelLinks & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayCursorChannelLinks::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLViewButtonSettings::CTSLViewButtonSettings( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownColor( GetInstance(), _T( "MouseDownColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLViewButtonSettings::CTSLViewButtonSettings( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownColor( GetInstance(), _T( "MouseDownColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLViewButtonSettings::CTSLViewButtonSettings( CLPClassProperty *a_property, CTSLViewButtonSettings ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownColor( GetInstance(), _T( "MouseDownColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLViewButtonSettings::CTSLViewButtonSettings( CLPClassProperty *a_property, CTSLViewButtonSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLViewButtonSettings ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownColor( GetInstance(), _T( "MouseDownColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLViewButtonSettings::CTSLViewButtonSettings( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLViewButtonSettings ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownColor( GetInstance(), _T( "MouseDownColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLViewButtonSettings::CTSLViewButtonSettings( CLPBaseComponent *a_control, CTSLViewButtonSettings ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownColor( GetInstance(), _T( "MouseDownColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLViewButtonSettings::CTSLViewButtonSettings( CLPBaseComponent *a_control, CTSLViewButtonSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLViewButtonSettings ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownColor( GetInstance(), _T( "MouseDownColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLViewButtonSettings::CTSLViewButtonSettings( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownColor( GetInstance(), _T( "MouseDownColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLViewButtonSettings::CTSLViewButtonSettings( const CTSLViewButtonSettings &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverColor( GetInstance(), _T( "MouseOverColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownColor( GetInstance(), _T( "MouseDownColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLViewButtonSettings & CTSLViewButtonSettings::operator = ( const CTSLViewButtonSettings & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLViewButtonSettings::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLLegendViewButtonSettings::CTSLLegendViewButtonSettings( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendViewButtonSettings::CTSLLegendViewButtonSettings( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendViewButtonSettings::CTSLLegendViewButtonSettings( CLPClassProperty *a_property, CTSLLegendViewButtonSettings ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendViewButtonSettings::CTSLLegendViewButtonSettings( CLPClassProperty *a_property, CTSLLegendViewButtonSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLegendViewButtonSettings ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendViewButtonSettings::CTSLLegendViewButtonSettings( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLLegendViewButtonSettings ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendViewButtonSettings::CTSLLegendViewButtonSettings( CLPBaseComponent *a_control, CTSLLegendViewButtonSettings ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendViewButtonSettings::CTSLLegendViewButtonSettings( CLPBaseComponent *a_control, CTSLLegendViewButtonSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLegendViewButtonSettings ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendViewButtonSettings::CTSLLegendViewButtonSettings( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendViewButtonSettings::CTSLLegendViewButtonSettings( const CTSLLegendViewButtonSettings &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendViewButtonSettings & CTSLLegendViewButtonSettings::operator = ( const CTSLLegendViewButtonSettings & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLLegendViewButtonSettings::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorPosition::CTSLDisplayCursorPosition( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetX, &CTSLDisplayCursorPosition::SetX),
  Y( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetY, &CTSLDisplayCursorPosition::SetY)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorPosition::CTSLDisplayCursorPosition( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetX, &CTSLDisplayCursorPosition::SetX),
  Y( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetY, &CTSLDisplayCursorPosition::SetY)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorPosition::CTSLDisplayCursorPosition( CLPClassProperty *a_property, CTSLDisplayCursorPosition ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  X( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetX, &CTSLDisplayCursorPosition::SetX),
  Y( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetY, &CTSLDisplayCursorPosition::SetY)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorPosition::CTSLDisplayCursorPosition( CLPClassProperty *a_property, CTSLDisplayCursorPosition ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorPosition ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  X( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetX, &CTSLDisplayCursorPosition::SetX),
  Y( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetY, &CTSLDisplayCursorPosition::SetY)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorPosition::CTSLDisplayCursorPosition( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorPosition ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  X( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetX, &CTSLDisplayCursorPosition::SetX),
  Y( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetY, &CTSLDisplayCursorPosition::SetY)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorPosition::CTSLDisplayCursorPosition( CLPBaseComponent *a_control, CTSLDisplayCursorPosition ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  X( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetX, &CTSLDisplayCursorPosition::SetX),
  Y( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetY, &CTSLDisplayCursorPosition::SetY)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorPosition::CTSLDisplayCursorPosition( CLPBaseComponent *a_control, CTSLDisplayCursorPosition ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorPosition ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  X( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetX, &CTSLDisplayCursorPosition::SetX),
  Y( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetY, &CTSLDisplayCursorPosition::SetY)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorPosition::CTSLDisplayCursorPosition( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetX, &CTSLDisplayCursorPosition::SetX),
  Y( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetY, &CTSLDisplayCursorPosition::SetY)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorPosition::CTSLDisplayCursorPosition( const CTSLDisplayCursorPosition &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetX, &CTSLDisplayCursorPosition::SetX),
  Y( (CTSLDisplayCursorPosition *)GetInstance(), &CTSLDisplayCursorPosition::GetY, &CTSLDisplayCursorPosition::SetY)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorPosition & CTSLDisplayCursorPosition::operator = ( const CTSLDisplayCursorPosition & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayCursorPosition::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline double CTSLDisplayCursorPosition::GetY()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursorPosition@GetY$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline void CTSLDisplayCursorPosition::SetY( double AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursorPosition@SetY$qqrd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline double CTSLDisplayCursorPosition::GetX()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursorPosition@GetX$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline void CTSLDisplayCursorPosition::SetX( double AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursorPosition@SetX$qqrd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLink::CTSLDisplayCursorLink( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  BeginCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetBeginCursorIndex, &CTSLDisplayCursorLink::SetBeginCursorIndex),
  EndCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetEndCursorIndex, &CTSLDisplayCursorLink::SetEndCursorIndex),
  MeasurementLine( *new CTSLScopeMeasurementLine( GetInstance(), _T( "MeasurementLine" ))),
  Selection( *new CTSLScopeSelection( GetInstance(), _T( "Selection" ))),
  IsDynamic( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLink::CTSLDisplayCursorLink( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  BeginCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetBeginCursorIndex, &CTSLDisplayCursorLink::SetBeginCursorIndex),
  EndCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetEndCursorIndex, &CTSLDisplayCursorLink::SetEndCursorIndex),
  MeasurementLine( *new CTSLScopeMeasurementLine( GetInstance(), _T( "MeasurementLine" ))),
  Selection( *new CTSLScopeSelection( GetInstance(), _T( "Selection" ))),
  IsDynamic( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLink::CTSLDisplayCursorLink( CLPClassProperty *a_property, CTSLDisplayCursorLink ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  BeginCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetBeginCursorIndex, &CTSLDisplayCursorLink::SetBeginCursorIndex),
  EndCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetEndCursorIndex, &CTSLDisplayCursorLink::SetEndCursorIndex),
  MeasurementLine( *new CTSLScopeMeasurementLine( GetInstance(), _T( "MeasurementLine" ))),
  Selection( *new CTSLScopeSelection( GetInstance(), _T( "Selection" ))),
  IsDynamic( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLink::CTSLDisplayCursorLink( CLPClassProperty *a_property, CTSLDisplayCursorLink ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLink ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  BeginCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetBeginCursorIndex, &CTSLDisplayCursorLink::SetBeginCursorIndex),
  EndCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetEndCursorIndex, &CTSLDisplayCursorLink::SetEndCursorIndex),
  MeasurementLine( *new CTSLScopeMeasurementLine( GetInstance(), _T( "MeasurementLine" ))),
  Selection( *new CTSLScopeSelection( GetInstance(), _T( "Selection" ))),
  IsDynamic( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLink::CTSLDisplayCursorLink( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLink ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  BeginCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetBeginCursorIndex, &CTSLDisplayCursorLink::SetBeginCursorIndex),
  EndCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetEndCursorIndex, &CTSLDisplayCursorLink::SetEndCursorIndex),
  MeasurementLine( *new CTSLScopeMeasurementLine( GetInstance(), _T( "MeasurementLine" ))),
  Selection( *new CTSLScopeSelection( GetInstance(), _T( "Selection" ))),
  IsDynamic( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLink::CTSLDisplayCursorLink( CLPBaseComponent *a_control, CTSLDisplayCursorLink ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  BeginCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetBeginCursorIndex, &CTSLDisplayCursorLink::SetBeginCursorIndex),
  EndCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetEndCursorIndex, &CTSLDisplayCursorLink::SetEndCursorIndex),
  MeasurementLine( *new CTSLScopeMeasurementLine( GetInstance(), _T( "MeasurementLine" ))),
  Selection( *new CTSLScopeSelection( GetInstance(), _T( "Selection" ))),
  IsDynamic( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLink::CTSLDisplayCursorLink( CLPBaseComponent *a_control, CTSLDisplayCursorLink ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLink ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  BeginCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetBeginCursorIndex, &CTSLDisplayCursorLink::SetBeginCursorIndex),
  EndCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetEndCursorIndex, &CTSLDisplayCursorLink::SetEndCursorIndex),
  MeasurementLine( *new CTSLScopeMeasurementLine( GetInstance(), _T( "MeasurementLine" ))),
  Selection( *new CTSLScopeSelection( GetInstance(), _T( "Selection" ))),
  IsDynamic( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLink::CTSLDisplayCursorLink( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  BeginCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetBeginCursorIndex, &CTSLDisplayCursorLink::SetBeginCursorIndex),
  EndCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetEndCursorIndex, &CTSLDisplayCursorLink::SetEndCursorIndex),
  MeasurementLine( *new CTSLScopeMeasurementLine( GetInstance(), _T( "MeasurementLine" ))),
  Selection( *new CTSLScopeSelection( GetInstance(), _T( "Selection" ))),
  IsDynamic( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLink::CTSLDisplayCursorLink( const CTSLDisplayCursorLink &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  BeginCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetBeginCursorIndex, &CTSLDisplayCursorLink::SetBeginCursorIndex),
  EndCursorIndex( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetEndCursorIndex, &CTSLDisplayCursorLink::SetEndCursorIndex),
  MeasurementLine( *new CTSLScopeMeasurementLine( GetInstance(), _T( "MeasurementLine" ))),
  Selection( *new CTSLScopeSelection( GetInstance(), _T( "Selection" ))),
  IsDynamic( (CTSLDisplayCursorLink *)GetInstance(), &CTSLDisplayCursorLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLink::~CTSLDisplayCursorLink()
{
  delete &MeasurementLine;
  delete &Selection;
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLink & CTSLDisplayCursorLink::operator = ( const CTSLDisplayCursorLink & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayCursorLink::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline int CTSLDisplayCursorLink::GetEndCursorIndex()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursorLink@GetEndCursorIndex$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTSLDisplayCursorLink::SetEndCursorIndex( int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursorLink@SetEndCursorIndex$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTSLDisplayCursorLink::GetBeginCursorIndex()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursorLink@GetBeginCursorIndex$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTSLDisplayCursorLink::SetBeginCursorIndex( int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursorLink@SetBeginCursorIndex$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline bool CTSLDisplayCursorLink::GetVC_IsDynamic()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursorLink@GetVC_IsDynamic$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinkList::CTSLDisplayCursorLinkList( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( (CTSLDisplayCursorLinkList *)GetInstance(), &CTSLDisplayCursorLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinkList::CTSLDisplayCursorLinkList( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( (CTSLDisplayCursorLinkList *)GetInstance(), &CTSLDisplayCursorLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinkList::CTSLDisplayCursorLinkList( CLPClassProperty *a_property, CTSLDisplayCursorLinkList ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Count( (CTSLDisplayCursorLinkList *)GetInstance(), &CTSLDisplayCursorLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinkList::CTSLDisplayCursorLinkList( CLPClassProperty *a_property, CTSLDisplayCursorLinkList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLinkList ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Count( (CTSLDisplayCursorLinkList *)GetInstance(), &CTSLDisplayCursorLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinkList::CTSLDisplayCursorLinkList( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLinkList ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Count( (CTSLDisplayCursorLinkList *)GetInstance(), &CTSLDisplayCursorLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinkList::CTSLDisplayCursorLinkList( CLPBaseComponent *a_control, CTSLDisplayCursorLinkList ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Count( (CTSLDisplayCursorLinkList *)GetInstance(), &CTSLDisplayCursorLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinkList::CTSLDisplayCursorLinkList( CLPBaseComponent *a_control, CTSLDisplayCursorLinkList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLinkList ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Count( (CTSLDisplayCursorLinkList *)GetInstance(), &CTSLDisplayCursorLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinkList::CTSLDisplayCursorLinkList( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( (CTSLDisplayCursorLinkList *)GetInstance(), &CTSLDisplayCursorLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinkList::CTSLDisplayCursorLinkList( const CTSLDisplayCursorLinkList &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( (CTSLDisplayCursorLinkList *)GetInstance(), &CTSLDisplayCursorLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinkList & CTSLDisplayCursorLinkList::operator = ( const CTSLDisplayCursorLinkList & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayCursorLinkList::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline int CTSLDisplayCursorLinkList::GetCount()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursorLinkList@GetCount$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLAssociatedChannelLinkList::CTSLAssociatedChannelLinkList( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( (CTSLAssociatedChannelLinkList *)GetInstance(), &CTSLAssociatedChannelLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedChannelLinkList::CTSLAssociatedChannelLinkList( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( (CTSLAssociatedChannelLinkList *)GetInstance(), &CTSLAssociatedChannelLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedChannelLinkList::CTSLAssociatedChannelLinkList( CLPClassProperty *a_property, CTSLAssociatedChannelLinkList ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Count( (CTSLAssociatedChannelLinkList *)GetInstance(), &CTSLAssociatedChannelLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedChannelLinkList::CTSLAssociatedChannelLinkList( CLPClassProperty *a_property, CTSLAssociatedChannelLinkList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAssociatedChannelLinkList ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Count( (CTSLAssociatedChannelLinkList *)GetInstance(), &CTSLAssociatedChannelLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedChannelLinkList::CTSLAssociatedChannelLinkList( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAssociatedChannelLinkList ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Count( (CTSLAssociatedChannelLinkList *)GetInstance(), &CTSLAssociatedChannelLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedChannelLinkList::CTSLAssociatedChannelLinkList( CLPBaseComponent *a_control, CTSLAssociatedChannelLinkList ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Count( (CTSLAssociatedChannelLinkList *)GetInstance(), &CTSLAssociatedChannelLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedChannelLinkList::CTSLAssociatedChannelLinkList( CLPBaseComponent *a_control, CTSLAssociatedChannelLinkList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAssociatedChannelLinkList ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Count( (CTSLAssociatedChannelLinkList *)GetInstance(), &CTSLAssociatedChannelLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedChannelLinkList::CTSLAssociatedChannelLinkList( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( (CTSLAssociatedChannelLinkList *)GetInstance(), &CTSLAssociatedChannelLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedChannelLinkList::CTSLAssociatedChannelLinkList( const CTSLAssociatedChannelLinkList &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( (CTSLAssociatedChannelLinkList *)GetInstance(), &CTSLAssociatedChannelLinkList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedChannelLinkList & CTSLAssociatedChannelLinkList::operator = ( const CTSLAssociatedChannelLinkList & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLAssociatedChannelLinkList::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline int CTSLAssociatedChannelLinkList::GetCount()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLAssociatedChannelLinkList@GetCount$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLAssociatedCursorList::CTSLAssociatedCursorList( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( (CTSLAssociatedCursorList *)GetInstance(), &CTSLAssociatedCursorList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedCursorList::CTSLAssociatedCursorList( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( (CTSLAssociatedCursorList *)GetInstance(), &CTSLAssociatedCursorList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedCursorList::CTSLAssociatedCursorList( CLPClassProperty *a_property, CTSLAssociatedCursorList ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Count( (CTSLAssociatedCursorList *)GetInstance(), &CTSLAssociatedCursorList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedCursorList::CTSLAssociatedCursorList( CLPClassProperty *a_property, CTSLAssociatedCursorList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAssociatedCursorList ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Count( (CTSLAssociatedCursorList *)GetInstance(), &CTSLAssociatedCursorList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedCursorList::CTSLAssociatedCursorList( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAssociatedCursorList ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Count( (CTSLAssociatedCursorList *)GetInstance(), &CTSLAssociatedCursorList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedCursorList::CTSLAssociatedCursorList( CLPBaseComponent *a_control, CTSLAssociatedCursorList ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Count( (CTSLAssociatedCursorList *)GetInstance(), &CTSLAssociatedCursorList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedCursorList::CTSLAssociatedCursorList( CLPBaseComponent *a_control, CTSLAssociatedCursorList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAssociatedCursorList ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Count( (CTSLAssociatedCursorList *)GetInstance(), &CTSLAssociatedCursorList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedCursorList::CTSLAssociatedCursorList( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( (CTSLAssociatedCursorList *)GetInstance(), &CTSLAssociatedCursorList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedCursorList::CTSLAssociatedCursorList( const CTSLAssociatedCursorList &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( (CTSLAssociatedCursorList *)GetInstance(), &CTSLAssociatedCursorList::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTSLAssociatedCursorList & CTSLAssociatedCursorList::operator = ( const CTSLAssociatedCursorList & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLAssociatedCursorList::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline int CTSLAssociatedCursorList::GetCount()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLAssociatedCursorList@GetCount$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLink::CTSLDisplayChannelLink( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  FirstChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetFirstChannelIndex, &CTSLDisplayChannelLink::SetFirstChannelIndex),
  SecondChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetSecondChannelIndex, &CTSLDisplayChannelLink::SetSecondChannelIndex),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  ChannelLinkMode( GetInstance(), _T( "ChannelLinkMode" ) ),
  IsDynamic( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLink::CTSLDisplayChannelLink( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  FirstChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetFirstChannelIndex, &CTSLDisplayChannelLink::SetFirstChannelIndex),
  SecondChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetSecondChannelIndex, &CTSLDisplayChannelLink::SetSecondChannelIndex),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  ChannelLinkMode( GetInstance(), _T( "ChannelLinkMode" ) ),
  IsDynamic( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLink::CTSLDisplayChannelLink( CLPClassProperty *a_property, CTSLDisplayChannelLink ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  FirstChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetFirstChannelIndex, &CTSLDisplayChannelLink::SetFirstChannelIndex),
  SecondChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetSecondChannelIndex, &CTSLDisplayChannelLink::SetSecondChannelIndex),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  ChannelLinkMode( GetInstance(), _T( "ChannelLinkMode" ) ),
  IsDynamic( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLink::CTSLDisplayChannelLink( CLPClassProperty *a_property, CTSLDisplayChannelLink ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannelLink ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  FirstChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetFirstChannelIndex, &CTSLDisplayChannelLink::SetFirstChannelIndex),
  SecondChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetSecondChannelIndex, &CTSLDisplayChannelLink::SetSecondChannelIndex),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  ChannelLinkMode( GetInstance(), _T( "ChannelLinkMode" ) ),
  IsDynamic( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLink::CTSLDisplayChannelLink( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayChannelLink ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  FirstChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetFirstChannelIndex, &CTSLDisplayChannelLink::SetFirstChannelIndex),
  SecondChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetSecondChannelIndex, &CTSLDisplayChannelLink::SetSecondChannelIndex),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  ChannelLinkMode( GetInstance(), _T( "ChannelLinkMode" ) ),
  IsDynamic( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLink::CTSLDisplayChannelLink( CLPBaseComponent *a_control, CTSLDisplayChannelLink ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  FirstChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetFirstChannelIndex, &CTSLDisplayChannelLink::SetFirstChannelIndex),
  SecondChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetSecondChannelIndex, &CTSLDisplayChannelLink::SetSecondChannelIndex),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  ChannelLinkMode( GetInstance(), _T( "ChannelLinkMode" ) ),
  IsDynamic( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLink::CTSLDisplayChannelLink( CLPBaseComponent *a_control, CTSLDisplayChannelLink ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannelLink ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  FirstChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetFirstChannelIndex, &CTSLDisplayChannelLink::SetFirstChannelIndex),
  SecondChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetSecondChannelIndex, &CTSLDisplayChannelLink::SetSecondChannelIndex),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  ChannelLinkMode( GetInstance(), _T( "ChannelLinkMode" ) ),
  IsDynamic( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLink::CTSLDisplayChannelLink( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  FirstChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetFirstChannelIndex, &CTSLDisplayChannelLink::SetFirstChannelIndex),
  SecondChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetSecondChannelIndex, &CTSLDisplayChannelLink::SetSecondChannelIndex),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  ChannelLinkMode( GetInstance(), _T( "ChannelLinkMode" ) ),
  IsDynamic( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLink::CTSLDisplayChannelLink( const CTSLDisplayChannelLink &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  FirstChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetFirstChannelIndex, &CTSLDisplayChannelLink::SetFirstChannelIndex),
  SecondChannelIndex( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetSecondChannelIndex, &CTSLDisplayChannelLink::SetSecondChannelIndex),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  ChannelLinkMode( GetInstance(), _T( "ChannelLinkMode" ) ),
  IsDynamic( (CTSLDisplayChannelLink *)GetInstance(), &CTSLDisplayChannelLink::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLink::~CTSLDisplayChannelLink()
{
  delete &Brush;
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLink & CTSLDisplayChannelLink::operator = ( const CTSLDisplayChannelLink & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayChannelLink::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline int CTSLDisplayChannelLink::GetSecondChannelIndex()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayChannelLink@GetSecondChannelIndex$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTSLDisplayChannelLink::SetSecondChannelIndex( int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayChannelLink@SetSecondChannelIndex$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTSLDisplayChannelLink::GetFirstChannelIndex()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayChannelLink@GetFirstChannelIndex$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTSLDisplayChannelLink::SetFirstChannelIndex( int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayChannelLink@SetFirstChannelIndex$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline bool CTSLDisplayChannelLink::GetVC_IsDynamic()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayChannelLink@GetVC_IsDynamic$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLDisplayCursor::CTSLDisplayCursor( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTSLDisplayCursorPosition( GetInstance(), _T( "Position" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Channels( *new CTSLDisplayCursorChannelLinks( GetInstance(), _T( "Channels" ))),
  Kind( GetInstance(), _T( "Kind" ) ),
  XAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetXAxisIndex, &CTSLDisplayCursor::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetYAxisIndex, &CTSLDisplayCursor::SetYAxisIndex),
  OnClick( GetInstance(), _T( "OnClick" ) ),
  OnMouseDown( GetInstance(), _T( "OnMouseDown" ) ),
  OnMouseUp( GetInstance(), _T( "OnMouseUp" ) ),
  CursorLinks( *new CTSLDisplayCursorLinkList( GetInstance(), ( CTSLDisplayCursorLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayCursor::GetVC_CursorLinks )),
  IsDynamic( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursor::CTSLDisplayCursor( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTSLDisplayCursorPosition( GetInstance(), _T( "Position" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Channels( *new CTSLDisplayCursorChannelLinks( GetInstance(), _T( "Channels" ))),
  Kind( GetInstance(), _T( "Kind" ) ),
  XAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetXAxisIndex, &CTSLDisplayCursor::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetYAxisIndex, &CTSLDisplayCursor::SetYAxisIndex),
  OnClick( GetInstance(), _T( "OnClick" ) ),
  OnMouseDown( GetInstance(), _T( "OnMouseDown" ) ),
  OnMouseUp( GetInstance(), _T( "OnMouseUp" ) ),
  CursorLinks( *new CTSLDisplayCursorLinkList( GetInstance(), ( CTSLDisplayCursorLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayCursor::GetVC_CursorLinks )),
  IsDynamic( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursor::CTSLDisplayCursor( CLPClassProperty *a_property, CTSLDisplayCursor ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Position( *new CTSLDisplayCursorPosition( GetInstance(), _T( "Position" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Channels( *new CTSLDisplayCursorChannelLinks( GetInstance(), _T( "Channels" ))),
  Kind( GetInstance(), _T( "Kind" ) ),
  XAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetXAxisIndex, &CTSLDisplayCursor::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetYAxisIndex, &CTSLDisplayCursor::SetYAxisIndex),
  OnClick( GetInstance(), _T( "OnClick" ) ),
  OnMouseDown( GetInstance(), _T( "OnMouseDown" ) ),
  OnMouseUp( GetInstance(), _T( "OnMouseUp" ) ),
  CursorLinks( *new CTSLDisplayCursorLinkList( GetInstance(), ( CTSLDisplayCursorLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayCursor::GetVC_CursorLinks )),
  IsDynamic( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursor::CTSLDisplayCursor( CLPClassProperty *a_property, CTSLDisplayCursor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursor ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Position( *new CTSLDisplayCursorPosition( GetInstance(), _T( "Position" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Channels( *new CTSLDisplayCursorChannelLinks( GetInstance(), _T( "Channels" ))),
  Kind( GetInstance(), _T( "Kind" ) ),
  XAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetXAxisIndex, &CTSLDisplayCursor::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetYAxisIndex, &CTSLDisplayCursor::SetYAxisIndex),
  OnClick( GetInstance(), _T( "OnClick" ) ),
  OnMouseDown( GetInstance(), _T( "OnMouseDown" ) ),
  OnMouseUp( GetInstance(), _T( "OnMouseUp" ) ),
  CursorLinks( *new CTSLDisplayCursorLinkList( GetInstance(), ( CTSLDisplayCursorLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayCursor::GetVC_CursorLinks )),
  IsDynamic( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursor::CTSLDisplayCursor( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursor ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Position( *new CTSLDisplayCursorPosition( GetInstance(), _T( "Position" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Channels( *new CTSLDisplayCursorChannelLinks( GetInstance(), _T( "Channels" ))),
  Kind( GetInstance(), _T( "Kind" ) ),
  XAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetXAxisIndex, &CTSLDisplayCursor::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetYAxisIndex, &CTSLDisplayCursor::SetYAxisIndex),
  OnClick( GetInstance(), _T( "OnClick" ) ),
  OnMouseDown( GetInstance(), _T( "OnMouseDown" ) ),
  OnMouseUp( GetInstance(), _T( "OnMouseUp" ) ),
  CursorLinks( *new CTSLDisplayCursorLinkList( GetInstance(), ( CTSLDisplayCursorLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayCursor::GetVC_CursorLinks )),
  IsDynamic( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursor::CTSLDisplayCursor( CLPBaseComponent *a_control, CTSLDisplayCursor ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Position( *new CTSLDisplayCursorPosition( GetInstance(), _T( "Position" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Channels( *new CTSLDisplayCursorChannelLinks( GetInstance(), _T( "Channels" ))),
  Kind( GetInstance(), _T( "Kind" ) ),
  XAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetXAxisIndex, &CTSLDisplayCursor::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetYAxisIndex, &CTSLDisplayCursor::SetYAxisIndex),
  OnClick( GetInstance(), _T( "OnClick" ) ),
  OnMouseDown( GetInstance(), _T( "OnMouseDown" ) ),
  OnMouseUp( GetInstance(), _T( "OnMouseUp" ) ),
  CursorLinks( *new CTSLDisplayCursorLinkList( GetInstance(), ( CTSLDisplayCursorLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayCursor::GetVC_CursorLinks )),
  IsDynamic( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursor::CTSLDisplayCursor( CLPBaseComponent *a_control, CTSLDisplayCursor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursor ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Position( *new CTSLDisplayCursorPosition( GetInstance(), _T( "Position" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Channels( *new CTSLDisplayCursorChannelLinks( GetInstance(), _T( "Channels" ))),
  Kind( GetInstance(), _T( "Kind" ) ),
  XAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetXAxisIndex, &CTSLDisplayCursor::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetYAxisIndex, &CTSLDisplayCursor::SetYAxisIndex),
  OnClick( GetInstance(), _T( "OnClick" ) ),
  OnMouseDown( GetInstance(), _T( "OnMouseDown" ) ),
  OnMouseUp( GetInstance(), _T( "OnMouseUp" ) ),
  CursorLinks( *new CTSLDisplayCursorLinkList( GetInstance(), ( CTSLDisplayCursorLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayCursor::GetVC_CursorLinks )),
  IsDynamic( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursor::CTSLDisplayCursor( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTSLDisplayCursorPosition( GetInstance(), _T( "Position" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Channels( *new CTSLDisplayCursorChannelLinks( GetInstance(), _T( "Channels" ))),
  Kind( GetInstance(), _T( "Kind" ) ),
  XAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetXAxisIndex, &CTSLDisplayCursor::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetYAxisIndex, &CTSLDisplayCursor::SetYAxisIndex),
  OnClick( GetInstance(), _T( "OnClick" ) ),
  OnMouseDown( GetInstance(), _T( "OnMouseDown" ) ),
  OnMouseUp( GetInstance(), _T( "OnMouseUp" ) ),
  CursorLinks( *new CTSLDisplayCursorLinkList( GetInstance(), ( CTSLDisplayCursorLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayCursor::GetVC_CursorLinks )),
  IsDynamic( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursor::CTSLDisplayCursor( const CTSLDisplayCursor &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTSLDisplayCursorPosition( GetInstance(), _T( "Position" ))),
  Color( GetInstance(), _T( "Color" ) ),
  Channels( *new CTSLDisplayCursorChannelLinks( GetInstance(), _T( "Channels" ))),
  Kind( GetInstance(), _T( "Kind" ) ),
  XAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetXAxisIndex, &CTSLDisplayCursor::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetYAxisIndex, &CTSLDisplayCursor::SetYAxisIndex),
  OnClick( GetInstance(), _T( "OnClick" ) ),
  OnMouseDown( GetInstance(), _T( "OnMouseDown" ) ),
  OnMouseUp( GetInstance(), _T( "OnMouseUp" ) ),
  CursorLinks( *new CTSLDisplayCursorLinkList( GetInstance(), ( CTSLDisplayCursorLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayCursor::GetVC_CursorLinks )),
  IsDynamic( (CTSLDisplayCursor *)GetInstance(), &CTSLDisplayCursor::GetVC_IsDynamic)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursor::~CTSLDisplayCursor()
{
  delete &Position;
  delete &Channels;
  delete &CursorLinks;
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursor & CTSLDisplayCursor::operator = ( const CTSLDisplayCursor & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayCursor::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline int CTSLDisplayCursor::GetYAxisIndex()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursor@GetYAxisIndex$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTSLDisplayCursor::SetYAxisIndex( int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursor@SetYAxisIndex$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTSLDisplayCursor::GetXAxisIndex()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursor@GetXAxisIndex$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTSLDisplayCursor::SetXAxisIndex( int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursor@SetXAxisIndex$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinkList CTSLDisplayCursor::GetVC_CursorLinks()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursor@GetVC_CursorLinks$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (CTSLDisplayCursorLinkList)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline bool CTSLDisplayCursor::GetVC_IsDynamic()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayCursor@GetVC_IsDynamic$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLScopeMeasurementLine::CTSLScopeMeasurementLine( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Style( GetInstance(), _T( "Style" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  MeasurementLabel( *new CTSLOptionalLabel( GetInstance(), _T( "MeasurementLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMeasurementLine::CTSLScopeMeasurementLine( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Style( GetInstance(), _T( "Style" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  MeasurementLabel( *new CTSLOptionalLabel( GetInstance(), _T( "MeasurementLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMeasurementLine::CTSLScopeMeasurementLine( CLPClassProperty *a_property, CTSLScopeMeasurementLine ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Style( GetInstance(), _T( "Style" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  MeasurementLabel( *new CTSLOptionalLabel( GetInstance(), _T( "MeasurementLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMeasurementLine::CTSLScopeMeasurementLine( CLPClassProperty *a_property, CTSLScopeMeasurementLine ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMeasurementLine ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Style( GetInstance(), _T( "Style" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  MeasurementLabel( *new CTSLOptionalLabel( GetInstance(), _T( "MeasurementLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMeasurementLine::CTSLScopeMeasurementLine( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeMeasurementLine ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Style( GetInstance(), _T( "Style" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  MeasurementLabel( *new CTSLOptionalLabel( GetInstance(), _T( "MeasurementLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMeasurementLine::CTSLScopeMeasurementLine( CLPBaseComponent *a_control, CTSLScopeMeasurementLine ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Style( GetInstance(), _T( "Style" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  MeasurementLabel( *new CTSLOptionalLabel( GetInstance(), _T( "MeasurementLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMeasurementLine::CTSLScopeMeasurementLine( CLPBaseComponent *a_control, CTSLScopeMeasurementLine ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMeasurementLine ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Style( GetInstance(), _T( "Style" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  MeasurementLabel( *new CTSLOptionalLabel( GetInstance(), _T( "MeasurementLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMeasurementLine::CTSLScopeMeasurementLine( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Style( GetInstance(), _T( "Style" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  MeasurementLabel( *new CTSLOptionalLabel( GetInstance(), _T( "MeasurementLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMeasurementLine::CTSLScopeMeasurementLine( const CTSLScopeMeasurementLine &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( GetInstance(), _T( "X" ) ),
  Y( GetInstance(), _T( "Y" ) ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Style( GetInstance(), _T( "Style" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  MeasurementLabel( *new CTSLOptionalLabel( GetInstance(), _T( "MeasurementLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMeasurementLine::~CTSLScopeMeasurementLine()
{
  delete &MeasurementLabel;
}
//------------------------------------------------------------------------------
inline CTSLScopeMeasurementLine & CTSLScopeMeasurementLine::operator = ( const CTSLScopeMeasurementLine & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeMeasurementLine::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLAxisFormat::CTSLAxisFormat( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  PrecisionMode( GetInstance(), _T( "PrecisionMode" ) ),
  Precision( GetInstance(), _T( "Precision" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLAxisFormat::CTSLAxisFormat( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  PrecisionMode( GetInstance(), _T( "PrecisionMode" ) ),
  Precision( GetInstance(), _T( "Precision" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLAxisFormat::CTSLAxisFormat( CLPClassProperty *a_property, CTSLAxisFormat ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  PrecisionMode( GetInstance(), _T( "PrecisionMode" ) ),
  Precision( GetInstance(), _T( "Precision" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLAxisFormat::CTSLAxisFormat( CLPClassProperty *a_property, CTSLAxisFormat ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisFormat ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  PrecisionMode( GetInstance(), _T( "PrecisionMode" ) ),
  Precision( GetInstance(), _T( "Precision" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLAxisFormat::CTSLAxisFormat( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAxisFormat ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  PrecisionMode( GetInstance(), _T( "PrecisionMode" ) ),
  Precision( GetInstance(), _T( "Precision" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLAxisFormat::CTSLAxisFormat( CLPBaseComponent *a_control, CTSLAxisFormat ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  PrecisionMode( GetInstance(), _T( "PrecisionMode" ) ),
  Precision( GetInstance(), _T( "Precision" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLAxisFormat::CTSLAxisFormat( CLPBaseComponent *a_control, CTSLAxisFormat ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisFormat ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  PrecisionMode( GetInstance(), _T( "PrecisionMode" ) ),
  Precision( GetInstance(), _T( "Precision" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLAxisFormat::CTSLAxisFormat( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  PrecisionMode( GetInstance(), _T( "PrecisionMode" ) ),
  Precision( GetInstance(), _T( "Precision" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLAxisFormat::CTSLAxisFormat( const CTSLAxisFormat &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  PrecisionMode( GetInstance(), _T( "PrecisionMode" ) ),
  Precision( GetInstance(), _T( "Precision" ) ),
  FixedPrecision( GetInstance(), _T( "FixedPrecision" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLAxisFormat & CTSLAxisFormat::operator = ( const CTSLAxisFormat & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLAxisFormat::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeSelection::CTSLScopeSelection( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeSelection::CTSLScopeSelection( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeSelection::CTSLScopeSelection( CLPClassProperty *a_property, CTSLScopeSelection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeSelection::CTSLScopeSelection( CLPClassProperty *a_property, CTSLScopeSelection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeSelection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeSelection::CTSLScopeSelection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeSelection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeSelection::CTSLScopeSelection( CLPBaseComponent *a_control, CTSLScopeSelection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeSelection::CTSLScopeSelection( CLPBaseComponent *a_control, CTSLScopeSelection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeSelection ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeSelection::CTSLScopeSelection( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeSelection::CTSLScopeSelection( const CTSLScopeSelection &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeSelection::~CTSLScopeSelection()
{
  delete &Brush;
}
//------------------------------------------------------------------------------
inline CTSLScopeSelection & CTSLScopeSelection::operator = ( const CTSLScopeSelection & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeSelection::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinks::CTSLDisplayCursorLinks( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinks::CTSLDisplayCursorLinks( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinks::CTSLDisplayCursorLinks( CLPClassProperty *a_property, CTSLDisplayCursorLinks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinks::CTSLDisplayCursorLinks( CLPClassProperty *a_property, CTSLDisplayCursorLinks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLinks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinks::CTSLDisplayCursorLinks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLinks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinks::CTSLDisplayCursorLinks( CLPBaseComponent *a_control, CTSLDisplayCursorLinks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinks::CTSLDisplayCursorLinks( CLPBaseComponent *a_control, CTSLDisplayCursorLinks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLinks ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinks::CTSLDisplayCursorLinks( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinks::CTSLDisplayCursorLinks( const CTSLDisplayCursorLinks &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursorLinks & CTSLDisplayCursorLinks::operator = ( const CTSLDisplayCursorLinks & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayCursorLinks::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLinks::CTSLDisplayChannelLinks( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLinks::CTSLDisplayChannelLinks( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLinks::CTSLDisplayChannelLinks( CLPClassProperty *a_property, CTSLDisplayChannelLinks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLinks::CTSLDisplayChannelLinks( CLPClassProperty *a_property, CTSLDisplayChannelLinks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannelLinks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLinks::CTSLDisplayChannelLinks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayChannelLinks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLinks::CTSLDisplayChannelLinks( CLPBaseComponent *a_control, CTSLDisplayChannelLinks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLinks::CTSLDisplayChannelLinks( CLPBaseComponent *a_control, CTSLDisplayChannelLinks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannelLinks ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLinks::CTSLDisplayChannelLinks( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLinks::CTSLDisplayChannelLinks( const CTSLDisplayChannelLinks &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannelLinks & CTSLDisplayChannelLinks::operator = ( const CTSLDisplayChannelLinks & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayChannelLinks::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursors::CTSLDisplayCursors( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursors::CTSLDisplayCursors( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursors::CTSLDisplayCursors( CLPClassProperty *a_property, CTSLDisplayCursors ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursors::CTSLDisplayCursors( CLPClassProperty *a_property, CTSLDisplayCursors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursors ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursors::CTSLDisplayCursors( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursors ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursors::CTSLDisplayCursors( CLPBaseComponent *a_control, CTSLDisplayCursors ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursors::CTSLDisplayCursors( CLPBaseComponent *a_control, CTSLDisplayCursors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursors ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursors::CTSLDisplayCursors( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursors::CTSLDisplayCursors( const CTSLDisplayCursors &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnPositionChange( GetInstance(), _T( "OnPositionChange" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayCursors & CTSLDisplayCursors::operator = ( const CTSLDisplayCursors & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayCursors::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannel::CTSLDisplayChannel( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  XAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetXAxisIndex, &CTSLDisplayChannel::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetYAxisIndex, &CTSLDisplayChannel::SetYAxisIndex),
  Color( GetInstance(), _T( "Color" ) ),
  Width( GetInstance(), _T( "Width" ) ),
  Points( *new CTSLScopePoints( GetInstance(), _T( "Points" ))),
  ChannelMode( GetInstance(), _T( "ChannelMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannel::CTSLDisplayChannel( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  XAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetXAxisIndex, &CTSLDisplayChannel::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetYAxisIndex, &CTSLDisplayChannel::SetYAxisIndex),
  Color( GetInstance(), _T( "Color" ) ),
  Width( GetInstance(), _T( "Width" ) ),
  Points( *new CTSLScopePoints( GetInstance(), _T( "Points" ))),
  ChannelMode( GetInstance(), _T( "ChannelMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannel::CTSLDisplayChannel( CLPClassProperty *a_property, CTSLDisplayChannel ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  XAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetXAxisIndex, &CTSLDisplayChannel::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetYAxisIndex, &CTSLDisplayChannel::SetYAxisIndex),
  Color( GetInstance(), _T( "Color" ) ),
  Width( GetInstance(), _T( "Width" ) ),
  Points( *new CTSLScopePoints( GetInstance(), _T( "Points" ))),
  ChannelMode( GetInstance(), _T( "ChannelMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannel::CTSLDisplayChannel( CLPClassProperty *a_property, CTSLDisplayChannel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannel ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  XAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetXAxisIndex, &CTSLDisplayChannel::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetYAxisIndex, &CTSLDisplayChannel::SetYAxisIndex),
  Color( GetInstance(), _T( "Color" ) ),
  Width( GetInstance(), _T( "Width" ) ),
  Points( *new CTSLScopePoints( GetInstance(), _T( "Points" ))),
  ChannelMode( GetInstance(), _T( "ChannelMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannel::CTSLDisplayChannel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayChannel ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  XAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetXAxisIndex, &CTSLDisplayChannel::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetYAxisIndex, &CTSLDisplayChannel::SetYAxisIndex),
  Color( GetInstance(), _T( "Color" ) ),
  Width( GetInstance(), _T( "Width" ) ),
  Points( *new CTSLScopePoints( GetInstance(), _T( "Points" ))),
  ChannelMode( GetInstance(), _T( "ChannelMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannel::CTSLDisplayChannel( CLPBaseComponent *a_control, CTSLDisplayChannel ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  XAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetXAxisIndex, &CTSLDisplayChannel::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetYAxisIndex, &CTSLDisplayChannel::SetYAxisIndex),
  Color( GetInstance(), _T( "Color" ) ),
  Width( GetInstance(), _T( "Width" ) ),
  Points( *new CTSLScopePoints( GetInstance(), _T( "Points" ))),
  ChannelMode( GetInstance(), _T( "ChannelMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannel::CTSLDisplayChannel( CLPBaseComponent *a_control, CTSLDisplayChannel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannel ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  XAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetXAxisIndex, &CTSLDisplayChannel::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetYAxisIndex, &CTSLDisplayChannel::SetYAxisIndex),
  Color( GetInstance(), _T( "Color" ) ),
  Width( GetInstance(), _T( "Width" ) ),
  Points( *new CTSLScopePoints( GetInstance(), _T( "Points" ))),
  ChannelMode( GetInstance(), _T( "ChannelMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannel::CTSLDisplayChannel( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  XAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetXAxisIndex, &CTSLDisplayChannel::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetYAxisIndex, &CTSLDisplayChannel::SetYAxisIndex),
  Color( GetInstance(), _T( "Color" ) ),
  Width( GetInstance(), _T( "Width" ) ),
  Points( *new CTSLScopePoints( GetInstance(), _T( "Points" ))),
  ChannelMode( GetInstance(), _T( "ChannelMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannel::CTSLDisplayChannel( const CTSLDisplayChannel &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  XAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetXAxisIndex, &CTSLDisplayChannel::SetXAxisIndex),
  YAxisIndex( (CTSLDisplayChannel *)GetInstance(), &CTSLDisplayChannel::GetYAxisIndex, &CTSLDisplayChannel::SetYAxisIndex),
  Color( GetInstance(), _T( "Color" ) ),
  Width( GetInstance(), _T( "Width" ) ),
  Points( *new CTSLScopePoints( GetInstance(), _T( "Points" ))),
  ChannelMode( GetInstance(), _T( "ChannelMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannel::~CTSLDisplayChannel()
{
  delete &Points;
}
//------------------------------------------------------------------------------
inline CTSLDisplayChannel & CTSLDisplayChannel::operator = ( const CTSLDisplayChannel & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayChannel::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline int CTSLDisplayChannel::GetYAxisIndex()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayChannel@GetYAxisIndex$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTSLDisplayChannel::SetYAxisIndex( int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayChannel@SetYAxisIndex$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTSLDisplayChannel::GetXAxisIndex()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayChannel@GetXAxisIndex$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTSLDisplayChannel::SetXAxisIndex( int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayChannel@SetXAxisIndex$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayChannels<_TMP_TYPE_>::CTSLDisplayChannels( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayChannels<_TMP_TYPE_>::CTSLDisplayChannels( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayChannels<_TMP_TYPE_>::CTSLDisplayChannels( CLPClassProperty *a_property, CTSLDisplayChannels ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayChannels<_TMP_TYPE_>::CTSLDisplayChannels( CLPClassProperty *a_property, CTSLDisplayChannels ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannels ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayChannels<_TMP_TYPE_>::CTSLDisplayChannels( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayChannels ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayChannels<_TMP_TYPE_>::CTSLDisplayChannels( CLPBaseComponent *a_control, CTSLDisplayChannels ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayChannels<_TMP_TYPE_>::CTSLDisplayChannels( CLPBaseComponent *a_control, CTSLDisplayChannels ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannels ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayChannels<_TMP_TYPE_>::CTSLDisplayChannels( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayChannels<_TMP_TYPE_>::CTSLDisplayChannels( const CTSLDisplayChannels &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTSLDisplayChannels<_TMP_TYPE_> & CTSLDisplayChannels<_TMP_TYPE_>::operator = ( const CTSLDisplayChannels & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> VCLHANDLE CTSLDisplayChannels<_TMP_TYPE_>::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopePoints::CTSLScopePoints( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopePoints::CTSLScopePoints( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopePoints::CTSLScopePoints( CLPClassProperty *a_property, CTSLScopePoints ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopePoints::CTSLScopePoints( CLPClassProperty *a_property, CTSLScopePoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopePoints ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopePoints::CTSLScopePoints( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopePoints ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopePoints::CTSLScopePoints( CLPBaseComponent *a_control, CTSLScopePoints ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopePoints::CTSLScopePoints( CLPBaseComponent *a_control, CTSLScopePoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopePoints ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopePoints::CTSLScopePoints( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopePoints::CTSLScopePoints( const CTSLScopePoints &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  Shape( GetInstance(), _T( "Shape" ) ),
  Size( GetInstance(), _T( "Size" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  Brush( *new CTSLDisplayBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopePoints::~CTSLScopePoints()
{
  delete &Brush;
  delete &Pen;
}
//------------------------------------------------------------------------------
inline CTSLScopePoints & CTSLScopePoints::operator = ( const CTSLScopePoints & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopePoints::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLChannelData::CTSLChannelData( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SampleRate( (CTSLChannelData *)GetInstance(), &CTSLChannelData::GetSampleRate, &CTSLChannelData::SetSampleRate)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelData::CTSLChannelData( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SampleRate( (CTSLChannelData *)GetInstance(), &CTSLChannelData::GetSampleRate, &CTSLChannelData::SetSampleRate)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelData::CTSLChannelData( CLPClassProperty *a_property, CTSLChannelData ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  SampleRate( (CTSLChannelData *)GetInstance(), &CTSLChannelData::GetSampleRate, &CTSLChannelData::SetSampleRate)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelData::CTSLChannelData( CLPClassProperty *a_property, CTSLChannelData ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelData ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  SampleRate( (CTSLChannelData *)GetInstance(), &CTSLChannelData::GetSampleRate, &CTSLChannelData::SetSampleRate)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelData::CTSLChannelData( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLChannelData ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  SampleRate( (CTSLChannelData *)GetInstance(), &CTSLChannelData::GetSampleRate, &CTSLChannelData::SetSampleRate)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelData::CTSLChannelData( CLPBaseComponent *a_control, CTSLChannelData ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  SampleRate( (CTSLChannelData *)GetInstance(), &CTSLChannelData::GetSampleRate, &CTSLChannelData::SetSampleRate)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelData::CTSLChannelData( CLPBaseComponent *a_control, CTSLChannelData ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelData ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  SampleRate( (CTSLChannelData *)GetInstance(), &CTSLChannelData::GetSampleRate, &CTSLChannelData::SetSampleRate)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelData::CTSLChannelData( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SampleRate( (CTSLChannelData *)GetInstance(), &CTSLChannelData::GetSampleRate, &CTSLChannelData::SetSampleRate)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelData::CTSLChannelData( const CTSLChannelData &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SampleRate( (CTSLChannelData *)GetInstance(), &CTSLChannelData::GetSampleRate, &CTSLChannelData::SetSampleRate)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelData & CTSLChannelData::operator = ( const CTSLChannelData & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLChannelData::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetYData( const unsigned short * ABufer, unsigned int ASize )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetYData$qqrpusui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const unsigned short * __1_Param1 = ABufer;
    unsigned int __1_Param2 = ASize;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetYData( const short * ABufer, unsigned int ASize )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetYData$qqrpdui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const short * __1_Param1 = ABufer;
    unsigned int __1_Param2 = ASize;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetYData( const unsigned int * ABufer, unsigned int ASize )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetYData$qqrpdui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const unsigned int * __1_Param1 = ABufer;
    unsigned int __1_Param2 = ASize;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetYData( const int * ABufer, unsigned int ASize )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetYData$qqrpiui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const int * __1_Param1 = ABufer;
    unsigned int __1_Param2 = ASize;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetYData( const float * ABufer, unsigned int ASize )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetYData$qqrpfui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const float * __1_Param1 = ABufer;
    unsigned int __1_Param2 = ASize;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetYData( const double * ABufer, unsigned int ASize )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetYData$qqrpdui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const double * __1_Param1 = ABufer;
    unsigned int __1_Param2 = ASize;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetXYData( const unsigned short * XBufer, const unsigned short * YBufer, unsigned int ASize )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetXYData$qqrpust1ui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const unsigned short * __1_Param1 = XBufer;
    const unsigned short * __1_Param2 = YBufer;
    unsigned int __1_Param3 = ASize;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetXYData( const short * XBufer, const short * YBufer, unsigned int ASize )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetXYData$qqrpdt1ui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const short * __1_Param1 = XBufer;
    const short * __1_Param2 = YBufer;
    unsigned int __1_Param3 = ASize;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetXYData( const unsigned int * XBufer, const unsigned int * YBufer, unsigned int ASize )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetXYData$qqrpdt1ui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const unsigned int * __1_Param1 = XBufer;
    const unsigned int * __1_Param2 = YBufer;
    unsigned int __1_Param3 = ASize;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetXYData( const int * XBufer, const int * YBufer, unsigned int ASize )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetXYData$qqrpit1ui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const int * __1_Param1 = XBufer;
    const int * __1_Param2 = YBufer;
    unsigned int __1_Param3 = ASize;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetXYData( const float * XBufer, const float * YBufer, unsigned int ASize )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetXYData$qqrpft1ui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const float * __1_Param1 = XBufer;
    const float * __1_Param2 = YBufer;
    unsigned int __1_Param3 = ASize;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetXYData( const double * XBufer, const double * YBufer, unsigned int ASize )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetXYData$qqrpdt1ui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const double * __1_Param1 = XBufer;
    const double * __1_Param2 = YBufer;
    unsigned int __1_Param3 = ASize;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddYData( const unsigned short * ABufer, int ASize, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddYData$qqrpusuio" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const unsigned short * __1_Param1 = ABufer;
    int __1_Param2 = ASize;
    int __1_Param3 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddYData( const short * ABufer, unsigned int ASize, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddYData$qqrpdui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const short * __1_Param1 = ABufer;
    unsigned int __1_Param2 = ASize;
    int __1_Param3 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddYData( const unsigned int * ABufer, unsigned int ASize, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddYData$qqrpdui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const unsigned int * __1_Param1 = ABufer;
    unsigned int __1_Param2 = ASize;
    int __1_Param3 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddYData( const int * ABufer, unsigned int ASize, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddYData$qqrpiuio" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const int * __1_Param1 = ABufer;
    unsigned int __1_Param2 = ASize;
    int __1_Param3 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddYData( const float * ABufer, unsigned int ASize, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddYData$qqrpfuio" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const float * __1_Param1 = ABufer;
    unsigned int __1_Param2 = ASize;
    int __1_Param3 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddYData( const double * ABufer, unsigned int ASize, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddYData$qqrpduio" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const double * __1_Param1 = ABufer;
    unsigned int __1_Param2 = ASize;
    int __1_Param3 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddXYData( const unsigned short * XBufer, const unsigned short * YBufer, unsigned int ASize, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddXYData$qqrpust1uio" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const unsigned short * __1_Param1 = XBufer;
    const unsigned short * __1_Param2 = YBufer;
    unsigned int __1_Param3 = ASize;
    int __1_Param4 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      push __1_Param4
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddXYData( const short * XBufer, const short * YBufer, unsigned int ASize, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddXYData$qqrpdt1ui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const short * __1_Param1 = XBufer;
    const short * __1_Param2 = YBufer;
    unsigned int __1_Param3 = ASize;
    int __1_Param4 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      push __1_Param4
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddXYData( const unsigned int * XBufer, const unsigned int * YBufer, unsigned int ASize, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddXYData$qqrpdt1ui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const unsigned int * __1_Param1 = XBufer;
    const unsigned int * __1_Param2 = YBufer;
    unsigned int __1_Param3 = ASize;
    int __1_Param4 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      push __1_Param4
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddXYData( const int * XBufer, const int * YBufer, unsigned int ASize, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddXYData$qqrpit1uio" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const int * __1_Param1 = XBufer;
    const int * __1_Param2 = YBufer;
    unsigned int __1_Param3 = ASize;
    int __1_Param4 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      push __1_Param4
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddXYData( const float * XBufer, const float * YBufer, unsigned int ASize, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddXYData$qqrpft1uio" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const float * __1_Param1 = XBufer;
    const float * __1_Param2 = YBufer;
    unsigned int __1_Param3 = ASize;
    int __1_Param4 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      push __1_Param4
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddXYData( const double * XBufer, const double * YBufer, unsigned int ASize, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddXYData$qqrpdt1uio" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    const double * __1_Param1 = XBufer;
    const double * __1_Param2 = YBufer;
    unsigned int __1_Param3 = ASize;
    int __1_Param4 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      push __1_Param4
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::Clear()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@Clear$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddYPoint( double AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddYPoint$qqrd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddYPoint( double AValue, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddYPoint$qqrdo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;
    unsigned char __1_Param2 = (unsigned char)ASeparate;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  dl,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddXYPoint( double XValue, double YValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddXYPoint$qqrdd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = XValue;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = YValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::AddXYPoint( double XValue, double YValue, bool ASeparate )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@AddXYPoint$qqrddo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = XValue;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = YValue;
    int __1_Param3 = (int)ASeparate;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  edx,__1_Param3
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTSLChannelData::GetSize()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@GetSize$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTSLChannelData::GetXData( double * ABuffer )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@GetXData$qqrpd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    double * __1_Param1 = ABuffer;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::GetYData( double * ABuffer )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@GetYData$qqrpd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    double * __1_Param1 = ABuffer;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::GetXYData( double * XBuffer, double * YBuffer )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@GetXYData$qqrpdt1" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    double * __1_Param1 = XBuffer;
    double * __1_Param2 = YBuffer;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTSLChannelData::GetDrawSize()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@GetDrawSize$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTSLChannelData::GetDrawXData( double * ABuffer )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@GetDrawXData$qqrpd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    double * __1_Param1 = ABuffer;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::GetDrawYData( double * ABuffer )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@GetDrawYData$qqrpd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    double * __1_Param1 = ABuffer;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLChannelData::GetDrawXYData( double * XBuffer, double * YBuffer )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@GetDrawXYData$qqrpdt1" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    double * __1_Param1 = XBuffer;
    double * __1_Param2 = YBuffer;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline double CTSLChannelData::GetSampleRate()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@GetSampleRate$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline void CTSLChannelData::SetSampleRate( double AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLChannelData@SetSampleRate$qqrd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLScopeChannel::CTSLScopeChannel( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ShadeMode( GetInstance(), _T( "ShadeMode" ) ),
  Markers( *new CTSLScopeChannelMarkers( GetInstance(), _T( "Markers" ))),
  OnSampleDraw( GetInstance(), _T( "OnSampleDraw" ) ),
  OnChannelDraw( GetInstance(), _T( "OnChannelDraw" ) ),
  DrawMarkers( *new CTSLScopeChannelMarkers( GetInstance(), ( CTSLScopeChannelMarkers ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_DrawMarkers, ( void ( CLPBaseClass::* )( CTSLScopeChannelMarkers ) ) &::CTSLScopeChannel::SetDrawMarkers )),
  Data( *new CTSLChannelData( GetInstance(), ( CTSLChannelData ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_Data ))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannel::CTSLScopeChannel( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ShadeMode( GetInstance(), _T( "ShadeMode" ) ),
  Markers( *new CTSLScopeChannelMarkers( GetInstance(), _T( "Markers" ))),
  OnSampleDraw( GetInstance(), _T( "OnSampleDraw" ) ),
  OnChannelDraw( GetInstance(), _T( "OnChannelDraw" ) ),
  DrawMarkers( *new CTSLScopeChannelMarkers( GetInstance(), ( CTSLScopeChannelMarkers ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_DrawMarkers, ( void ( CLPBaseClass::* )( CTSLScopeChannelMarkers ) ) &::CTSLScopeChannel::SetDrawMarkers )),
  Data( *new CTSLChannelData( GetInstance(), ( CTSLChannelData ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_Data ))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannel::CTSLScopeChannel( CLPClassProperty *a_property, CTSLScopeChannel ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  ShadeMode( GetInstance(), _T( "ShadeMode" ) ),
  Markers( *new CTSLScopeChannelMarkers( GetInstance(), _T( "Markers" ))),
  OnSampleDraw( GetInstance(), _T( "OnSampleDraw" ) ),
  OnChannelDraw( GetInstance(), _T( "OnChannelDraw" ) ),
  DrawMarkers( *new CTSLScopeChannelMarkers( GetInstance(), ( CTSLScopeChannelMarkers ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_DrawMarkers, ( void ( CLPBaseClass::* )( CTSLScopeChannelMarkers ) ) &::CTSLScopeChannel::SetDrawMarkers )),
  Data( *new CTSLChannelData( GetInstance(), ( CTSLChannelData ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_Data ))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannel::CTSLScopeChannel( CLPClassProperty *a_property, CTSLScopeChannel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannel ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  ShadeMode( GetInstance(), _T( "ShadeMode" ) ),
  Markers( *new CTSLScopeChannelMarkers( GetInstance(), _T( "Markers" ))),
  OnSampleDraw( GetInstance(), _T( "OnSampleDraw" ) ),
  OnChannelDraw( GetInstance(), _T( "OnChannelDraw" ) ),
  DrawMarkers( *new CTSLScopeChannelMarkers( GetInstance(), ( CTSLScopeChannelMarkers ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_DrawMarkers, ( void ( CLPBaseClass::* )( CTSLScopeChannelMarkers ) ) &::CTSLScopeChannel::SetDrawMarkers )),
  Data( *new CTSLChannelData( GetInstance(), ( CTSLChannelData ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_Data ))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannel::CTSLScopeChannel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeChannel ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  ShadeMode( GetInstance(), _T( "ShadeMode" ) ),
  Markers( *new CTSLScopeChannelMarkers( GetInstance(), _T( "Markers" ))),
  OnSampleDraw( GetInstance(), _T( "OnSampleDraw" ) ),
  OnChannelDraw( GetInstance(), _T( "OnChannelDraw" ) ),
  DrawMarkers( *new CTSLScopeChannelMarkers( GetInstance(), ( CTSLScopeChannelMarkers ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_DrawMarkers, ( void ( CLPBaseClass::* )( CTSLScopeChannelMarkers ) ) &::CTSLScopeChannel::SetDrawMarkers )),
  Data( *new CTSLChannelData( GetInstance(), ( CTSLChannelData ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_Data ))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannel::CTSLScopeChannel( CLPBaseComponent *a_control, CTSLScopeChannel ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  ShadeMode( GetInstance(), _T( "ShadeMode" ) ),
  Markers( *new CTSLScopeChannelMarkers( GetInstance(), _T( "Markers" ))),
  OnSampleDraw( GetInstance(), _T( "OnSampleDraw" ) ),
  OnChannelDraw( GetInstance(), _T( "OnChannelDraw" ) ),
  DrawMarkers( *new CTSLScopeChannelMarkers( GetInstance(), ( CTSLScopeChannelMarkers ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_DrawMarkers, ( void ( CLPBaseClass::* )( CTSLScopeChannelMarkers ) ) &::CTSLScopeChannel::SetDrawMarkers )),
  Data( *new CTSLChannelData( GetInstance(), ( CTSLChannelData ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_Data ))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannel::CTSLScopeChannel( CLPBaseComponent *a_control, CTSLScopeChannel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannel ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  ShadeMode( GetInstance(), _T( "ShadeMode" ) ),
  Markers( *new CTSLScopeChannelMarkers( GetInstance(), _T( "Markers" ))),
  OnSampleDraw( GetInstance(), _T( "OnSampleDraw" ) ),
  OnChannelDraw( GetInstance(), _T( "OnChannelDraw" ) ),
  DrawMarkers( *new CTSLScopeChannelMarkers( GetInstance(), ( CTSLScopeChannelMarkers ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_DrawMarkers, ( void ( CLPBaseClass::* )( CTSLScopeChannelMarkers ) ) &::CTSLScopeChannel::SetDrawMarkers )),
  Data( *new CTSLChannelData( GetInstance(), ( CTSLChannelData ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_Data ))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannel::CTSLScopeChannel( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ShadeMode( GetInstance(), _T( "ShadeMode" ) ),
  Markers( *new CTSLScopeChannelMarkers( GetInstance(), _T( "Markers" ))),
  OnSampleDraw( GetInstance(), _T( "OnSampleDraw" ) ),
  OnChannelDraw( GetInstance(), _T( "OnChannelDraw" ) ),
  DrawMarkers( *new CTSLScopeChannelMarkers( GetInstance(), ( CTSLScopeChannelMarkers ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_DrawMarkers, ( void ( CLPBaseClass::* )( CTSLScopeChannelMarkers ) ) &::CTSLScopeChannel::SetDrawMarkers )),
  Data( *new CTSLChannelData( GetInstance(), ( CTSLChannelData ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_Data ))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannel::CTSLScopeChannel( const CTSLScopeChannel &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ShadeMode( GetInstance(), _T( "ShadeMode" ) ),
  Markers( *new CTSLScopeChannelMarkers( GetInstance(), _T( "Markers" ))),
  OnSampleDraw( GetInstance(), _T( "OnSampleDraw" ) ),
  OnChannelDraw( GetInstance(), _T( "OnChannelDraw" ) ),
  DrawMarkers( *new CTSLScopeChannelMarkers( GetInstance(), ( CTSLScopeChannelMarkers ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_DrawMarkers, ( void ( CLPBaseClass::* )( CTSLScopeChannelMarkers ) ) &::CTSLScopeChannel::SetDrawMarkers )),
  Data( *new CTSLChannelData( GetInstance(), ( CTSLChannelData ( CLPBaseClass::* )() ) &::CTSLScopeChannel::GetVC_Data ))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannel::~CTSLScopeChannel()
{
  delete &Markers;
  delete &DrawMarkers;
  delete &Data;
}
//------------------------------------------------------------------------------
inline CTSLScopeChannel & CTSLScopeChannel::operator = ( const CTSLScopeChannel & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeChannel::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTSLScopeChannel::SetDrawMarkers( CTSLScopeChannelMarkers AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLScopeChannel@SetDrawMarkers$qqrp30Slscope@TSLScopeChannelMarkers" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    VCLHANDLE __1_Param1 = AValue.GetInternalHandle();

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline CTSLScopeChannelMarkers CTSLScopeChannel::GetVC_DrawMarkers()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLScopeChannel@GetVC_DrawMarkers$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (CTSLScopeChannelMarkers)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline CTSLChannelData CTSLScopeChannel::GetVC_Data()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLScopeChannel@GetVC_Data$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (CTSLChannelData)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLDisplayComponent::CTSLDisplayComponent( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayComponent::CTSLDisplayComponent( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayComponent::CTSLDisplayComponent( CLPClassProperty *a_property, CTSLDisplayComponent ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayComponent::CTSLDisplayComponent( CLPClassProperty *a_property, CTSLDisplayComponent ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayComponent ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayComponent::CTSLDisplayComponent( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayComponent ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayComponent::CTSLDisplayComponent( CLPBaseComponent *a_control, CTSLDisplayComponent ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayComponent::CTSLDisplayComponent( CLPBaseComponent *a_control, CTSLDisplayComponent ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayComponent ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayComponent::CTSLDisplayComponent( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayComponent::CTSLDisplayComponent( const CTSLDisplayComponent &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayComponent & CTSLDisplayComponent::operator = ( const CTSLDisplayComponent & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayComponent::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayView::CTSLDisplayView( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Height( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetHeightProp),
  Width( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetWidthProp),
  Top( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetTopProp),
  Left( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetLeftProp)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayView::CTSLDisplayView( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Height( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetHeightProp),
  Width( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetWidthProp),
  Top( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetTopProp),
  Left( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetLeftProp)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayView::CTSLDisplayView( CLPClassProperty *a_property, CTSLDisplayView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Height( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetHeightProp),
  Width( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetWidthProp),
  Top( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetTopProp),
  Left( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetLeftProp)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayView::CTSLDisplayView( CLPClassProperty *a_property, CTSLDisplayView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Height( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetHeightProp),
  Width( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetWidthProp),
  Top( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetTopProp),
  Left( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetLeftProp)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayView::CTSLDisplayView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Height( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetHeightProp),
  Width( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetWidthProp),
  Top( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetTopProp),
  Left( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetLeftProp)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayView::CTSLDisplayView( CLPBaseComponent *a_control, CTSLDisplayView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Height( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetHeightProp),
  Width( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetWidthProp),
  Top( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetTopProp),
  Left( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetLeftProp)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayView::CTSLDisplayView( CLPBaseComponent *a_control, CTSLDisplayView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayView ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Height( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetHeightProp),
  Width( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetWidthProp),
  Top( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetTopProp),
  Left( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetLeftProp)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayView::CTSLDisplayView( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Height( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetHeightProp),
  Width( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetWidthProp),
  Top( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetTopProp),
  Left( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetLeftProp)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayView::CTSLDisplayView( const CTSLDisplayView &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Height( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetHeightProp),
  Width( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetWidthProp),
  Top( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetTopProp),
  Left( (CTSLDisplayView *)GetInstance(), &CTSLDisplayView::GetLeftProp)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayView & CTSLDisplayView::operator = ( const CTSLDisplayView & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayView::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline int CTSLDisplayView::GetHeightProp()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayView@GetHeightProp$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline int CTSLDisplayView::GetWidthProp()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayView@GetWidthProp$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline int CTSLDisplayView::GetTopProp()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayView@GetTopProp$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline int CTSLDisplayView::GetLeftProp()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayView@GetLeftProp$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLDisplayViewBackground::CTSLDisplayViewBackground( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  UseControlColor( GetInstance(), _T( "UseControlColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewBackground::CTSLDisplayViewBackground( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  UseControlColor( GetInstance(), _T( "UseControlColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewBackground::CTSLDisplayViewBackground( CLPClassProperty *a_property, CTSLDisplayViewBackground ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  UseControlColor( GetInstance(), _T( "UseControlColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewBackground::CTSLDisplayViewBackground( CLPClassProperty *a_property, CTSLDisplayViewBackground ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayViewBackground ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  UseControlColor( GetInstance(), _T( "UseControlColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewBackground::CTSLDisplayViewBackground( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayViewBackground ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  UseControlColor( GetInstance(), _T( "UseControlColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewBackground::CTSLDisplayViewBackground( CLPBaseComponent *a_control, CTSLDisplayViewBackground ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  UseControlColor( GetInstance(), _T( "UseControlColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewBackground::CTSLDisplayViewBackground( CLPBaseComponent *a_control, CTSLDisplayViewBackground ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayViewBackground ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  UseControlColor( GetInstance(), _T( "UseControlColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewBackground::CTSLDisplayViewBackground( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  UseControlColor( GetInstance(), _T( "UseControlColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewBackground::CTSLDisplayViewBackground( const CTSLDisplayViewBackground &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  UseControlColor( GetInstance(), _T( "UseControlColor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewBackground & CTSLDisplayViewBackground::operator = ( const CTSLDisplayViewBackground & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayViewBackground::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLCustomColorDisplayView::CTSLCustomColorDisplayView( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Background( *new CTSLDisplayViewBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTSLCustomColorDisplayView::CTSLCustomColorDisplayView( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Background( *new CTSLDisplayViewBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTSLCustomColorDisplayView::CTSLCustomColorDisplayView( CLPClassProperty *a_property, CTSLCustomColorDisplayView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Background( *new CTSLDisplayViewBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTSLCustomColorDisplayView::CTSLCustomColorDisplayView( CLPClassProperty *a_property, CTSLCustomColorDisplayView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLCustomColorDisplayView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Background( *new CTSLDisplayViewBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTSLCustomColorDisplayView::CTSLCustomColorDisplayView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLCustomColorDisplayView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Background( *new CTSLDisplayViewBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTSLCustomColorDisplayView::CTSLCustomColorDisplayView( CLPBaseComponent *a_control, CTSLCustomColorDisplayView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Background( *new CTSLDisplayViewBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTSLCustomColorDisplayView::CTSLCustomColorDisplayView( CLPBaseComponent *a_control, CTSLCustomColorDisplayView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLCustomColorDisplayView ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Background( *new CTSLDisplayViewBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTSLCustomColorDisplayView::CTSLCustomColorDisplayView( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Background( *new CTSLDisplayViewBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTSLCustomColorDisplayView::CTSLCustomColorDisplayView( const CTSLCustomColorDisplayView &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Background( *new CTSLDisplayViewBackground( GetInstance(), _T( "Background" )))
{
}
//------------------------------------------------------------------------------
inline CTSLCustomColorDisplayView::~CTSLCustomColorDisplayView()
{
  delete &Background;
}
//------------------------------------------------------------------------------
inline CTSLCustomColorDisplayView & CTSLCustomColorDisplayView::operator = ( const CTSLCustomColorDisplayView & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLCustomColorDisplayView::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewSize::CTSLDisplayViewSize( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewSize::CTSLDisplayViewSize( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewSize::CTSLDisplayViewSize( CLPClassProperty *a_property, CTSLDisplayViewSize ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewSize::CTSLDisplayViewSize( CLPClassProperty *a_property, CTSLDisplayViewSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayViewSize ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewSize::CTSLDisplayViewSize( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayViewSize ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewSize::CTSLDisplayViewSize( CLPBaseComponent *a_control, CTSLDisplayViewSize ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewSize::CTSLDisplayViewSize( CLPBaseComponent *a_control, CTSLDisplayViewSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayViewSize ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewSize::CTSLDisplayViewSize( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewSize::CTSLDisplayViewSize( const CTSLDisplayViewSize &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoSize( GetInstance(), _T( "AutoSize" ) ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayViewSize & CTSLDisplayViewSize::operator = ( const CTSLDisplayViewSize & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayViewSize::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLCustomSizeDisplayView::CTSLCustomSizeDisplayView( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ViewSize( *new CTSLDisplayViewSize( GetInstance(), _T( "ViewSize" ))),
  Align( GetInstance(), _T( "Align" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLCustomSizeDisplayView::CTSLCustomSizeDisplayView( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ViewSize( *new CTSLDisplayViewSize( GetInstance(), _T( "ViewSize" ))),
  Align( GetInstance(), _T( "Align" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLCustomSizeDisplayView::CTSLCustomSizeDisplayView( CLPClassProperty *a_property, CTSLCustomSizeDisplayView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  ViewSize( *new CTSLDisplayViewSize( GetInstance(), _T( "ViewSize" ))),
  Align( GetInstance(), _T( "Align" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLCustomSizeDisplayView::CTSLCustomSizeDisplayView( CLPClassProperty *a_property, CTSLCustomSizeDisplayView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLCustomSizeDisplayView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  ViewSize( *new CTSLDisplayViewSize( GetInstance(), _T( "ViewSize" ))),
  Align( GetInstance(), _T( "Align" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLCustomSizeDisplayView::CTSLCustomSizeDisplayView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLCustomSizeDisplayView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  ViewSize( *new CTSLDisplayViewSize( GetInstance(), _T( "ViewSize" ))),
  Align( GetInstance(), _T( "Align" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLCustomSizeDisplayView::CTSLCustomSizeDisplayView( CLPBaseComponent *a_control, CTSLCustomSizeDisplayView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  ViewSize( *new CTSLDisplayViewSize( GetInstance(), _T( "ViewSize" ))),
  Align( GetInstance(), _T( "Align" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLCustomSizeDisplayView::CTSLCustomSizeDisplayView( CLPBaseComponent *a_control, CTSLCustomSizeDisplayView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLCustomSizeDisplayView ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  ViewSize( *new CTSLDisplayViewSize( GetInstance(), _T( "ViewSize" ))),
  Align( GetInstance(), _T( "Align" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLCustomSizeDisplayView::CTSLCustomSizeDisplayView( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ViewSize( *new CTSLDisplayViewSize( GetInstance(), _T( "ViewSize" ))),
  Align( GetInstance(), _T( "Align" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLCustomSizeDisplayView::CTSLCustomSizeDisplayView( const CTSLCustomSizeDisplayView &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ViewSize( *new CTSLDisplayViewSize( GetInstance(), _T( "ViewSize" ))),
  Align( GetInstance(), _T( "Align" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLCustomSizeDisplayView::~CTSLCustomSizeDisplayView()
{
  delete &ViewSize;
}
//------------------------------------------------------------------------------
inline CTSLCustomSizeDisplayView & CTSLCustomSizeDisplayView::operator = ( const CTSLCustomSizeDisplayView & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLCustomSizeDisplayView::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayProperty::CTSLDisplayProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayProperty::CTSLDisplayProperty( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayProperty::CTSLDisplayProperty( CLPClassProperty *a_property, CTSLDisplayProperty ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayProperty::CTSLDisplayProperty( CLPClassProperty *a_property, CTSLDisplayProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayProperty ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayProperty::CTSLDisplayProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayProperty ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayProperty::CTSLDisplayProperty( CLPBaseComponent *a_control, CTSLDisplayProperty ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayProperty::CTSLDisplayProperty( CLPBaseComponent *a_control, CTSLDisplayProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayProperty ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayProperty::CTSLDisplayProperty( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayProperty::CTSLDisplayProperty( const CTSLDisplayProperty &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayProperty & CTSLDisplayProperty::operator = ( const CTSLDisplayProperty & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayProperty::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLVisibleDisplayProperty::CTSLVisibleDisplayProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLVisibleDisplayProperty::CTSLVisibleDisplayProperty( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLVisibleDisplayProperty::CTSLVisibleDisplayProperty( CLPClassProperty *a_property, CTSLVisibleDisplayProperty ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLVisibleDisplayProperty::CTSLVisibleDisplayProperty( CLPClassProperty *a_property, CTSLVisibleDisplayProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLVisibleDisplayProperty ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLVisibleDisplayProperty::CTSLVisibleDisplayProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLVisibleDisplayProperty ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLVisibleDisplayProperty::CTSLVisibleDisplayProperty( CLPBaseComponent *a_control, CTSLVisibleDisplayProperty ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLVisibleDisplayProperty::CTSLVisibleDisplayProperty( CLPBaseComponent *a_control, CTSLVisibleDisplayProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLVisibleDisplayProperty ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLVisibleDisplayProperty::CTSLVisibleDisplayProperty( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLVisibleDisplayProperty::CTSLVisibleDisplayProperty( const CTSLVisibleDisplayProperty &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLVisibleDisplayProperty & CTSLVisibleDisplayProperty::operator = ( const CTSLVisibleDisplayProperty & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLVisibleDisplayProperty::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridLineSettings::CTSLDisplayGridLineSettings( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridLineSettings::CTSLDisplayGridLineSettings( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridLineSettings::CTSLDisplayGridLineSettings( CLPClassProperty *a_property, CTSLDisplayGridLineSettings ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridLineSettings::CTSLDisplayGridLineSettings( CLPClassProperty *a_property, CTSLDisplayGridLineSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayGridLineSettings ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridLineSettings::CTSLDisplayGridLineSettings( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayGridLineSettings ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridLineSettings::CTSLDisplayGridLineSettings( CLPBaseComponent *a_control, CTSLDisplayGridLineSettings ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridLineSettings::CTSLDisplayGridLineSettings( CLPBaseComponent *a_control, CTSLDisplayGridLineSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayGridLineSettings ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridLineSettings::CTSLDisplayGridLineSettings( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridLineSettings::CTSLDisplayGridLineSettings( const CTSLDisplayGridLineSettings &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Pen( *new CTPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridLineSettings::~CTSLDisplayGridLineSettings()
{
  delete &Pen;
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridLineSettings & CTSLDisplayGridLineSettings::operator = ( const CTSLDisplayGridLineSettings & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayGridLineSettings::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridDirectionalLinesSettings::CTSLDisplayGridDirectionalLinesSettings( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Lines( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Lines" ))),
  ZeroLine( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "ZeroLine" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridDirectionalLinesSettings::CTSLDisplayGridDirectionalLinesSettings( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Lines( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Lines" ))),
  ZeroLine( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "ZeroLine" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridDirectionalLinesSettings::CTSLDisplayGridDirectionalLinesSettings( CLPClassProperty *a_property, CTSLDisplayGridDirectionalLinesSettings ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Lines( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Lines" ))),
  ZeroLine( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "ZeroLine" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridDirectionalLinesSettings::CTSLDisplayGridDirectionalLinesSettings( CLPClassProperty *a_property, CTSLDisplayGridDirectionalLinesSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayGridDirectionalLinesSettings ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Lines( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Lines" ))),
  ZeroLine( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "ZeroLine" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridDirectionalLinesSettings::CTSLDisplayGridDirectionalLinesSettings( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayGridDirectionalLinesSettings ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Lines( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Lines" ))),
  ZeroLine( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "ZeroLine" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridDirectionalLinesSettings::CTSLDisplayGridDirectionalLinesSettings( CLPBaseComponent *a_control, CTSLDisplayGridDirectionalLinesSettings ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Lines( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Lines" ))),
  ZeroLine( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "ZeroLine" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridDirectionalLinesSettings::CTSLDisplayGridDirectionalLinesSettings( CLPBaseComponent *a_control, CTSLDisplayGridDirectionalLinesSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayGridDirectionalLinesSettings ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Lines( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Lines" ))),
  ZeroLine( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "ZeroLine" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridDirectionalLinesSettings::CTSLDisplayGridDirectionalLinesSettings( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Lines( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Lines" ))),
  ZeroLine( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "ZeroLine" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridDirectionalLinesSettings::CTSLDisplayGridDirectionalLinesSettings( const CTSLDisplayGridDirectionalLinesSettings &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Lines( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Lines" ))),
  ZeroLine( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "ZeroLine" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridDirectionalLinesSettings::~CTSLDisplayGridDirectionalLinesSettings()
{
  delete &Lines;
  delete &ZeroLine;
}
//------------------------------------------------------------------------------
inline CTSLDisplayGridDirectionalLinesSettings & CTSLDisplayGridDirectionalLinesSettings::operator = ( const CTSLDisplayGridDirectionalLinesSettings & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayGridDirectionalLinesSettings::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeDataView::CTSLScopeDataView( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Border( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Border" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeDataView::CTSLScopeDataView( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Border( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Border" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeDataView::CTSLScopeDataView( CLPClassProperty *a_property, CTSLScopeDataView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Border( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Border" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeDataView::CTSLScopeDataView( CLPClassProperty *a_property, CTSLScopeDataView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeDataView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Border( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Border" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeDataView::CTSLScopeDataView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeDataView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Border( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Border" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeDataView::CTSLScopeDataView( CLPBaseComponent *a_control, CTSLScopeDataView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Border( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Border" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeDataView::CTSLScopeDataView( CLPBaseComponent *a_control, CTSLScopeDataView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeDataView ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Border( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Border" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeDataView::CTSLScopeDataView( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Border( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Border" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeDataView::CTSLScopeDataView( const CTSLScopeDataView &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Border( *new CTSLDisplayGridLineSettings( GetInstance(), _T( "Border" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeDataView::~CTSLScopeDataView()
{
  delete &Border;
}
//------------------------------------------------------------------------------
inline CTSLScopeDataView & CTSLScopeDataView::operator = ( const CTSLScopeDataView & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeDataView::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLOptionalView::CTSLOptionalView( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalView::CTSLOptionalView( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalView::CTSLOptionalView( CLPClassProperty *a_property, CTSLOptionalView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalView::CTSLOptionalView( CLPClassProperty *a_property, CTSLOptionalView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalView::CTSLOptionalView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLOptionalView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalView::CTSLOptionalView( CLPBaseComponent *a_control, CTSLOptionalView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalView::CTSLOptionalView( CLPBaseComponent *a_control, CTSLOptionalView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalView ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalView::CTSLOptionalView( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalView::CTSLOptionalView( const CTSLOptionalView &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalView & CTSLOptionalView::operator = ( const CTSLOptionalView & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLOptionalView::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLBasicLegendGroup::CTSLBasicLegendGroup( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Caption( *new CTSLDisplayLabel( GetInstance(), _T( "Caption" ))),
  Visible( GetInstance(), _T( "Visible" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  OnItemClick( GetInstance(), _T( "OnItemClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicLegendGroup::CTSLBasicLegendGroup( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Caption( *new CTSLDisplayLabel( GetInstance(), _T( "Caption" ))),
  Visible( GetInstance(), _T( "Visible" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  OnItemClick( GetInstance(), _T( "OnItemClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicLegendGroup::CTSLBasicLegendGroup( CLPClassProperty *a_property, CTSLBasicLegendGroup ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Caption( *new CTSLDisplayLabel( GetInstance(), _T( "Caption" ))),
  Visible( GetInstance(), _T( "Visible" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  OnItemClick( GetInstance(), _T( "OnItemClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicLegendGroup::CTSLBasicLegendGroup( CLPClassProperty *a_property, CTSLBasicLegendGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicLegendGroup ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Caption( *new CTSLDisplayLabel( GetInstance(), _T( "Caption" ))),
  Visible( GetInstance(), _T( "Visible" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  OnItemClick( GetInstance(), _T( "OnItemClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicLegendGroup::CTSLBasicLegendGroup( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicLegendGroup ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Caption( *new CTSLDisplayLabel( GetInstance(), _T( "Caption" ))),
  Visible( GetInstance(), _T( "Visible" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  OnItemClick( GetInstance(), _T( "OnItemClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicLegendGroup::CTSLBasicLegendGroup( CLPBaseComponent *a_control, CTSLBasicLegendGroup ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Caption( *new CTSLDisplayLabel( GetInstance(), _T( "Caption" ))),
  Visible( GetInstance(), _T( "Visible" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  OnItemClick( GetInstance(), _T( "OnItemClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicLegendGroup::CTSLBasicLegendGroup( CLPBaseComponent *a_control, CTSLBasicLegendGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicLegendGroup ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Caption( *new CTSLDisplayLabel( GetInstance(), _T( "Caption" ))),
  Visible( GetInstance(), _T( "Visible" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  OnItemClick( GetInstance(), _T( "OnItemClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicLegendGroup::CTSLBasicLegendGroup( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Caption( *new CTSLDisplayLabel( GetInstance(), _T( "Caption" ))),
  Visible( GetInstance(), _T( "Visible" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  OnItemClick( GetInstance(), _T( "OnItemClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicLegendGroup::CTSLBasicLegendGroup( const CTSLBasicLegendGroup &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Caption( *new CTSLDisplayLabel( GetInstance(), _T( "Caption" ))),
  Visible( GetInstance(), _T( "Visible" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  OnItemClick( GetInstance(), _T( "OnItemClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicLegendGroup::~CTSLBasicLegendGroup()
{
  delete &Caption;
}
//------------------------------------------------------------------------------
inline CTSLBasicLegendGroup & CTSLBasicLegendGroup::operator = ( const CTSLBasicLegendGroup & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLBasicLegendGroup::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLLegendGroup::CTSLLegendGroup( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendGroup::CTSLLegendGroup( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendGroup::CTSLLegendGroup( CLPClassProperty *a_property, CTSLLegendGroup ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLLegendGroup::CTSLLegendGroup( CLPClassProperty *a_property, CTSLLegendGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLegendGroup ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLLegendGroup::CTSLLegendGroup( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLLegendGroup ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLLegendGroup::CTSLLegendGroup( CLPBaseComponent *a_control, CTSLLegendGroup ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLLegendGroup::CTSLLegendGroup( CLPBaseComponent *a_control, CTSLLegendGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLegendGroup ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLLegendGroup::CTSLLegendGroup( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendGroup::CTSLLegendGroup( const CTSLLegendGroup &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLLegendGroup & CTSLLegendGroup::operator = ( const CTSLLegendGroup & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLLegendGroup::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLLegendView::CTSLLegendView( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  Buttons( *new CTSLLegendViewButtonSettings( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLLegendView::CTSLLegendView( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  Buttons( *new CTSLLegendViewButtonSettings( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLLegendView::CTSLLegendView( CLPClassProperty *a_property, CTSLLegendView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  Buttons( *new CTSLLegendViewButtonSettings( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLLegendView::CTSLLegendView( CLPClassProperty *a_property, CTSLLegendView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLegendView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  Buttons( *new CTSLLegendViewButtonSettings( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLLegendView::CTSLLegendView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLLegendView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  Buttons( *new CTSLLegendViewButtonSettings( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLLegendView::CTSLLegendView( CLPBaseComponent *a_control, CTSLLegendView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  Buttons( *new CTSLLegendViewButtonSettings( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLLegendView::CTSLLegendView( CLPBaseComponent *a_control, CTSLLegendView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLegendView ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  Buttons( *new CTSLLegendViewButtonSettings( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLLegendView::CTSLLegendView( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  Buttons( *new CTSLLegendViewButtonSettings( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLLegendView::CTSLLegendView( const CTSLLegendView &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  Buttons( *new CTSLLegendViewButtonSettings( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLLegendView::~CTSLLegendView()
{
  delete &Font;
  delete &Buttons;
}
//------------------------------------------------------------------------------
inline CTSLLegendView & CTSLLegendView::operator = ( const CTSLLegendView & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLLegendView::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeLegendView::CTSLScopeLegendView( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Channels( *new CTSLLegendGroup( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLLegendGroup( GetInstance(), _T( "ChannelLinks" ))),
  MarkerGroups( *new CTSLLegendGroup( GetInstance(), _T( "MarkerGroups" ))),
  Zones( *new CTSLLegendGroup( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLLegendGroup( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLLegendGroup( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLLegendGroup( GetInstance(), _T( "CursorLinks" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeLegendView::CTSLScopeLegendView( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Channels( *new CTSLLegendGroup( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLLegendGroup( GetInstance(), _T( "ChannelLinks" ))),
  MarkerGroups( *new CTSLLegendGroup( GetInstance(), _T( "MarkerGroups" ))),
  Zones( *new CTSLLegendGroup( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLLegendGroup( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLLegendGroup( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLLegendGroup( GetInstance(), _T( "CursorLinks" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeLegendView::CTSLScopeLegendView( CLPClassProperty *a_property, CTSLScopeLegendView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Channels( *new CTSLLegendGroup( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLLegendGroup( GetInstance(), _T( "ChannelLinks" ))),
  MarkerGroups( *new CTSLLegendGroup( GetInstance(), _T( "MarkerGroups" ))),
  Zones( *new CTSLLegendGroup( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLLegendGroup( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLLegendGroup( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLLegendGroup( GetInstance(), _T( "CursorLinks" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeLegendView::CTSLScopeLegendView( CLPClassProperty *a_property, CTSLScopeLegendView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeLegendView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Channels( *new CTSLLegendGroup( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLLegendGroup( GetInstance(), _T( "ChannelLinks" ))),
  MarkerGroups( *new CTSLLegendGroup( GetInstance(), _T( "MarkerGroups" ))),
  Zones( *new CTSLLegendGroup( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLLegendGroup( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLLegendGroup( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLLegendGroup( GetInstance(), _T( "CursorLinks" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeLegendView::CTSLScopeLegendView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeLegendView ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Channels( *new CTSLLegendGroup( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLLegendGroup( GetInstance(), _T( "ChannelLinks" ))),
  MarkerGroups( *new CTSLLegendGroup( GetInstance(), _T( "MarkerGroups" ))),
  Zones( *new CTSLLegendGroup( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLLegendGroup( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLLegendGroup( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLLegendGroup( GetInstance(), _T( "CursorLinks" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeLegendView::CTSLScopeLegendView( CLPBaseComponent *a_control, CTSLScopeLegendView ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Channels( *new CTSLLegendGroup( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLLegendGroup( GetInstance(), _T( "ChannelLinks" ))),
  MarkerGroups( *new CTSLLegendGroup( GetInstance(), _T( "MarkerGroups" ))),
  Zones( *new CTSLLegendGroup( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLLegendGroup( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLLegendGroup( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLLegendGroup( GetInstance(), _T( "CursorLinks" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeLegendView::CTSLScopeLegendView( CLPBaseComponent *a_control, CTSLScopeLegendView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeLegendView ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Channels( *new CTSLLegendGroup( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLLegendGroup( GetInstance(), _T( "ChannelLinks" ))),
  MarkerGroups( *new CTSLLegendGroup( GetInstance(), _T( "MarkerGroups" ))),
  Zones( *new CTSLLegendGroup( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLLegendGroup( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLLegendGroup( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLLegendGroup( GetInstance(), _T( "CursorLinks" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeLegendView::CTSLScopeLegendView( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Channels( *new CTSLLegendGroup( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLLegendGroup( GetInstance(), _T( "ChannelLinks" ))),
  MarkerGroups( *new CTSLLegendGroup( GetInstance(), _T( "MarkerGroups" ))),
  Zones( *new CTSLLegendGroup( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLLegendGroup( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLLegendGroup( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLLegendGroup( GetInstance(), _T( "CursorLinks" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeLegendView::CTSLScopeLegendView( const CTSLScopeLegendView &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Channels( *new CTSLLegendGroup( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLLegendGroup( GetInstance(), _T( "ChannelLinks" ))),
  MarkerGroups( *new CTSLLegendGroup( GetInstance(), _T( "MarkerGroups" ))),
  Zones( *new CTSLLegendGroup( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLLegendGroup( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLLegendGroup( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLLegendGroup( GetInstance(), _T( "CursorLinks" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeLegendView::~CTSLScopeLegendView()
{
  delete &Channels;
  delete &ChannelLinks;
  delete &MarkerGroups;
  delete &Zones;
  delete &Ellipses;
  delete &Cursors;
  delete &CursorLinks;
}
//------------------------------------------------------------------------------
inline CTSLScopeLegendView & CTSLScopeLegendView::operator = ( const CTSLScopeLegendView & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeLegendView::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitleLabel::CTSLDisplayTitleLabel( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitleLabel::CTSLDisplayTitleLabel( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitleLabel::CTSLDisplayTitleLabel( CLPClassProperty *a_property, CTSLDisplayTitleLabel ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitleLabel::CTSLDisplayTitleLabel( CLPClassProperty *a_property, CTSLDisplayTitleLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayTitleLabel ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitleLabel::CTSLDisplayTitleLabel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayTitleLabel ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitleLabel::CTSLDisplayTitleLabel( CLPBaseComponent *a_control, CTSLDisplayTitleLabel ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitleLabel::CTSLDisplayTitleLabel( CLPBaseComponent *a_control, CTSLDisplayTitleLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayTitleLabel ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitleLabel::CTSLDisplayTitleLabel( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitleLabel::CTSLDisplayTitleLabel( const CTSLDisplayTitleLabel &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitleLabel & CTSLDisplayTitleLabel::operator = ( const CTSLDisplayTitleLabel & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayTitleLabel::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitle::CTSLDisplayTitle( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Text( GetInstance(), _T( "Text" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitle::CTSLDisplayTitle( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Text( GetInstance(), _T( "Text" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitle::CTSLDisplayTitle( CLPClassProperty *a_property, CTSLDisplayTitle ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Text( GetInstance(), _T( "Text" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitle::CTSLDisplayTitle( CLPClassProperty *a_property, CTSLDisplayTitle ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayTitle ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Text( GetInstance(), _T( "Text" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitle::CTSLDisplayTitle( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayTitle ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Text( GetInstance(), _T( "Text" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitle::CTSLDisplayTitle( CLPBaseComponent *a_control, CTSLDisplayTitle ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Text( GetInstance(), _T( "Text" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitle::CTSLDisplayTitle( CLPBaseComponent *a_control, CTSLDisplayTitle ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayTitle ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Text( GetInstance(), _T( "Text" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitle::CTSLDisplayTitle( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Text( GetInstance(), _T( "Text" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitle::CTSLDisplayTitle( const CTSLDisplayTitle &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Text( GetInstance(), _T( "Text" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitle::~CTSLDisplayTitle()
{
  delete &Font;
}
//------------------------------------------------------------------------------
inline CTSLDisplayTitle & CTSLDisplayTitle::operator = ( const CTSLDisplayTitle & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayTitle::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLOptionalAxis::CTSLOptionalAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalAxis::CTSLOptionalAxis( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalAxis::CTSLOptionalAxis( CLPClassProperty *a_property, CTSLOptionalAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalAxis::CTSLOptionalAxis( CLPClassProperty *a_property, CTSLOptionalAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalAxis::CTSLOptionalAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLOptionalAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalAxis::CTSLOptionalAxis( CLPBaseComponent *a_control, CTSLOptionalAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalAxis::CTSLOptionalAxis( CLPBaseComponent *a_control, CTSLOptionalAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalAxis ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalAxis::CTSLOptionalAxis( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalAxis::CTSLOptionalAxis( const CTSLOptionalAxis &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLOptionalAxis & CTSLOptionalAxis::operator = ( const CTSLOptionalAxis & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLOptionalAxis::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLMinorTicks::CTSLMinorTicks( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMinorTicks::CTSLMinorTicks( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMinorTicks::CTSLMinorTicks( CLPClassProperty *a_property, CTSLMinorTicks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMinorTicks::CTSLMinorTicks( CLPClassProperty *a_property, CTSLMinorTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMinorTicks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMinorTicks::CTSLMinorTicks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLMinorTicks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMinorTicks::CTSLMinorTicks( CLPBaseComponent *a_control, CTSLMinorTicks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMinorTicks::CTSLMinorTicks( CLPBaseComponent *a_control, CTSLMinorTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMinorTicks ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMinorTicks::CTSLMinorTicks( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMinorTicks::CTSLMinorTicks( const CTSLMinorTicks &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Count( GetInstance(), _T( "Count" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMinorTicks & CTSLMinorTicks::operator = ( const CTSLMinorTicks & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLMinorTicks::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLMajorTicksParam::CTSLMajorTicksParam( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicksParam::CTSLMajorTicksParam( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicksParam::CTSLMajorTicksParam( CLPClassProperty *a_property, CTSLMajorTicksParam ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicksParam::CTSLMajorTicksParam( CLPClassProperty *a_property, CTSLMajorTicksParam ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMajorTicksParam ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicksParam::CTSLMajorTicksParam( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLMajorTicksParam ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicksParam::CTSLMajorTicksParam( CLPBaseComponent *a_control, CTSLMajorTicksParam ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicksParam::CTSLMajorTicksParam( CLPBaseComponent *a_control, CTSLMajorTicksParam ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMajorTicksParam ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicksParam::CTSLMajorTicksParam( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicksParam::CTSLMajorTicksParam( const CTSLMajorTicksParam &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicksParam & CTSLMajorTicksParam::operator = ( const CTSLMajorTicksParam & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLMajorTicksParam::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLTicksStart::CTSLTicksStart( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  StartFrom( GetInstance(), _T( "StartFrom" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTicksStart::CTSLTicksStart( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  StartFrom( GetInstance(), _T( "StartFrom" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTicksStart::CTSLTicksStart( CLPClassProperty *a_property, CTSLTicksStart ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  StartFrom( GetInstance(), _T( "StartFrom" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTicksStart::CTSLTicksStart( CLPClassProperty *a_property, CTSLTicksStart ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLTicksStart ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  StartFrom( GetInstance(), _T( "StartFrom" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTicksStart::CTSLTicksStart( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLTicksStart ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  StartFrom( GetInstance(), _T( "StartFrom" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTicksStart::CTSLTicksStart( CLPBaseComponent *a_control, CTSLTicksStart ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  StartFrom( GetInstance(), _T( "StartFrom" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTicksStart::CTSLTicksStart( CLPBaseComponent *a_control, CTSLTicksStart ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLTicksStart ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  StartFrom( GetInstance(), _T( "StartFrom" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTicksStart::CTSLTicksStart( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  StartFrom( GetInstance(), _T( "StartFrom" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTicksStart::CTSLTicksStart( const CTSLTicksStart &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  StartFrom( GetInstance(), _T( "StartFrom" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTicksStart & CTSLTicksStart::operator = ( const CTSLTicksStart & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLTicksStart::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLMajorTicks::CTSLMajorTicks( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Step( GetInstance(), _T( "Step" ) ),
  StartFrom( *new CTSLTicksStart( GetInstance(), _T( "StartFrom" )))
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicks::CTSLMajorTicks( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Step( GetInstance(), _T( "Step" ) ),
  StartFrom( *new CTSLTicksStart( GetInstance(), _T( "StartFrom" )))
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicks::CTSLMajorTicks( CLPClassProperty *a_property, CTSLMajorTicks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Step( GetInstance(), _T( "Step" ) ),
  StartFrom( *new CTSLTicksStart( GetInstance(), _T( "StartFrom" )))
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicks::CTSLMajorTicks( CLPClassProperty *a_property, CTSLMajorTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMajorTicks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Step( GetInstance(), _T( "Step" ) ),
  StartFrom( *new CTSLTicksStart( GetInstance(), _T( "StartFrom" )))
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicks::CTSLMajorTicks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLMajorTicks ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Step( GetInstance(), _T( "Step" ) ),
  StartFrom( *new CTSLTicksStart( GetInstance(), _T( "StartFrom" )))
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicks::CTSLMajorTicks( CLPBaseComponent *a_control, CTSLMajorTicks ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Step( GetInstance(), _T( "Step" ) ),
  StartFrom( *new CTSLTicksStart( GetInstance(), _T( "StartFrom" )))
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicks::CTSLMajorTicks( CLPBaseComponent *a_control, CTSLMajorTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMajorTicks ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Step( GetInstance(), _T( "Step" ) ),
  StartFrom( *new CTSLTicksStart( GetInstance(), _T( "StartFrom" )))
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicks::CTSLMajorTicks( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Step( GetInstance(), _T( "Step" ) ),
  StartFrom( *new CTSLTicksStart( GetInstance(), _T( "StartFrom" )))
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicks::CTSLMajorTicks( const CTSLMajorTicks &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Step( GetInstance(), _T( "Step" ) ),
  StartFrom( *new CTSLTicksStart( GetInstance(), _T( "StartFrom" )))
{
}
//------------------------------------------------------------------------------
inline CTSLMajorTicks::~CTSLMajorTicks()
{
  delete &StartFrom;
}
//------------------------------------------------------------------------------
inline CTSLMajorTicks & CTSLMajorTicks::operator = ( const CTSLMajorTicks & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLMajorTicks::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLTrackingOptionalAxis::CTSLTrackingOptionalAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  TrackCursor( GetInstance(), _T( "TrackCursor" ) ),
  TrackColor( GetInstance(), _T( "TrackColor" ) ),
  MinorTicks( *new CTSLMinorTicks( GetInstance(), _T( "MinorTicks" ))),
  MajorTicks( *new CTSLMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  OnCustomStep( GetInstance(), _T( "OnCustomStep" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTrackingOptionalAxis::CTSLTrackingOptionalAxis( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  TrackCursor( GetInstance(), _T( "TrackCursor" ) ),
  TrackColor( GetInstance(), _T( "TrackColor" ) ),
  MinorTicks( *new CTSLMinorTicks( GetInstance(), _T( "MinorTicks" ))),
  MajorTicks( *new CTSLMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  OnCustomStep( GetInstance(), _T( "OnCustomStep" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTrackingOptionalAxis::CTSLTrackingOptionalAxis( CLPClassProperty *a_property, CTSLTrackingOptionalAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  TrackCursor( GetInstance(), _T( "TrackCursor" ) ),
  TrackColor( GetInstance(), _T( "TrackColor" ) ),
  MinorTicks( *new CTSLMinorTicks( GetInstance(), _T( "MinorTicks" ))),
  MajorTicks( *new CTSLMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  OnCustomStep( GetInstance(), _T( "OnCustomStep" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTrackingOptionalAxis::CTSLTrackingOptionalAxis( CLPClassProperty *a_property, CTSLTrackingOptionalAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLTrackingOptionalAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  TrackCursor( GetInstance(), _T( "TrackCursor" ) ),
  TrackColor( GetInstance(), _T( "TrackColor" ) ),
  MinorTicks( *new CTSLMinorTicks( GetInstance(), _T( "MinorTicks" ))),
  MajorTicks( *new CTSLMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  OnCustomStep( GetInstance(), _T( "OnCustomStep" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTrackingOptionalAxis::CTSLTrackingOptionalAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLTrackingOptionalAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  TrackCursor( GetInstance(), _T( "TrackCursor" ) ),
  TrackColor( GetInstance(), _T( "TrackColor" ) ),
  MinorTicks( *new CTSLMinorTicks( GetInstance(), _T( "MinorTicks" ))),
  MajorTicks( *new CTSLMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  OnCustomStep( GetInstance(), _T( "OnCustomStep" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTrackingOptionalAxis::CTSLTrackingOptionalAxis( CLPBaseComponent *a_control, CTSLTrackingOptionalAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  TrackCursor( GetInstance(), _T( "TrackCursor" ) ),
  TrackColor( GetInstance(), _T( "TrackColor" ) ),
  MinorTicks( *new CTSLMinorTicks( GetInstance(), _T( "MinorTicks" ))),
  MajorTicks( *new CTSLMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  OnCustomStep( GetInstance(), _T( "OnCustomStep" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTrackingOptionalAxis::CTSLTrackingOptionalAxis( CLPBaseComponent *a_control, CTSLTrackingOptionalAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLTrackingOptionalAxis ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  TrackCursor( GetInstance(), _T( "TrackCursor" ) ),
  TrackColor( GetInstance(), _T( "TrackColor" ) ),
  MinorTicks( *new CTSLMinorTicks( GetInstance(), _T( "MinorTicks" ))),
  MajorTicks( *new CTSLMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  OnCustomStep( GetInstance(), _T( "OnCustomStep" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTrackingOptionalAxis::CTSLTrackingOptionalAxis( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  TrackCursor( GetInstance(), _T( "TrackCursor" ) ),
  TrackColor( GetInstance(), _T( "TrackColor" ) ),
  MinorTicks( *new CTSLMinorTicks( GetInstance(), _T( "MinorTicks" ))),
  MajorTicks( *new CTSLMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  OnCustomStep( GetInstance(), _T( "OnCustomStep" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTrackingOptionalAxis::CTSLTrackingOptionalAxis( const CTSLTrackingOptionalAxis &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  TrackCursor( GetInstance(), _T( "TrackCursor" ) ),
  TrackColor( GetInstance(), _T( "TrackColor" ) ),
  MinorTicks( *new CTSLMinorTicks( GetInstance(), _T( "MinorTicks" ))),
  MajorTicks( *new CTSLMajorTicks( GetInstance(), _T( "MajorTicks" ))),
  OnCustomStep( GetInstance(), _T( "OnCustomStep" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLTrackingOptionalAxis::~CTSLTrackingOptionalAxis()
{
  delete &MinorTicks;
  delete &MajorTicks;
}
//------------------------------------------------------------------------------
inline CTSLTrackingOptionalAxis & CTSLTrackingOptionalAxis::operator = ( const CTSLTrackingOptionalAxis & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLTrackingOptionalAxis::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButton::CTSLDisplayToolBarButton( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButton::CTSLDisplayToolBarButton( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButton::CTSLDisplayToolBarButton( CLPClassProperty *a_property, CTSLDisplayToolBarButton ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButton::CTSLDisplayToolBarButton( CLPClassProperty *a_property, CTSLDisplayToolBarButton ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBarButton ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButton::CTSLDisplayToolBarButton( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBarButton ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButton::CTSLDisplayToolBarButton( CLPBaseComponent *a_control, CTSLDisplayToolBarButton ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButton::CTSLDisplayToolBarButton( CLPBaseComponent *a_control, CTSLDisplayToolBarButton ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBarButton ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButton::CTSLDisplayToolBarButton( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButton::CTSLDisplayToolBarButton( const CTSLDisplayToolBarButton &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButton & CTSLDisplayToolBarButton::operator = ( const CTSLDisplayToolBarButton & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayToolBarButton::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayToolBar::CTSLBasicDisplayToolBar( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  AutoHide( GetInstance(), _T( "AutoHide" ) ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverButtonColor( GetInstance(), _T( "MouseOverButtonColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownButtonColor( GetInstance(), _T( "MouseDownButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayToolBar::CTSLBasicDisplayToolBar( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  AutoHide( GetInstance(), _T( "AutoHide" ) ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverButtonColor( GetInstance(), _T( "MouseOverButtonColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownButtonColor( GetInstance(), _T( "MouseDownButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayToolBar::CTSLBasicDisplayToolBar( CLPClassProperty *a_property, CTSLBasicDisplayToolBar ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  AutoHide( GetInstance(), _T( "AutoHide" ) ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverButtonColor( GetInstance(), _T( "MouseOverButtonColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownButtonColor( GetInstance(), _T( "MouseDownButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayToolBar::CTSLBasicDisplayToolBar( CLPClassProperty *a_property, CTSLBasicDisplayToolBar ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayToolBar ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  AutoHide( GetInstance(), _T( "AutoHide" ) ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverButtonColor( GetInstance(), _T( "MouseOverButtonColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownButtonColor( GetInstance(), _T( "MouseDownButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayToolBar::CTSLBasicDisplayToolBar( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayToolBar ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Visible( GetInstance(), _T( "Visible" ) ),
  AutoHide( GetInstance(), _T( "AutoHide" ) ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverButtonColor( GetInstance(), _T( "MouseOverButtonColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownButtonColor( GetInstance(), _T( "MouseDownButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayToolBar::CTSLBasicDisplayToolBar( CLPBaseComponent *a_control, CTSLBasicDisplayToolBar ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) ),
  AutoHide( GetInstance(), _T( "AutoHide" ) ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverButtonColor( GetInstance(), _T( "MouseOverButtonColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownButtonColor( GetInstance(), _T( "MouseDownButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayToolBar::CTSLBasicDisplayToolBar( CLPBaseComponent *a_control, CTSLBasicDisplayToolBar ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayToolBar ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Visible( GetInstance(), _T( "Visible" ) ),
  AutoHide( GetInstance(), _T( "AutoHide" ) ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverButtonColor( GetInstance(), _T( "MouseOverButtonColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownButtonColor( GetInstance(), _T( "MouseDownButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayToolBar::CTSLBasicDisplayToolBar( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  AutoHide( GetInstance(), _T( "AutoHide" ) ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverButtonColor( GetInstance(), _T( "MouseOverButtonColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownButtonColor( GetInstance(), _T( "MouseDownButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayToolBar::CTSLBasicDisplayToolBar( const CTSLBasicDisplayToolBar &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Visible( GetInstance(), _T( "Visible" ) ),
  AutoHide( GetInstance(), _T( "AutoHide" ) ),
  GlyphColor( GetInstance(), _T( "GlyphColor" ) ),
  BorderColor( GetInstance(), _T( "BorderColor" ) ),
  ButtonColor( GetInstance(), _T( "ButtonColor" ) ),
  MouseOverBorderColor( GetInstance(), _T( "MouseOverBorderColor" ) ),
  MouseOverButtonColor( GetInstance(), _T( "MouseOverButtonColor" ) ),
  MouseDownBorderColor( GetInstance(), _T( "MouseDownBorderColor" ) ),
  MouseDownButtonColor( GetInstance(), _T( "MouseDownButtonColor" ) ),
  DisabledColor( GetInstance(), _T( "DisabledColor" ) ),
  Cursor( GetInstance(), _T( "Cursor" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicDisplayToolBar & CTSLBasicDisplayToolBar::operator = ( const CTSLBasicDisplayToolBar & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLBasicDisplayToolBar::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLAxisToolBarButtons::CTSLAxisToolBarButtons( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomOneDir( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOneDir" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBarButtons::CTSLAxisToolBarButtons( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomOneDir( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOneDir" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBarButtons::CTSLAxisToolBarButtons( CLPClassProperty *a_property, CTSLAxisToolBarButtons ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomOneDir( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOneDir" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBarButtons::CTSLAxisToolBarButtons( CLPClassProperty *a_property, CTSLAxisToolBarButtons ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisToolBarButtons ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomOneDir( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOneDir" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBarButtons::CTSLAxisToolBarButtons( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAxisToolBarButtons ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomOneDir( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOneDir" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBarButtons::CTSLAxisToolBarButtons( CLPBaseComponent *a_control, CTSLAxisToolBarButtons ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomOneDir( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOneDir" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBarButtons::CTSLAxisToolBarButtons( CLPBaseComponent *a_control, CTSLAxisToolBarButtons ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisToolBarButtons ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomOneDir( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOneDir" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBarButtons::CTSLAxisToolBarButtons( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomOneDir( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOneDir" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBarButtons::CTSLAxisToolBarButtons( const CTSLAxisToolBarButtons &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomOneDir( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOneDir" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBarButtons::~CTSLAxisToolBarButtons()
{
  delete &ZoomIn;
  delete &ZoomOut;
  delete &ZoomOff;
  delete &ZoomOneDir;
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBarButtons & CTSLAxisToolBarButtons::operator = ( const CTSLAxisToolBarButtons & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLAxisToolBarButtons::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBar::CTSLAxisToolBar( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Buttons( *new CTSLAxisToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBar::CTSLAxisToolBar( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Buttons( *new CTSLAxisToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBar::CTSLAxisToolBar( CLPClassProperty *a_property, CTSLAxisToolBar ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Buttons( *new CTSLAxisToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBar::CTSLAxisToolBar( CLPClassProperty *a_property, CTSLAxisToolBar ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisToolBar ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Buttons( *new CTSLAxisToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBar::CTSLAxisToolBar( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAxisToolBar ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Buttons( *new CTSLAxisToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBar::CTSLAxisToolBar( CLPBaseComponent *a_control, CTSLAxisToolBar ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Buttons( *new CTSLAxisToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBar::CTSLAxisToolBar( CLPBaseComponent *a_control, CTSLAxisToolBar ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisToolBar ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Buttons( *new CTSLAxisToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBar::CTSLAxisToolBar( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Buttons( *new CTSLAxisToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBar::CTSLAxisToolBar( const CTSLAxisToolBar &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Buttons( *new CTSLAxisToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBar::~CTSLAxisToolBar()
{
  delete &Buttons;
}
//------------------------------------------------------------------------------
inline CTSLAxisToolBar & CTSLAxisToolBar::operator = ( const CTSLAxisToolBar & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLAxisToolBar::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxis::CTSLDisplayAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  ToolBar( *new CTSLAxisToolBar( GetInstance(), _T( "ToolBar" ))),
  Button( *new CTSLViewButtonSettings( GetInstance(), _T( "Button" ))),
  AxisLabel( *new CTSLDisplayTitleLabel( GetInstance(), _T( "AxisLabel" ))),
  OnCustomLabel( GetInstance(), _T( "OnCustomLabel" ) ),
  CurrentMax( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMax),
  CurrentMin( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMin),
  AssociatedChannels( *new CTSLAssociatedChannelLinkList( GetInstance(), ( CTSLAssociatedChannelLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayAxis::GetVC_AssociatedChannels ))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxis::CTSLDisplayAxis( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  ToolBar( *new CTSLAxisToolBar( GetInstance(), _T( "ToolBar" ))),
  Button( *new CTSLViewButtonSettings( GetInstance(), _T( "Button" ))),
  AxisLabel( *new CTSLDisplayTitleLabel( GetInstance(), _T( "AxisLabel" ))),
  OnCustomLabel( GetInstance(), _T( "OnCustomLabel" ) ),
  CurrentMax( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMax),
  CurrentMin( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMin),
  AssociatedChannels( *new CTSLAssociatedChannelLinkList( GetInstance(), ( CTSLAssociatedChannelLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayAxis::GetVC_AssociatedChannels ))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxis::CTSLDisplayAxis( CLPClassProperty *a_property, CTSLDisplayAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  ToolBar( *new CTSLAxisToolBar( GetInstance(), _T( "ToolBar" ))),
  Button( *new CTSLViewButtonSettings( GetInstance(), _T( "Button" ))),
  AxisLabel( *new CTSLDisplayTitleLabel( GetInstance(), _T( "AxisLabel" ))),
  OnCustomLabel( GetInstance(), _T( "OnCustomLabel" ) ),
  CurrentMax( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMax),
  CurrentMin( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMin),
  AssociatedChannels( *new CTSLAssociatedChannelLinkList( GetInstance(), ( CTSLAssociatedChannelLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayAxis::GetVC_AssociatedChannels ))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxis::CTSLDisplayAxis( CLPClassProperty *a_property, CTSLDisplayAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  ToolBar( *new CTSLAxisToolBar( GetInstance(), _T( "ToolBar" ))),
  Button( *new CTSLViewButtonSettings( GetInstance(), _T( "Button" ))),
  AxisLabel( *new CTSLDisplayTitleLabel( GetInstance(), _T( "AxisLabel" ))),
  OnCustomLabel( GetInstance(), _T( "OnCustomLabel" ) ),
  CurrentMax( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMax),
  CurrentMin( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMin),
  AssociatedChannels( *new CTSLAssociatedChannelLinkList( GetInstance(), ( CTSLAssociatedChannelLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayAxis::GetVC_AssociatedChannels ))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxis::CTSLDisplayAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  ToolBar( *new CTSLAxisToolBar( GetInstance(), _T( "ToolBar" ))),
  Button( *new CTSLViewButtonSettings( GetInstance(), _T( "Button" ))),
  AxisLabel( *new CTSLDisplayTitleLabel( GetInstance(), _T( "AxisLabel" ))),
  OnCustomLabel( GetInstance(), _T( "OnCustomLabel" ) ),
  CurrentMax( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMax),
  CurrentMin( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMin),
  AssociatedChannels( *new CTSLAssociatedChannelLinkList( GetInstance(), ( CTSLAssociatedChannelLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayAxis::GetVC_AssociatedChannels ))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxis::CTSLDisplayAxis( CLPBaseComponent *a_control, CTSLDisplayAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  ToolBar( *new CTSLAxisToolBar( GetInstance(), _T( "ToolBar" ))),
  Button( *new CTSLViewButtonSettings( GetInstance(), _T( "Button" ))),
  AxisLabel( *new CTSLDisplayTitleLabel( GetInstance(), _T( "AxisLabel" ))),
  OnCustomLabel( GetInstance(), _T( "OnCustomLabel" ) ),
  CurrentMax( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMax),
  CurrentMin( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMin),
  AssociatedChannels( *new CTSLAssociatedChannelLinkList( GetInstance(), ( CTSLAssociatedChannelLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayAxis::GetVC_AssociatedChannels ))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxis::CTSLDisplayAxis( CLPBaseComponent *a_control, CTSLDisplayAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayAxis ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  ToolBar( *new CTSLAxisToolBar( GetInstance(), _T( "ToolBar" ))),
  Button( *new CTSLViewButtonSettings( GetInstance(), _T( "Button" ))),
  AxisLabel( *new CTSLDisplayTitleLabel( GetInstance(), _T( "AxisLabel" ))),
  OnCustomLabel( GetInstance(), _T( "OnCustomLabel" ) ),
  CurrentMax( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMax),
  CurrentMin( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMin),
  AssociatedChannels( *new CTSLAssociatedChannelLinkList( GetInstance(), ( CTSLAssociatedChannelLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayAxis::GetVC_AssociatedChannels ))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxis::CTSLDisplayAxis( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  ToolBar( *new CTSLAxisToolBar( GetInstance(), _T( "ToolBar" ))),
  Button( *new CTSLViewButtonSettings( GetInstance(), _T( "Button" ))),
  AxisLabel( *new CTSLDisplayTitleLabel( GetInstance(), _T( "AxisLabel" ))),
  OnCustomLabel( GetInstance(), _T( "OnCustomLabel" ) ),
  CurrentMax( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMax),
  CurrentMin( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMin),
  AssociatedChannels( *new CTSLAssociatedChannelLinkList( GetInstance(), ( CTSLAssociatedChannelLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayAxis::GetVC_AssociatedChannels ))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxis::CTSLDisplayAxis( const CTSLDisplayAxis &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" ))),
  ToolBar( *new CTSLAxisToolBar( GetInstance(), _T( "ToolBar" ))),
  Button( *new CTSLViewButtonSettings( GetInstance(), _T( "Button" ))),
  AxisLabel( *new CTSLDisplayTitleLabel( GetInstance(), _T( "AxisLabel" ))),
  OnCustomLabel( GetInstance(), _T( "OnCustomLabel" ) ),
  CurrentMax( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMax),
  CurrentMin( (CTSLDisplayAxis *)GetInstance(), &CTSLDisplayAxis::GetCurrentMin),
  AssociatedChannels( *new CTSLAssociatedChannelLinkList( GetInstance(), ( CTSLAssociatedChannelLinkList ( CLPBaseClass::* )() ) &::CTSLDisplayAxis::GetVC_AssociatedChannels ))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxis::~CTSLDisplayAxis()
{
  delete &Font;
  delete &ToolBar;
  delete &Button;
  delete &AxisLabel;
  delete &AssociatedChannels;
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxis & CTSLDisplayAxis::operator = ( const CTSLDisplayAxis & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayAxis::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTSLDisplayAxis::SetTickText( CTString AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayAxis@SetTickText$qqrpc" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
#ifdef USE_STD_STRING
    const char * __1_Param1 = AValue.c_str();
#else
 #ifdef _UNICODE
    int __1_Length = AValue.GetLength();
    char * __1_Param1 = new char[ __1_Length * 2 + 1 ];
    wchar_t * __1_wch_ = AValue.LockBuffer();
  #if _MSC_VER >= 1400
    size_t   __1_i_;
    wcstombs_s( &__1_i_, __1_Param1, __1_Length * 2, __1_wch_, __1_Length );
  #else
    wcstombs( __1_Param1, __1_wch_, __1_Length );
  #endif
 #else
    char * __1_Param1 = AValue.LockBuffer();
 #endif
#endif

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }

#ifdef _UNICODE
    delete []__1_Param1;
#endif
#ifndef USE_STD_STRING
    AValue.UnlockBuffer();
#endif
    }

}
//------------------------------------------------------------------------------
inline double CTSLDisplayAxis::GetCurrentMax()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayAxis@GetCurrentMax$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline double CTSLDisplayAxis::GetCurrentMin()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayAxis@GetCurrentMin$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline CTSLAssociatedChannelLinkList CTSLDisplayAxis::GetVC_AssociatedChannels()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayAxis@GetVC_AssociatedChannels$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  VCLHANDLE __0_RtnValue_ = NULL;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (CTSLAssociatedChannelLinkList)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLDisplayYAxis::CTSLDisplayYAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayYAxis::CTSLDisplayYAxis( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayYAxis::CTSLDisplayYAxis( CLPClassProperty *a_property, CTSLDisplayYAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayYAxis::CTSLDisplayYAxis( CLPClassProperty *a_property, CTSLDisplayYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayYAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayYAxis::CTSLDisplayYAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayYAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayYAxis::CTSLDisplayYAxis( CLPBaseComponent *a_control, CTSLDisplayYAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayYAxis::CTSLDisplayYAxis( CLPBaseComponent *a_control, CTSLDisplayYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayYAxis ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayYAxis::CTSLDisplayYAxis( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayYAxis::CTSLDisplayYAxis( const CTSLDisplayYAxis &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayYAxis::~CTSLDisplayYAxis()
{
  delete &Format;
}
//------------------------------------------------------------------------------
inline CTSLDisplayYAxis & CTSLDisplayYAxis::operator = ( const CTSLDisplayYAxis & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayYAxis::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScalingSpace::CTSLScopeAutoScalingSpace( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Space( GetInstance(), _T( "Space" ) ),
  Threshold( GetInstance(), _T( "Threshold" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScalingSpace::CTSLScopeAutoScalingSpace( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Space( GetInstance(), _T( "Space" ) ),
  Threshold( GetInstance(), _T( "Threshold" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScalingSpace::CTSLScopeAutoScalingSpace( CLPClassProperty *a_property, CTSLScopeAutoScalingSpace ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Space( GetInstance(), _T( "Space" ) ),
  Threshold( GetInstance(), _T( "Threshold" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScalingSpace::CTSLScopeAutoScalingSpace( CLPClassProperty *a_property, CTSLScopeAutoScalingSpace ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeAutoScalingSpace ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Space( GetInstance(), _T( "Space" ) ),
  Threshold( GetInstance(), _T( "Threshold" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScalingSpace::CTSLScopeAutoScalingSpace( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeAutoScalingSpace ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Space( GetInstance(), _T( "Space" ) ),
  Threshold( GetInstance(), _T( "Threshold" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScalingSpace::CTSLScopeAutoScalingSpace( CLPBaseComponent *a_control, CTSLScopeAutoScalingSpace ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Space( GetInstance(), _T( "Space" ) ),
  Threshold( GetInstance(), _T( "Threshold" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScalingSpace::CTSLScopeAutoScalingSpace( CLPBaseComponent *a_control, CTSLScopeAutoScalingSpace ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeAutoScalingSpace ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Space( GetInstance(), _T( "Space" ) ),
  Threshold( GetInstance(), _T( "Threshold" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScalingSpace::CTSLScopeAutoScalingSpace( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Space( GetInstance(), _T( "Space" ) ),
  Threshold( GetInstance(), _T( "Threshold" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScalingSpace::CTSLScopeAutoScalingSpace( const CTSLScopeAutoScalingSpace &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Space( GetInstance(), _T( "Space" ) ),
  Threshold( GetInstance(), _T( "Threshold" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScalingSpace & CTSLScopeAutoScalingSpace::operator = ( const CTSLScopeAutoScalingSpace & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeAutoScalingSpace::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScaling::CTSLScopeAutoScaling( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  SpaceAbove( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceAbove" ))),
  SpaceBelow( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceBelow" ))),
  MaxHistory( GetInstance(), _T( "MaxHistory" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScaling::CTSLScopeAutoScaling( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  SpaceAbove( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceAbove" ))),
  SpaceBelow( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceBelow" ))),
  MaxHistory( GetInstance(), _T( "MaxHistory" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScaling::CTSLScopeAutoScaling( CLPClassProperty *a_property, CTSLScopeAutoScaling ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  SpaceAbove( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceAbove" ))),
  SpaceBelow( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceBelow" ))),
  MaxHistory( GetInstance(), _T( "MaxHistory" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScaling::CTSLScopeAutoScaling( CLPClassProperty *a_property, CTSLScopeAutoScaling ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeAutoScaling ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  SpaceAbove( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceAbove" ))),
  SpaceBelow( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceBelow" ))),
  MaxHistory( GetInstance(), _T( "MaxHistory" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScaling::CTSLScopeAutoScaling( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeAutoScaling ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  SpaceAbove( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceAbove" ))),
  SpaceBelow( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceBelow" ))),
  MaxHistory( GetInstance(), _T( "MaxHistory" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScaling::CTSLScopeAutoScaling( CLPBaseComponent *a_control, CTSLScopeAutoScaling ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  SpaceAbove( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceAbove" ))),
  SpaceBelow( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceBelow" ))),
  MaxHistory( GetInstance(), _T( "MaxHistory" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScaling::CTSLScopeAutoScaling( CLPBaseComponent *a_control, CTSLScopeAutoScaling ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeAutoScaling ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  SpaceAbove( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceAbove" ))),
  SpaceBelow( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceBelow" ))),
  MaxHistory( GetInstance(), _T( "MaxHistory" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScaling::CTSLScopeAutoScaling( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  SpaceAbove( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceAbove" ))),
  SpaceBelow( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceBelow" ))),
  MaxHistory( GetInstance(), _T( "MaxHistory" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScaling::CTSLScopeAutoScaling( const CTSLScopeAutoScaling &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  SpaceAbove( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceAbove" ))),
  SpaceBelow( *new CTSLScopeAutoScalingSpace( GetInstance(), _T( "SpaceBelow" ))),
  MaxHistory( GetInstance(), _T( "MaxHistory" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScaling::~CTSLScopeAutoScaling()
{
  delete &SpaceAbove;
  delete &SpaceBelow;
}
//------------------------------------------------------------------------------
inline CTSLScopeAutoScaling & CTSLScopeAutoScaling::operator = ( const CTSLScopeAutoScaling & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeAutoScaling::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisCursorSettings::CTSLDisplayAxisCursorSettings( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SnapToSample( GetInstance(), _T( "SnapToSample" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisCursorSettings::CTSLDisplayAxisCursorSettings( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SnapToSample( GetInstance(), _T( "SnapToSample" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisCursorSettings::CTSLDisplayAxisCursorSettings( CLPClassProperty *a_property, CTSLDisplayAxisCursorSettings ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  SnapToSample( GetInstance(), _T( "SnapToSample" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisCursorSettings::CTSLDisplayAxisCursorSettings( CLPClassProperty *a_property, CTSLDisplayAxisCursorSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayAxisCursorSettings ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  SnapToSample( GetInstance(), _T( "SnapToSample" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisCursorSettings::CTSLDisplayAxisCursorSettings( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayAxisCursorSettings ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  SnapToSample( GetInstance(), _T( "SnapToSample" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisCursorSettings::CTSLDisplayAxisCursorSettings( CLPBaseComponent *a_control, CTSLDisplayAxisCursorSettings ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  SnapToSample( GetInstance(), _T( "SnapToSample" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisCursorSettings::CTSLDisplayAxisCursorSettings( CLPBaseComponent *a_control, CTSLDisplayAxisCursorSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayAxisCursorSettings ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  SnapToSample( GetInstance(), _T( "SnapToSample" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisCursorSettings::CTSLDisplayAxisCursorSettings( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SnapToSample( GetInstance(), _T( "SnapToSample" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisCursorSettings::CTSLDisplayAxisCursorSettings( const CTSLDisplayAxisCursorSettings &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  SnapToSample( GetInstance(), _T( "SnapToSample" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisCursorSettings & CTSLDisplayAxisCursorSettings::operator = ( const CTSLDisplayAxisCursorSettings & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayAxisCursorSettings::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLToolBarPosition::CTSLToolBarPosition( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  HostView( GetInstance(), _T( "HostView" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLToolBarPosition::CTSLToolBarPosition( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  HostView( GetInstance(), _T( "HostView" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLToolBarPosition::CTSLToolBarPosition( CLPClassProperty *a_property, CTSLToolBarPosition ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  HostView( GetInstance(), _T( "HostView" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLToolBarPosition::CTSLToolBarPosition( CLPClassProperty *a_property, CTSLToolBarPosition ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLToolBarPosition ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  HostView( GetInstance(), _T( "HostView" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLToolBarPosition::CTSLToolBarPosition( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLToolBarPosition ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  HostView( GetInstance(), _T( "HostView" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLToolBarPosition::CTSLToolBarPosition( CLPBaseComponent *a_control, CTSLToolBarPosition ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  HostView( GetInstance(), _T( "HostView" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLToolBarPosition::CTSLToolBarPosition( CLPBaseComponent *a_control, CTSLToolBarPosition ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLToolBarPosition ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  HostView( GetInstance(), _T( "HostView" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLToolBarPosition::CTSLToolBarPosition( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  HostView( GetInstance(), _T( "HostView" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLToolBarPosition::CTSLToolBarPosition( const CTSLToolBarPosition &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  HostView( GetInstance(), _T( "HostView" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLToolBarPosition & CTSLToolBarPosition::operator = ( const CTSLToolBarPosition & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLToolBarPosition::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButtons::CTSLDisplayToolBarButtons( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Setup( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Setup" ))),
  Hold( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Hold" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomPrevious( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomPrevious" ))),
  ZoomNext( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomNext" ))),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomMode( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomMode" ))),
  XYZoomOn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "XYZoomOn" ))),
  Copy( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Copy" ))),
  Print( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Print" ))),
  Save( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Save" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButtons::CTSLDisplayToolBarButtons( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Setup( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Setup" ))),
  Hold( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Hold" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomPrevious( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomPrevious" ))),
  ZoomNext( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomNext" ))),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomMode( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomMode" ))),
  XYZoomOn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "XYZoomOn" ))),
  Copy( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Copy" ))),
  Print( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Print" ))),
  Save( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Save" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButtons::CTSLDisplayToolBarButtons( CLPClassProperty *a_property, CTSLDisplayToolBarButtons ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Setup( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Setup" ))),
  Hold( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Hold" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomPrevious( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomPrevious" ))),
  ZoomNext( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomNext" ))),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomMode( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomMode" ))),
  XYZoomOn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "XYZoomOn" ))),
  Copy( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Copy" ))),
  Print( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Print" ))),
  Save( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Save" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButtons::CTSLDisplayToolBarButtons( CLPClassProperty *a_property, CTSLDisplayToolBarButtons ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBarButtons ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Setup( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Setup" ))),
  Hold( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Hold" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomPrevious( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomPrevious" ))),
  ZoomNext( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomNext" ))),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomMode( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomMode" ))),
  XYZoomOn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "XYZoomOn" ))),
  Copy( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Copy" ))),
  Print( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Print" ))),
  Save( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Save" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButtons::CTSLDisplayToolBarButtons( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBarButtons ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Setup( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Setup" ))),
  Hold( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Hold" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomPrevious( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomPrevious" ))),
  ZoomNext( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomNext" ))),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomMode( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomMode" ))),
  XYZoomOn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "XYZoomOn" ))),
  Copy( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Copy" ))),
  Print( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Print" ))),
  Save( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Save" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButtons::CTSLDisplayToolBarButtons( CLPBaseComponent *a_control, CTSLDisplayToolBarButtons ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Setup( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Setup" ))),
  Hold( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Hold" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomPrevious( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomPrevious" ))),
  ZoomNext( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomNext" ))),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomMode( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomMode" ))),
  XYZoomOn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "XYZoomOn" ))),
  Copy( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Copy" ))),
  Print( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Print" ))),
  Save( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Save" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButtons::CTSLDisplayToolBarButtons( CLPBaseComponent *a_control, CTSLDisplayToolBarButtons ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBarButtons ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Setup( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Setup" ))),
  Hold( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Hold" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomPrevious( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomPrevious" ))),
  ZoomNext( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomNext" ))),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomMode( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomMode" ))),
  XYZoomOn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "XYZoomOn" ))),
  Copy( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Copy" ))),
  Print( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Print" ))),
  Save( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Save" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButtons::CTSLDisplayToolBarButtons( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Setup( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Setup" ))),
  Hold( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Hold" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomPrevious( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomPrevious" ))),
  ZoomNext( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomNext" ))),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomMode( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomMode" ))),
  XYZoomOn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "XYZoomOn" ))),
  Copy( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Copy" ))),
  Print( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Print" ))),
  Save( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Save" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButtons::CTSLDisplayToolBarButtons( const CTSLDisplayToolBarButtons &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Setup( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Setup" ))),
  Hold( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Hold" ))),
  ZoomOff( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOff" ))),
  ZoomPrevious( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomPrevious" ))),
  ZoomNext( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomNext" ))),
  ZoomIn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomIn" ))),
  ZoomOut( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomOut" ))),
  ZoomMode( *new CTSLDisplayToolBarButton( GetInstance(), _T( "ZoomMode" ))),
  XYZoomOn( *new CTSLDisplayToolBarButton( GetInstance(), _T( "XYZoomOn" ))),
  Copy( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Copy" ))),
  Print( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Print" ))),
  Save( *new CTSLDisplayToolBarButton( GetInstance(), _T( "Save" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButtons::~CTSLDisplayToolBarButtons()
{
  delete &Setup;
  delete &Hold;
  delete &ZoomOff;
  delete &ZoomPrevious;
  delete &ZoomNext;
  delete &ZoomIn;
  delete &ZoomOut;
  delete &ZoomMode;
  delete &XYZoomOn;
  delete &Copy;
  delete &Print;
  delete &Save;
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBarButtons & CTSLDisplayToolBarButtons::operator = ( const CTSLDisplayToolBarButtons & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayToolBarButtons::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBar::CTSLDisplayToolBar( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTSLToolBarPosition( GetInstance(), _T( "Position" ))),
  Buttons( *new CTSLDisplayToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBar::CTSLDisplayToolBar( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTSLToolBarPosition( GetInstance(), _T( "Position" ))),
  Buttons( *new CTSLDisplayToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBar::CTSLDisplayToolBar( CLPClassProperty *a_property, CTSLDisplayToolBar ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Position( *new CTSLToolBarPosition( GetInstance(), _T( "Position" ))),
  Buttons( *new CTSLDisplayToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBar::CTSLDisplayToolBar( CLPClassProperty *a_property, CTSLDisplayToolBar ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBar ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Position( *new CTSLToolBarPosition( GetInstance(), _T( "Position" ))),
  Buttons( *new CTSLDisplayToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBar::CTSLDisplayToolBar( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBar ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Position( *new CTSLToolBarPosition( GetInstance(), _T( "Position" ))),
  Buttons( *new CTSLDisplayToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBar::CTSLDisplayToolBar( CLPBaseComponent *a_control, CTSLDisplayToolBar ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Position( *new CTSLToolBarPosition( GetInstance(), _T( "Position" ))),
  Buttons( *new CTSLDisplayToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBar::CTSLDisplayToolBar( CLPBaseComponent *a_control, CTSLDisplayToolBar ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBar ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Position( *new CTSLToolBarPosition( GetInstance(), _T( "Position" ))),
  Buttons( *new CTSLDisplayToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBar::CTSLDisplayToolBar( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTSLToolBarPosition( GetInstance(), _T( "Position" ))),
  Buttons( *new CTSLDisplayToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBar::CTSLDisplayToolBar( const CTSLDisplayToolBar &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Position( *new CTSLToolBarPosition( GetInstance(), _T( "Position" ))),
  Buttons( *new CTSLDisplayToolBarButtons( GetInstance(), _T( "Buttons" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBar::~CTSLDisplayToolBar()
{
  delete &Position;
  delete &Buttons;
}
//------------------------------------------------------------------------------
inline CTSLDisplayToolBar & CTSLDisplayToolBar::operator = ( const CTSLDisplayToolBar & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayToolBar::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeYAxis::CTSLBasicScopeYAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Min( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Max" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  AutoScaling( *new CTSLScopeAutoScaling( GetInstance(), _T( "AutoScaling" ))),
  Reversed( GetInstance(), _T( "Reversed" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeYAxis::CTSLBasicScopeYAxis( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Min( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Max" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  AutoScaling( *new CTSLScopeAutoScaling( GetInstance(), _T( "AutoScaling" ))),
  Reversed( GetInstance(), _T( "Reversed" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeYAxis::CTSLBasicScopeYAxis( CLPClassProperty *a_property, CTSLBasicScopeYAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Min( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Max" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  AutoScaling( *new CTSLScopeAutoScaling( GetInstance(), _T( "AutoScaling" ))),
  Reversed( GetInstance(), _T( "Reversed" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeYAxis::CTSLBasicScopeYAxis( CLPClassProperty *a_property, CTSLBasicScopeYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicScopeYAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Min( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Max" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  AutoScaling( *new CTSLScopeAutoScaling( GetInstance(), _T( "AutoScaling" ))),
  Reversed( GetInstance(), _T( "Reversed" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeYAxis::CTSLBasicScopeYAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicScopeYAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Min( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Max" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  AutoScaling( *new CTSLScopeAutoScaling( GetInstance(), _T( "AutoScaling" ))),
  Reversed( GetInstance(), _T( "Reversed" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeYAxis::CTSLBasicScopeYAxis( CLPBaseComponent *a_control, CTSLBasicScopeYAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Min( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Max" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  AutoScaling( *new CTSLScopeAutoScaling( GetInstance(), _T( "AutoScaling" ))),
  Reversed( GetInstance(), _T( "Reversed" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeYAxis::CTSLBasicScopeYAxis( CLPBaseComponent *a_control, CTSLBasicScopeYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicScopeYAxis ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Min( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Max" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  AutoScaling( *new CTSLScopeAutoScaling( GetInstance(), _T( "AutoScaling" ))),
  Reversed( GetInstance(), _T( "Reversed" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeYAxis::CTSLBasicScopeYAxis( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Min( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Max" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  AutoScaling( *new CTSLScopeAutoScaling( GetInstance(), _T( "AutoScaling" ))),
  Reversed( GetInstance(), _T( "Reversed" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeYAxis::CTSLBasicScopeYAxis( const CTSLBasicScopeYAxis &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Min( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLBasicScopeAxisValue( GetInstance(), _T( "Max" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  AutoScaling( *new CTSLScopeAutoScaling( GetInstance(), _T( "AutoScaling" ))),
  Reversed( GetInstance(), _T( "Reversed" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeYAxis::~CTSLBasicScopeYAxis()
{
  delete &Min;
  delete &Max;
  delete &AutoScaling;
  delete &CursorSettings;
  delete &Zooming;
  delete &DataView;
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeYAxis & CTSLBasicScopeYAxis::operator = ( const CTSLBasicScopeYAxis & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLBasicScopeYAxis::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTSLBasicScopeYAxis::ZoomBy( double AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicScopeYAxis@ZoomBy$qqrd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLBasicScopeYAxis::ZoomBy( double AValue, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicScopeYAxis@ZoomBy$qqrdo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;
    unsigned char __1_Param2 = (unsigned char)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  dl,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLBasicScopeYAxis::ZoomTo( double AMin, double AMax )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicScopeYAxis@ZoomTo$qqrdd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = AMax;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLBasicScopeYAxis::ZoomTo( double AMin, double AMax, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicScopeYAxis@ZoomTo$qqrddo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = AMax;
    int __1_Param3 = (int)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  edx,__1_Param3
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLBasicScopeYAxis::ZoomToData( double AMin, double AMax )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicScopeYAxis@ZoomToData$qqrdd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = AMax;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLBasicScopeYAxis::ZoomToData( double AMin, double AMax, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicScopeYAxis@ZoomToData$qqrddo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = AMax;
    int __1_Param3 = (int)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  edx,__1_Param3
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeYAxis::CTSLAdditionalScopeYAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeYAxis::CTSLAdditionalScopeYAxis( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeYAxis::CTSLAdditionalScopeYAxis( CLPClassProperty *a_property, CTSLAdditionalScopeYAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeYAxis::CTSLAdditionalScopeYAxis( CLPClassProperty *a_property, CTSLAdditionalScopeYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAdditionalScopeYAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeYAxis::CTSLAdditionalScopeYAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAdditionalScopeYAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeYAxis::CTSLAdditionalScopeYAxis( CLPBaseComponent *a_control, CTSLAdditionalScopeYAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeYAxis::CTSLAdditionalScopeYAxis( CLPBaseComponent *a_control, CTSLAdditionalScopeYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAdditionalScopeYAxis ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeYAxis::CTSLAdditionalScopeYAxis( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeYAxis::CTSLAdditionalScopeYAxis( const CTSLAdditionalScopeYAxis &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeYAxis & CTSLAdditionalScopeYAxis::operator = ( const CTSLAdditionalScopeYAxis & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLAdditionalScopeYAxis::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollectionItem::CTSLScopeYAxesCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Axis( *new CTSLAdditionalScopeYAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollectionItem::CTSLScopeYAxesCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Axis( *new CTSLAdditionalScopeYAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollectionItem::CTSLScopeYAxesCollectionItem( CLPClassProperty *a_property, CTSLScopeYAxesCollectionItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Axis( *new CTSLAdditionalScopeYAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollectionItem::CTSLScopeYAxesCollectionItem( CLPClassProperty *a_property, CTSLScopeYAxesCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeYAxesCollectionItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Axis( *new CTSLAdditionalScopeYAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollectionItem::CTSLScopeYAxesCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeYAxesCollectionItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Axis( *new CTSLAdditionalScopeYAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollectionItem::CTSLScopeYAxesCollectionItem( CLPBaseComponent *a_control, CTSLScopeYAxesCollectionItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Axis( *new CTSLAdditionalScopeYAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollectionItem::CTSLScopeYAxesCollectionItem( CLPBaseComponent *a_control, CTSLScopeYAxesCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeYAxesCollectionItem ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Axis( *new CTSLAdditionalScopeYAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollectionItem::CTSLScopeYAxesCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Axis( *new CTSLAdditionalScopeYAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollectionItem::CTSLScopeYAxesCollectionItem( const CTSLScopeYAxesCollectionItem &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Axis( *new CTSLAdditionalScopeYAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollectionItem::~CTSLScopeYAxesCollectionItem()
{
  delete &Axis;
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollectionItem & CTSLScopeYAxesCollectionItem::operator = ( const CTSLScopeYAxesCollectionItem & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeYAxesCollectionItem::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollection::CTSLScopeYAxesCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollection::CTSLScopeYAxesCollection( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollection::CTSLScopeYAxesCollection( CLPClassProperty *a_property, CTSLScopeYAxesCollection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollection::CTSLScopeYAxesCollection( CLPClassProperty *a_property, CTSLScopeYAxesCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeYAxesCollection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollection::CTSLScopeYAxesCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeYAxesCollection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollection::CTSLScopeYAxesCollection( CLPBaseComponent *a_control, CTSLScopeYAxesCollection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollection::CTSLScopeYAxesCollection( CLPBaseComponent *a_control, CTSLScopeYAxesCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeYAxesCollection ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollection::CTSLScopeYAxesCollection( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollection::CTSLScopeYAxesCollection( const CTSLScopeYAxesCollection &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxesCollection & CTSLScopeYAxesCollection::operator = ( const CTSLScopeYAxesCollection & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeYAxesCollection::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxis::CTSLScopeYAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AdditionalAxes( *new CTSLScopeYAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxis::CTSLScopeYAxis( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AdditionalAxes( *new CTSLScopeYAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxis::CTSLScopeYAxis( CLPClassProperty *a_property, CTSLScopeYAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  AdditionalAxes( *new CTSLScopeYAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxis::CTSLScopeYAxis( CLPClassProperty *a_property, CTSLScopeYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeYAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AdditionalAxes( *new CTSLScopeYAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxis::CTSLScopeYAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeYAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AdditionalAxes( *new CTSLScopeYAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxis::CTSLScopeYAxis( CLPBaseComponent *a_control, CTSLScopeYAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  AdditionalAxes( *new CTSLScopeYAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxis::CTSLScopeYAxis( CLPBaseComponent *a_control, CTSLScopeYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeYAxis ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  AdditionalAxes( *new CTSLScopeYAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxis::CTSLScopeYAxis( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AdditionalAxes( *new CTSLScopeYAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxis::CTSLScopeYAxis( const CTSLScopeYAxis &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AdditionalAxes( *new CTSLScopeYAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxis::~CTSLScopeYAxis()
{
  delete &AdditionalAxes;
}
//------------------------------------------------------------------------------
inline CTSLScopeYAxis & CTSLScopeYAxis::operator = ( const CTSLScopeYAxis & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeYAxis::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayXAxis::CTSLDisplayXAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Samples( (CTSLDisplayXAxis *)GetInstance(), &CTSLDisplayXAxis::GetVC_Samples)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayXAxis::CTSLDisplayXAxis( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Samples( (CTSLDisplayXAxis *)GetInstance(), &CTSLDisplayXAxis::GetVC_Samples)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayXAxis::CTSLDisplayXAxis( CLPClassProperty *a_property, CTSLDisplayXAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Samples( (CTSLDisplayXAxis *)GetInstance(), &CTSLDisplayXAxis::GetVC_Samples)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayXAxis::CTSLDisplayXAxis( CLPClassProperty *a_property, CTSLDisplayXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayXAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Samples( (CTSLDisplayXAxis *)GetInstance(), &CTSLDisplayXAxis::GetVC_Samples)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayXAxis::CTSLDisplayXAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayXAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Samples( (CTSLDisplayXAxis *)GetInstance(), &CTSLDisplayXAxis::GetVC_Samples)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayXAxis::CTSLDisplayXAxis( CLPBaseComponent *a_control, CTSLDisplayXAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Samples( (CTSLDisplayXAxis *)GetInstance(), &CTSLDisplayXAxis::GetVC_Samples)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayXAxis::CTSLDisplayXAxis( CLPBaseComponent *a_control, CTSLDisplayXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayXAxis ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Samples( (CTSLDisplayXAxis *)GetInstance(), &CTSLDisplayXAxis::GetVC_Samples)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayXAxis::CTSLDisplayXAxis( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Samples( (CTSLDisplayXAxis *)GetInstance(), &CTSLDisplayXAxis::GetVC_Samples)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayXAxis::CTSLDisplayXAxis( const CTSLDisplayXAxis &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Samples( (CTSLDisplayXAxis *)GetInstance(), &CTSLDisplayXAxis::GetVC_Samples)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayXAxis & CTSLDisplayXAxis::operator = ( const CTSLDisplayXAxis & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayXAxis::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline int CTSLDisplayXAxis::GetVC_Samples()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayXAxis@GetVC_Samples$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLBasicAxisValue::CTSLBasicAxisValue( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicAxisValue::CTSLBasicAxisValue( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicAxisValue::CTSLBasicAxisValue( CLPClassProperty *a_property, CTSLBasicAxisValue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicAxisValue::CTSLBasicAxisValue( CLPClassProperty *a_property, CTSLBasicAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicAxisValue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicAxisValue::CTSLBasicAxisValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicAxisValue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicAxisValue::CTSLBasicAxisValue( CLPBaseComponent *a_control, CTSLBasicAxisValue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicAxisValue::CTSLBasicAxisValue( CLPBaseComponent *a_control, CTSLBasicAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicAxisValue ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicAxisValue::CTSLBasicAxisValue( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicAxisValue::CTSLBasicAxisValue( const CTSLBasicAxisValue &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLBasicAxisValue & CTSLBasicAxisValue::operator = ( const CTSLBasicAxisValue & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLBasicAxisValue::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayPersistent::CTSLDisplayPersistent( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayPersistent::CTSLDisplayPersistent( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayPersistent::CTSLDisplayPersistent( CLPClassProperty *a_property, CTSLDisplayPersistent ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayPersistent::CTSLDisplayPersistent( CLPClassProperty *a_property, CTSLDisplayPersistent ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayPersistent ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayPersistent::CTSLDisplayPersistent( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayPersistent ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayPersistent::CTSLDisplayPersistent( CLPBaseComponent *a_control, CTSLDisplayPersistent ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayPersistent::CTSLDisplayPersistent( CLPBaseComponent *a_control, CTSLDisplayPersistent ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayPersistent ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayPersistent::CTSLDisplayPersistent( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayPersistent::CTSLDisplayPersistent( const CTSLDisplayPersistent &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayPersistent & CTSLDisplayPersistent::operator = ( const CTSLDisplayPersistent & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayPersistent::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayOptionalValue::CTSLDisplayOptionalValue( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Value( GetInstance(), _T( "Value" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayOptionalValue::CTSLDisplayOptionalValue( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Value( GetInstance(), _T( "Value" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayOptionalValue::CTSLDisplayOptionalValue( CLPClassProperty *a_property, CTSLDisplayOptionalValue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Value( GetInstance(), _T( "Value" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayOptionalValue::CTSLDisplayOptionalValue( CLPClassProperty *a_property, CTSLDisplayOptionalValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayOptionalValue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Value( GetInstance(), _T( "Value" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayOptionalValue::CTSLDisplayOptionalValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayOptionalValue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Value( GetInstance(), _T( "Value" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayOptionalValue::CTSLDisplayOptionalValue( CLPBaseComponent *a_control, CTSLDisplayOptionalValue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Value( GetInstance(), _T( "Value" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayOptionalValue::CTSLDisplayOptionalValue( CLPBaseComponent *a_control, CTSLDisplayOptionalValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayOptionalValue ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Value( GetInstance(), _T( "Value" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayOptionalValue::CTSLDisplayOptionalValue( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Value( GetInstance(), _T( "Value" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayOptionalValue::CTSLDisplayOptionalValue( const CTSLDisplayOptionalValue &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Value( GetInstance(), _T( "Value" ) ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayOptionalValue & CTSLDisplayOptionalValue::operator = ( const CTSLDisplayOptionalValue & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayOptionalValue::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayValueRange::CTSLDisplayValueRange( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  High( *new CTSLDisplayOptionalValue( GetInstance(), _T( "High" ))),
  Low( *new CTSLDisplayOptionalValue( GetInstance(), _T( "Low" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayValueRange::CTSLDisplayValueRange( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  High( *new CTSLDisplayOptionalValue( GetInstance(), _T( "High" ))),
  Low( *new CTSLDisplayOptionalValue( GetInstance(), _T( "Low" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayValueRange::CTSLDisplayValueRange( CLPClassProperty *a_property, CTSLDisplayValueRange ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  High( *new CTSLDisplayOptionalValue( GetInstance(), _T( "High" ))),
  Low( *new CTSLDisplayOptionalValue( GetInstance(), _T( "Low" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayValueRange::CTSLDisplayValueRange( CLPClassProperty *a_property, CTSLDisplayValueRange ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayValueRange ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  High( *new CTSLDisplayOptionalValue( GetInstance(), _T( "High" ))),
  Low( *new CTSLDisplayOptionalValue( GetInstance(), _T( "Low" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayValueRange::CTSLDisplayValueRange( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayValueRange ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  High( *new CTSLDisplayOptionalValue( GetInstance(), _T( "High" ))),
  Low( *new CTSLDisplayOptionalValue( GetInstance(), _T( "Low" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayValueRange::CTSLDisplayValueRange( CLPBaseComponent *a_control, CTSLDisplayValueRange ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  High( *new CTSLDisplayOptionalValue( GetInstance(), _T( "High" ))),
  Low( *new CTSLDisplayOptionalValue( GetInstance(), _T( "Low" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayValueRange::CTSLDisplayValueRange( CLPBaseComponent *a_control, CTSLDisplayValueRange ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayValueRange ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  High( *new CTSLDisplayOptionalValue( GetInstance(), _T( "High" ))),
  Low( *new CTSLDisplayOptionalValue( GetInstance(), _T( "Low" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayValueRange::CTSLDisplayValueRange( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  High( *new CTSLDisplayOptionalValue( GetInstance(), _T( "High" ))),
  Low( *new CTSLDisplayOptionalValue( GetInstance(), _T( "Low" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayValueRange::CTSLDisplayValueRange( const CTSLDisplayValueRange &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  High( *new CTSLDisplayOptionalValue( GetInstance(), _T( "High" ))),
  Low( *new CTSLDisplayOptionalValue( GetInstance(), _T( "Low" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayValueRange::~CTSLDisplayValueRange()
{
  delete &High;
  delete &Low;
}
//------------------------------------------------------------------------------
inline CTSLDisplayValueRange & CTSLDisplayValueRange::operator = ( const CTSLDisplayValueRange & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayValueRange::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeAxisValue::CTSLBasicScopeAxisValue( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeAxisValue::CTSLBasicScopeAxisValue( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeAxisValue::CTSLBasicScopeAxisValue( CLPClassProperty *a_property, CTSLBasicScopeAxisValue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeAxisValue::CTSLBasicScopeAxisValue( CLPClassProperty *a_property, CTSLBasicScopeAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicScopeAxisValue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeAxisValue::CTSLBasicScopeAxisValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicScopeAxisValue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeAxisValue::CTSLBasicScopeAxisValue( CLPBaseComponent *a_control, CTSLBasicScopeAxisValue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeAxisValue::CTSLBasicScopeAxisValue( CLPBaseComponent *a_control, CTSLBasicScopeAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicScopeAxisValue ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeAxisValue::CTSLBasicScopeAxisValue( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeAxisValue::CTSLBasicScopeAxisValue( const CTSLBasicScopeAxisValue &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeAxisValue::~CTSLBasicScopeAxisValue()
{
  delete &Range;
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeAxisValue & CTSLBasicScopeAxisValue::operator = ( const CTSLBasicScopeAxisValue & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLBasicScopeAxisValue::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeAxisValue::CTSLScopeAxisValue( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Tick( *new CTSLBasicAxisValue( GetInstance(), _T( "Tick" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAxisValue::CTSLScopeAxisValue( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Tick( *new CTSLBasicAxisValue( GetInstance(), _T( "Tick" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAxisValue::CTSLScopeAxisValue( CLPClassProperty *a_property, CTSLScopeAxisValue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Tick( *new CTSLBasicAxisValue( GetInstance(), _T( "Tick" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAxisValue::CTSLScopeAxisValue( CLPClassProperty *a_property, CTSLScopeAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeAxisValue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Tick( *new CTSLBasicAxisValue( GetInstance(), _T( "Tick" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAxisValue::CTSLScopeAxisValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeAxisValue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Tick( *new CTSLBasicAxisValue( GetInstance(), _T( "Tick" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAxisValue::CTSLScopeAxisValue( CLPBaseComponent *a_control, CTSLScopeAxisValue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Tick( *new CTSLBasicAxisValue( GetInstance(), _T( "Tick" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAxisValue::CTSLScopeAxisValue( CLPBaseComponent *a_control, CTSLScopeAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeAxisValue ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Tick( *new CTSLBasicAxisValue( GetInstance(), _T( "Tick" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAxisValue::CTSLScopeAxisValue( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Tick( *new CTSLBasicAxisValue( GetInstance(), _T( "Tick" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAxisValue::CTSLScopeAxisValue( const CTSLScopeAxisValue &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Tick( *new CTSLBasicAxisValue( GetInstance(), _T( "Tick" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeAxisValue::~CTSLScopeAxisValue()
{
  delete &Tick;
}
//------------------------------------------------------------------------------
inline CTSLScopeAxisValue & CTSLScopeAxisValue::operator = ( const CTSLScopeAxisValue & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeAxisValue::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLMaxScopeAxisValue::CTSLMaxScopeAxisValue( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMaxScopeAxisValue::CTSLMaxScopeAxisValue( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMaxScopeAxisValue::CTSLMaxScopeAxisValue( CLPClassProperty *a_property, CTSLMaxScopeAxisValue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMaxScopeAxisValue::CTSLMaxScopeAxisValue( CLPClassProperty *a_property, CTSLMaxScopeAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMaxScopeAxisValue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMaxScopeAxisValue::CTSLMaxScopeAxisValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLMaxScopeAxisValue ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMaxScopeAxisValue::CTSLMaxScopeAxisValue( CLPBaseComponent *a_control, CTSLMaxScopeAxisValue ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMaxScopeAxisValue::CTSLMaxScopeAxisValue( CLPBaseComponent *a_control, CTSLMaxScopeAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMaxScopeAxisValue ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMaxScopeAxisValue::CTSLMaxScopeAxisValue( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMaxScopeAxisValue::CTSLMaxScopeAxisValue( const CTSLMaxScopeAxisValue &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Mode( GetInstance(), _T( "Mode" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLMaxScopeAxisValue & CTSLMaxScopeAxisValue::operator = ( const CTSLMaxScopeAxisValue & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLMaxScopeAxisValue::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeMaxSample::CTSLScopeMaxSample( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Autosize( GetInstance(), _T( "Autosize" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMaxSample::CTSLScopeMaxSample( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Autosize( GetInstance(), _T( "Autosize" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMaxSample::CTSLScopeMaxSample( CLPClassProperty *a_property, CTSLScopeMaxSample ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Autosize( GetInstance(), _T( "Autosize" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMaxSample::CTSLScopeMaxSample( CLPClassProperty *a_property, CTSLScopeMaxSample ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMaxSample ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Autosize( GetInstance(), _T( "Autosize" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMaxSample::CTSLScopeMaxSample( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeMaxSample ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Autosize( GetInstance(), _T( "Autosize" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMaxSample::CTSLScopeMaxSample( CLPBaseComponent *a_control, CTSLScopeMaxSample ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Autosize( GetInstance(), _T( "Autosize" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMaxSample::CTSLScopeMaxSample( CLPBaseComponent *a_control, CTSLScopeMaxSample ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMaxSample ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Autosize( GetInstance(), _T( "Autosize" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMaxSample::CTSLScopeMaxSample( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Autosize( GetInstance(), _T( "Autosize" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMaxSample::CTSLScopeMaxSample( const CTSLScopeMaxSample &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Autosize( GetInstance(), _T( "Autosize" ) ),
  Value( GetInstance(), _T( "Value" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeMaxSample & CTSLScopeMaxSample::operator = ( const CTSLScopeMaxSample & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeMaxSample::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxisUnitScale::CTSLScopeXAxisUnitScale( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Exponent( GetInstance(), _T( "Exponent" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxisUnitScale::CTSLScopeXAxisUnitScale( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Exponent( GetInstance(), _T( "Exponent" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxisUnitScale::CTSLScopeXAxisUnitScale( CLPClassProperty *a_property, CTSLScopeXAxisUnitScale ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Exponent( GetInstance(), _T( "Exponent" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxisUnitScale::CTSLScopeXAxisUnitScale( CLPClassProperty *a_property, CTSLScopeXAxisUnitScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxisUnitScale ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Exponent( GetInstance(), _T( "Exponent" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxisUnitScale::CTSLScopeXAxisUnitScale( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeXAxisUnitScale ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Exponent( GetInstance(), _T( "Exponent" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxisUnitScale::CTSLScopeXAxisUnitScale( CLPBaseComponent *a_control, CTSLScopeXAxisUnitScale ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Exponent( GetInstance(), _T( "Exponent" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxisUnitScale::CTSLScopeXAxisUnitScale( CLPBaseComponent *a_control, CTSLScopeXAxisUnitScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxisUnitScale ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Exponent( GetInstance(), _T( "Exponent" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxisUnitScale::CTSLScopeXAxisUnitScale( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Exponent( GetInstance(), _T( "Exponent" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxisUnitScale::CTSLScopeXAxisUnitScale( const CTSLScopeXAxisUnitScale &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoScale( GetInstance(), _T( "AutoScale" ) ),
  Exponent( GetInstance(), _T( "Exponent" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxisUnitScale & CTSLScopeXAxisUnitScale::operator = ( const CTSLScopeXAxisUnitScale & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeXAxisUnitScale::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisZoom::CTSLDisplayAxisZoom( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" ))),
  Max( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMax),
  Min( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMin),
  IsZoomed( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisZoom::CTSLDisplayAxisZoom( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" ))),
  Max( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMax),
  Min( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMin),
  IsZoomed( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisZoom::CTSLDisplayAxisZoom( CLPClassProperty *a_property, CTSLDisplayAxisZoom ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" ))),
  Max( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMax),
  Min( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMin),
  IsZoomed( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisZoom::CTSLDisplayAxisZoom( CLPClassProperty *a_property, CTSLDisplayAxisZoom ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayAxisZoom ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" ))),
  Max( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMax),
  Min( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMin),
  IsZoomed( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisZoom::CTSLDisplayAxisZoom( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayAxisZoom ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" ))),
  Max( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMax),
  Min( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMin),
  IsZoomed( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisZoom::CTSLDisplayAxisZoom( CLPBaseComponent *a_control, CTSLDisplayAxisZoom ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" ))),
  Max( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMax),
  Min( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMin),
  IsZoomed( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisZoom::CTSLDisplayAxisZoom( CLPBaseComponent *a_control, CTSLDisplayAxisZoom ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayAxisZoom ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" ))),
  Max( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMax),
  Min( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMin),
  IsZoomed( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisZoom::CTSLDisplayAxisZoom( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" ))),
  Max( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMax),
  Min( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMin),
  IsZoomed( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisZoom::CTSLDisplayAxisZoom( const CTSLDisplayAxisZoom &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Range( *new CTSLDisplayValueRange( GetInstance(), _T( "Range" ))),
  Max( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMax),
  Min( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetMin),
  IsZoomed( (CTSLDisplayAxisZoom *)GetInstance(), &CTSLDisplayAxisZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisZoom::~CTSLDisplayAxisZoom()
{
  delete &Range;
}
//------------------------------------------------------------------------------
inline CTSLDisplayAxisZoom & CTSLDisplayAxisZoom::operator = ( const CTSLDisplayAxisZoom & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayAxisZoom::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline double CTSLDisplayAxisZoom::GetMax()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayAxisZoom@GetMax$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline double CTSLDisplayAxisZoom::GetMin()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayAxisZoom@GetMin$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline bool CTSLDisplayAxisZoom::GetIsZoomed()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayAxisZoom@GetIsZoomed$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLBasicScopeXAxis::CTSLBasicScopeXAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" ))),
  TicksMode( GetInstance(), _T( "TicksMode" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  UnitScale( *new CTSLScopeXAxisUnitScale( GetInstance(), _T( "UnitScale" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  Min( *new CTSLScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLMaxScopeAxisValue( GetInstance(), _T( "Max" ))),
  MaxSample( *new CTSLScopeMaxSample( GetInstance(), _T( "MaxSample" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeXAxis::CTSLBasicScopeXAxis( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" ))),
  TicksMode( GetInstance(), _T( "TicksMode" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  UnitScale( *new CTSLScopeXAxisUnitScale( GetInstance(), _T( "UnitScale" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  Min( *new CTSLScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLMaxScopeAxisValue( GetInstance(), _T( "Max" ))),
  MaxSample( *new CTSLScopeMaxSample( GetInstance(), _T( "MaxSample" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeXAxis::CTSLBasicScopeXAxis( CLPClassProperty *a_property, CTSLBasicScopeXAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" ))),
  TicksMode( GetInstance(), _T( "TicksMode" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  UnitScale( *new CTSLScopeXAxisUnitScale( GetInstance(), _T( "UnitScale" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  Min( *new CTSLScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLMaxScopeAxisValue( GetInstance(), _T( "Max" ))),
  MaxSample( *new CTSLScopeMaxSample( GetInstance(), _T( "MaxSample" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeXAxis::CTSLBasicScopeXAxis( CLPClassProperty *a_property, CTSLBasicScopeXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicScopeXAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" ))),
  TicksMode( GetInstance(), _T( "TicksMode" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  UnitScale( *new CTSLScopeXAxisUnitScale( GetInstance(), _T( "UnitScale" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  Min( *new CTSLScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLMaxScopeAxisValue( GetInstance(), _T( "Max" ))),
  MaxSample( *new CTSLScopeMaxSample( GetInstance(), _T( "MaxSample" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeXAxis::CTSLBasicScopeXAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicScopeXAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" ))),
  TicksMode( GetInstance(), _T( "TicksMode" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  UnitScale( *new CTSLScopeXAxisUnitScale( GetInstance(), _T( "UnitScale" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  Min( *new CTSLScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLMaxScopeAxisValue( GetInstance(), _T( "Max" ))),
  MaxSample( *new CTSLScopeMaxSample( GetInstance(), _T( "MaxSample" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeXAxis::CTSLBasicScopeXAxis( CLPBaseComponent *a_control, CTSLBasicScopeXAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" ))),
  TicksMode( GetInstance(), _T( "TicksMode" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  UnitScale( *new CTSLScopeXAxisUnitScale( GetInstance(), _T( "UnitScale" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  Min( *new CTSLScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLMaxScopeAxisValue( GetInstance(), _T( "Max" ))),
  MaxSample( *new CTSLScopeMaxSample( GetInstance(), _T( "MaxSample" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeXAxis::CTSLBasicScopeXAxis( CLPBaseComponent *a_control, CTSLBasicScopeXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicScopeXAxis ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" ))),
  TicksMode( GetInstance(), _T( "TicksMode" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  UnitScale( *new CTSLScopeXAxisUnitScale( GetInstance(), _T( "UnitScale" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  Min( *new CTSLScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLMaxScopeAxisValue( GetInstance(), _T( "Max" ))),
  MaxSample( *new CTSLScopeMaxSample( GetInstance(), _T( "MaxSample" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeXAxis::CTSLBasicScopeXAxis( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" ))),
  TicksMode( GetInstance(), _T( "TicksMode" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  UnitScale( *new CTSLScopeXAxisUnitScale( GetInstance(), _T( "UnitScale" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  Min( *new CTSLScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLMaxScopeAxisValue( GetInstance(), _T( "Max" ))),
  MaxSample( *new CTSLScopeMaxSample( GetInstance(), _T( "MaxSample" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeXAxis::CTSLBasicScopeXAxis( const CTSLBasicScopeXAxis &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Format( *new CTSLAxisFormat( GetInstance(), _T( "Format" ))),
  TicksMode( GetInstance(), _T( "TicksMode" ) ),
  CursorSettings( *new CTSLDisplayAxisCursorSettings( GetInstance(), _T( "CursorSettings" ))),
  UnitScale( *new CTSLScopeXAxisUnitScale( GetInstance(), _T( "UnitScale" ))),
  ScaleMode( GetInstance(), _T( "ScaleMode" ) ),
  Min( *new CTSLScopeAxisValue( GetInstance(), _T( "Min" ))),
  Max( *new CTSLMaxScopeAxisValue( GetInstance(), _T( "Max" ))),
  MaxSample( *new CTSLScopeMaxSample( GetInstance(), _T( "MaxSample" ))),
  Zooming( *new CTSLDisplayAxisZoom( GetInstance(), _T( "Zooming" ))),
  DataView( *new CTSLDisplayGridDirectionalLinesSettings( GetInstance(), _T( "DataView" )))
{
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeXAxis::~CTSLBasicScopeXAxis()
{
  delete &Format;
  delete &CursorSettings;
  delete &UnitScale;
  delete &Min;
  delete &Max;
  delete &MaxSample;
  delete &Zooming;
  delete &DataView;
}
//------------------------------------------------------------------------------
inline CTSLBasicScopeXAxis & CTSLBasicScopeXAxis::operator = ( const CTSLBasicScopeXAxis & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLBasicScopeXAxis::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTSLBasicScopeXAxis::ZoomBy( double AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicScopeXAxis@ZoomBy$qqrd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLBasicScopeXAxis::ZoomBy( double AValue, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicScopeXAxis@ZoomBy$qqrdo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;
    unsigned char __1_Param2 = (unsigned char)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  dl,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLBasicScopeXAxis::ZoomTo( double AMin, double AMax )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicScopeXAxis@ZoomTo$qqrdd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = AMax;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLBasicScopeXAxis::ZoomTo( double AMin, double AMax, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicScopeXAxis@ZoomTo$qqrddo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = AMax;
    int __1_Param3 = (int)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  edx,__1_Param3
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLBasicScopeXAxis::ZoomToData( double AMin, double AMax )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicScopeXAxis@ZoomToData$qqrdd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = AMax;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLBasicScopeXAxis::ZoomToData( double AMin, double AMax, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLBasicScopeXAxis@ZoomToData$qqrddo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = AMax;
    int __1_Param3 = (int)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  edx,__1_Param3
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeXAxis::CTSLAdditionalScopeXAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeXAxis::CTSLAdditionalScopeXAxis( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeXAxis::CTSLAdditionalScopeXAxis( CLPClassProperty *a_property, CTSLAdditionalScopeXAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeXAxis::CTSLAdditionalScopeXAxis( CLPClassProperty *a_property, CTSLAdditionalScopeXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAdditionalScopeXAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeXAxis::CTSLAdditionalScopeXAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAdditionalScopeXAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeXAxis::CTSLAdditionalScopeXAxis( CLPBaseComponent *a_control, CTSLAdditionalScopeXAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeXAxis::CTSLAdditionalScopeXAxis( CLPBaseComponent *a_control, CTSLAdditionalScopeXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAdditionalScopeXAxis ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeXAxis::CTSLAdditionalScopeXAxis( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeXAxis::CTSLAdditionalScopeXAxis( const CTSLAdditionalScopeXAxis &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLAdditionalScopeXAxis & CTSLAdditionalScopeXAxis::operator = ( const CTSLAdditionalScopeXAxis & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLAdditionalScopeXAxis::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollectionItem::CTSLScopeXAxesCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Axis( *new CTSLAdditionalScopeXAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollectionItem::CTSLScopeXAxesCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Axis( *new CTSLAdditionalScopeXAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollectionItem::CTSLScopeXAxesCollectionItem( CLPClassProperty *a_property, CTSLScopeXAxesCollectionItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Axis( *new CTSLAdditionalScopeXAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollectionItem::CTSLScopeXAxesCollectionItem( CLPClassProperty *a_property, CTSLScopeXAxesCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxesCollectionItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Axis( *new CTSLAdditionalScopeXAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollectionItem::CTSLScopeXAxesCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeXAxesCollectionItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Axis( *new CTSLAdditionalScopeXAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollectionItem::CTSLScopeXAxesCollectionItem( CLPBaseComponent *a_control, CTSLScopeXAxesCollectionItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Axis( *new CTSLAdditionalScopeXAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollectionItem::CTSLScopeXAxesCollectionItem( CLPBaseComponent *a_control, CTSLScopeXAxesCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxesCollectionItem ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Axis( *new CTSLAdditionalScopeXAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollectionItem::CTSLScopeXAxesCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Axis( *new CTSLAdditionalScopeXAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollectionItem::CTSLScopeXAxesCollectionItem( const CTSLScopeXAxesCollectionItem &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Axis( *new CTSLAdditionalScopeXAxis( GetInstance(), _T( "Axis" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollectionItem::~CTSLScopeXAxesCollectionItem()
{
  delete &Axis;
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollectionItem & CTSLScopeXAxesCollectionItem::operator = ( const CTSLScopeXAxesCollectionItem & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeXAxesCollectionItem::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollection::CTSLScopeXAxesCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollection::CTSLScopeXAxesCollection( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollection::CTSLScopeXAxesCollection( CLPClassProperty *a_property, CTSLScopeXAxesCollection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollection::CTSLScopeXAxesCollection( CLPClassProperty *a_property, CTSLScopeXAxesCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxesCollection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollection::CTSLScopeXAxesCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeXAxesCollection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollection::CTSLScopeXAxesCollection( CLPBaseComponent *a_control, CTSLScopeXAxesCollection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollection::CTSLScopeXAxesCollection( CLPBaseComponent *a_control, CTSLScopeXAxesCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxesCollection ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollection::CTSLScopeXAxesCollection( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollection::CTSLScopeXAxesCollection( const CTSLScopeXAxesCollection &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxesCollection & CTSLScopeXAxesCollection::operator = ( const CTSLScopeXAxesCollection & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeXAxesCollection::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxis::CTSLScopeXAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AdditionalAxes( *new CTSLScopeXAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxis::CTSLScopeXAxis( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AdditionalAxes( *new CTSLScopeXAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxis::CTSLScopeXAxis( CLPClassProperty *a_property, CTSLScopeXAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  AdditionalAxes( *new CTSLScopeXAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxis::CTSLScopeXAxis( CLPClassProperty *a_property, CTSLScopeXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AdditionalAxes( *new CTSLScopeXAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxis::CTSLScopeXAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeXAxis ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AdditionalAxes( *new CTSLScopeXAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxis::CTSLScopeXAxis( CLPBaseComponent *a_control, CTSLScopeXAxis ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  AdditionalAxes( *new CTSLScopeXAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxis::CTSLScopeXAxis( CLPBaseComponent *a_control, CTSLScopeXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxis ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  AdditionalAxes( *new CTSLScopeXAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxis::CTSLScopeXAxis( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AdditionalAxes( *new CTSLScopeXAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxis::CTSLScopeXAxis( const CTSLScopeXAxis &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AdditionalAxes( *new CTSLScopeXAxesCollection( GetInstance(), _T( "AdditionalAxes" )))
{
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxis::~CTSLScopeXAxis()
{
  delete &AdditionalAxes;
}
//------------------------------------------------------------------------------
inline CTSLScopeXAxis & CTSLScopeXAxis::operator = ( const CTSLScopeXAxis & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeXAxis::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLScopeChannels::CTSLScopeChannels( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannels::CTSLScopeChannels( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannels::CTSLScopeChannels( CLPClassProperty *a_property, CTSLScopeChannels ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannels::CTSLScopeChannels( CLPClassProperty *a_property, CTSLScopeChannels ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannels ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannels::CTSLScopeChannels( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeChannels ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannels::CTSLScopeChannels( CLPBaseComponent *a_control, CTSLScopeChannels ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannels::CTSLScopeChannels( CLPBaseComponent *a_control, CTSLScopeChannels ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannels ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannels::CTSLScopeChannels( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannels::CTSLScopeChannels( const CTSLScopeChannels &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  OnClick( GetInstance(), _T( "OnClick" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLScopeChannels & CTSLScopeChannels::operator = ( const CTSLScopeChannels & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLScopeChannels::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDataDisplay::CTSLDataDisplay() :
  ToolBar( *new CTSLDisplayToolBar( GetInstance(), _T( "ToolBar" ))),
  Zooming( *new CTSLDisplayZoom( GetInstance(), _T( "Zooming" ))),
  Cursor( GetInstance(), _T( "Cursor" ) ),
  NavigateMode( GetInstance(), _T( "NavigateMode" ) ),
  Visible( GetInstance(), _T( "Visible" ) ),
  OnZoomChanged( GetInstance(), _T( "OnZoomChanged" ) ),
  OnKeyDown( GetInstance(), _T( "OnKeyDown" ) ),
  OnKeyPress( GetInstance(), _T( "OnKeyPress" ) ),
  OnKeyUp( GetInstance(), _T( "OnKeyUp" ) ),
  OnClick( GetInstance(), _T( "OnClick" ) ),
  OnDblClick( GetInstance(), _T( "OnDblClick" ) ),
  OnMouseDown( GetInstance(), _T( "OnMouseDown" ) ),
  OnMouseMove( GetInstance(), _T( "OnMouseMove" ) ),
  OnMouseUp( GetInstance(), _T( "OnMouseUp" ) ),
  CanRedoZoom( (CTSLDataDisplay *)GetInstance(), &CTSLDataDisplay::GetCanRedoZoom),
  CanUndoZoom( (CTSLDataDisplay *)GetInstance(), &CTSLDataDisplay::GetCanUndoZoom),
  CanZoomOut( (CTSLDataDisplay *)GetInstance(), &CTSLDataDisplay::GetCanZoomOut),
  CanZoomIn( (CTSLDataDisplay *)GetInstance(), &CTSLDataDisplay::GetCanZoomIn),
  Hold( (CTSLDataDisplay *)GetInstance(), &CTSLDataDisplay::GetVC_Hold, &CTSLDataDisplay::SetHold)
{
}
//------------------------------------------------------------------------------
inline CTSLDataDisplay::~CTSLDataDisplay()
{
  delete &ToolBar;
  delete &Zooming;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLDataDisplay::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::InvalidateRefresh()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@InvalidateRefresh$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::RefreshView()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@RefreshView$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::CopyToBitmap( HBITMAP &ABitmap )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@CopyToBitmap$qqrp16Graphics@TBitmap" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    VCLHANDLE __1_Param1 = VC_VLCreateBitmap( ABitmap );

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }

    ABitmap = VC_VLDestroyBitmap( __1_Param1 );
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::Print()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@Print$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::CopyToClipboard()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@CopyToClipboard$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::SaveToBitmap( CTString FileName )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@SaveToBitmap$qqr17System@AnsiString" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
#ifdef USE_STD_STRING
    const char * __1_Param1 = FileName.c_str();
#else
 #ifdef _UNICODE
    int __1_Length = FileName.GetLength();
    char * __1_Param1 = new char[ __1_Length * 2 + 1 ];
    wchar_t * __1_wch_ = FileName.LockBuffer();
  #if _MSC_VER >= 1400
    size_t   __1_i_;
    wcstombs_s( &__1_i_, __1_Param1, __1_Length * 2, __1_wch_, __1_Length );
  #else
    wcstombs( __1_Param1, __1_wch_, __1_Length );
  #endif
 #else
    char * __1_Param1 = FileName.LockBuffer();
 #endif
#endif

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }

#ifdef _UNICODE
    delete []__1_Param1;
#endif
#ifndef USE_STD_STRING
    FileName.UnlockBuffer();
#endif
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::SaveToJpeg( CTString FileName )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@SaveToJpeg$qqr17System@AnsiString" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
#ifdef USE_STD_STRING
    const char * __1_Param1 = FileName.c_str();
#else
 #ifdef _UNICODE
    int __1_Length = FileName.GetLength();
    char * __1_Param1 = new char[ __1_Length * 2 + 1 ];
    wchar_t * __1_wch_ = FileName.LockBuffer();
  #if _MSC_VER >= 1400
    size_t   __1_i_;
    wcstombs_s( &__1_i_, __1_Param1, __1_Length * 2, __1_wch_, __1_Length );
  #else
    wcstombs( __1_Param1, __1_wch_, __1_Length );
  #endif
 #else
    char * __1_Param1 = FileName.LockBuffer();
 #endif
#endif

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }

#ifdef _UNICODE
    delete []__1_Param1;
#endif
#ifndef USE_STD_STRING
    FileName.UnlockBuffer();
#endif
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::ZoomOff()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@ZoomOff$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::ZoomBy( double AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@ZoomBy$qqrd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::ZoomBy( double AValue, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@ZoomBy$qqrdo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = AValue;
    unsigned char __1_Param2 = (unsigned char)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      mov  dl,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::ZoomBy( double XValue, double YValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@ZoomBy$qqrdd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = XValue;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = YValue;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::ZoomBy( double XValue, double YValue, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@ZoomBy$qqrddo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = XValue;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = YValue;
    int __1_Param3 = (int)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  edx,__1_Param3
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::ZoomTo( double XMin, double XMax, double YMin, double YMax )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@ZoomTo$qqrdddd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = XMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = XMax;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param3;
    __1_Param3.Value = YMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param4;
    __1_Param4.Value = YMax;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      push __1_Param3.Words.Second
      push __1_Param3.Words.First
      push __1_Param4.Words.Second
      push __1_Param4.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::ZoomTo( double XMin, double XMax, double YMin, double YMax, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@ZoomTo$qqrddddo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = XMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = XMax;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param3;
    __1_Param3.Value = YMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param4;
    __1_Param4.Value = YMax;
    int __1_Param5 = (int)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      push __1_Param3.Words.Second
      push __1_Param3.Words.First
      push __1_Param4.Words.Second
      push __1_Param4.Words.First
      mov  edx,__1_Param5
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::ZoomToData( double XMin, double XMax, double YMin, double YMax )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@ZoomToData$qqrdddd" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = XMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = XMax;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param3;
    __1_Param3.Value = YMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param4;
    __1_Param4.Value = YMax;

    _asm
      {
      push eax
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      push __1_Param3.Words.Second
      push __1_Param3.Words.First
      push __1_Param4.Words.Second
      push __1_Param4.Words.First
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::ZoomToData( double XMin, double XMax, double YMin, double YMax, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@ZoomToData$qqrddddo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = XMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = XMax;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param3;
    __1_Param3.Value = YMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param4;
    __1_Param4.Value = YMax;
    int __1_Param5 = (int)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      push __1_Param3.Words.Second
      push __1_Param3.Words.First
      push __1_Param4.Words.Second
      push __1_Param4.Words.First
      mov  edx,__1_Param5
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::UndoZoom()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@UndoZoom$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::RedoZoom()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@RedoZoom$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::ClearZoomUndo()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@ClearZoomUndo$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline bool CTSLDataDisplay::GetCanRedoZoom()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@GetCanRedoZoom$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline bool CTSLDataDisplay::GetCanUndoZoom()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@GetCanUndoZoom$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline bool CTSLDataDisplay::GetCanZoomOut()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@GetCanZoomOut$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline bool CTSLDataDisplay::GetCanZoomIn()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@GetCanZoomIn$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTSLDataDisplay::SetHold( bool AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@SetHold$qqro" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned char __1_Param1 = (unsigned char)AValue;

    _asm
      {
      push eax
      push edx
      mov  dl,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline bool CTSLDataDisplay::GetVC_Hold()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataDisplay@GetVC_Hold$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLChannelMouseHitPoint::CTSLChannelMouseHitPoint( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  PointLabel( *new CTSLOptionalLabel( GetInstance(), _T( "PointLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLChannelMouseHitPoint::CTSLChannelMouseHitPoint( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  PointLabel( *new CTSLOptionalLabel( GetInstance(), _T( "PointLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLChannelMouseHitPoint::CTSLChannelMouseHitPoint( CLPClassProperty *a_property, CTSLChannelMouseHitPoint ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  PointLabel( *new CTSLOptionalLabel( GetInstance(), _T( "PointLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLChannelMouseHitPoint::CTSLChannelMouseHitPoint( CLPClassProperty *a_property, CTSLChannelMouseHitPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelMouseHitPoint ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  PointLabel( *new CTSLOptionalLabel( GetInstance(), _T( "PointLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLChannelMouseHitPoint::CTSLChannelMouseHitPoint( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLChannelMouseHitPoint ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  PointLabel( *new CTSLOptionalLabel( GetInstance(), _T( "PointLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLChannelMouseHitPoint::CTSLChannelMouseHitPoint( CLPBaseComponent *a_control, CTSLChannelMouseHitPoint ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  PointLabel( *new CTSLOptionalLabel( GetInstance(), _T( "PointLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLChannelMouseHitPoint::CTSLChannelMouseHitPoint( CLPBaseComponent *a_control, CTSLChannelMouseHitPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelMouseHitPoint ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  PointLabel( *new CTSLOptionalLabel( GetInstance(), _T( "PointLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLChannelMouseHitPoint::CTSLChannelMouseHitPoint( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  PointLabel( *new CTSLOptionalLabel( GetInstance(), _T( "PointLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLChannelMouseHitPoint::CTSLChannelMouseHitPoint( const CTSLChannelMouseHitPoint &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  UseChannelColor( GetInstance(), _T( "UseChannelColor" ) ),
  PointLabel( *new CTSLOptionalLabel( GetInstance(), _T( "PointLabel" )))
{
}
//------------------------------------------------------------------------------
inline CTSLChannelMouseHitPoint::~CTSLChannelMouseHitPoint()
{
  delete &PointLabel;
}
//------------------------------------------------------------------------------
inline CTSLChannelMouseHitPoint & CTSLChannelMouseHitPoint::operator = ( const CTSLChannelMouseHitPoint & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLChannelMouseHitPoint::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayItemHighlighting::CTSLDisplayItemHighlighting( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  HiglightLegendButton( GetInstance(), _T( "HiglightLegendButton" ) ),
  HiglightFromLegend( GetInstance(), _T( "HiglightFromLegend" ) ),
  HiglightFromMouse( GetInstance(), _T( "HiglightFromMouse" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayItemHighlighting::CTSLDisplayItemHighlighting( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  HiglightLegendButton( GetInstance(), _T( "HiglightLegendButton" ) ),
  HiglightFromLegend( GetInstance(), _T( "HiglightFromLegend" ) ),
  HiglightFromMouse( GetInstance(), _T( "HiglightFromMouse" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayItemHighlighting::CTSLDisplayItemHighlighting( CLPClassProperty *a_property, CTSLDisplayItemHighlighting ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  HiglightLegendButton( GetInstance(), _T( "HiglightLegendButton" ) ),
  HiglightFromLegend( GetInstance(), _T( "HiglightFromLegend" ) ),
  HiglightFromMouse( GetInstance(), _T( "HiglightFromMouse" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayItemHighlighting::CTSLDisplayItemHighlighting( CLPClassProperty *a_property, CTSLDisplayItemHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayItemHighlighting ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  HiglightLegendButton( GetInstance(), _T( "HiglightLegendButton" ) ),
  HiglightFromLegend( GetInstance(), _T( "HiglightFromLegend" ) ),
  HiglightFromMouse( GetInstance(), _T( "HiglightFromMouse" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayItemHighlighting::CTSLDisplayItemHighlighting( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayItemHighlighting ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  HiglightLegendButton( GetInstance(), _T( "HiglightLegendButton" ) ),
  HiglightFromLegend( GetInstance(), _T( "HiglightFromLegend" ) ),
  HiglightFromMouse( GetInstance(), _T( "HiglightFromMouse" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayItemHighlighting::CTSLDisplayItemHighlighting( CLPBaseComponent *a_control, CTSLDisplayItemHighlighting ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  HiglightLegendButton( GetInstance(), _T( "HiglightLegendButton" ) ),
  HiglightFromLegend( GetInstance(), _T( "HiglightFromLegend" ) ),
  HiglightFromMouse( GetInstance(), _T( "HiglightFromMouse" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayItemHighlighting::CTSLDisplayItemHighlighting( CLPBaseComponent *a_control, CTSLDisplayItemHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayItemHighlighting ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  HiglightLegendButton( GetInstance(), _T( "HiglightLegendButton" ) ),
  HiglightFromLegend( GetInstance(), _T( "HiglightFromLegend" ) ),
  HiglightFromMouse( GetInstance(), _T( "HiglightFromMouse" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayItemHighlighting::CTSLDisplayItemHighlighting( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  HiglightLegendButton( GetInstance(), _T( "HiglightLegendButton" ) ),
  HiglightFromLegend( GetInstance(), _T( "HiglightFromLegend" ) ),
  HiglightFromMouse( GetInstance(), _T( "HiglightFromMouse" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayItemHighlighting::CTSLDisplayItemHighlighting( const CTSLDisplayItemHighlighting &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  HiglightLegendButton( GetInstance(), _T( "HiglightLegendButton" ) ),
  HiglightFromLegend( GetInstance(), _T( "HiglightFromLegend" ) ),
  HiglightFromMouse( GetInstance(), _T( "HiglightFromMouse" ) ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayItemHighlighting & CTSLDisplayItemHighlighting::operator = ( const CTSLDisplayItemHighlighting & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayItemHighlighting::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLChannelItemHighlighting::CTSLChannelItemHighlighting( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLChannelItemHighlighting::CTSLChannelItemHighlighting( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLChannelItemHighlighting::CTSLChannelItemHighlighting( CLPClassProperty *a_property, CTSLChannelItemHighlighting ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelItemHighlighting::CTSLChannelItemHighlighting( CLPClassProperty *a_property, CTSLChannelItemHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelItemHighlighting ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelItemHighlighting::CTSLChannelItemHighlighting( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLChannelItemHighlighting ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelItemHighlighting::CTSLChannelItemHighlighting( CLPBaseComponent *a_control, CTSLChannelItemHighlighting ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelItemHighlighting::CTSLChannelItemHighlighting( CLPBaseComponent *a_control, CTSLChannelItemHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelItemHighlighting ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTSLChannelItemHighlighting::CTSLChannelItemHighlighting( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLChannelItemHighlighting::CTSLChannelItemHighlighting( const CTSLChannelItemHighlighting &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTSLChannelItemHighlighting & CTSLChannelItemHighlighting::operator = ( const CTSLChannelItemHighlighting & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLChannelItemHighlighting::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayHighlighting::CTSLDisplayHighlighting( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Channels( *new CTSLChannelItemHighlighting( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLChannelItemHighlighting( GetInstance(), _T( "ChannelLinks" ))),
  Markers( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Markers" ))),
  Zones( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "CursorLinks" ))),
  MouseHitPoint( *new CTSLChannelMouseHitPoint( GetInstance(), _T( "MouseHitPoint" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayHighlighting::CTSLDisplayHighlighting( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Channels( *new CTSLChannelItemHighlighting( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLChannelItemHighlighting( GetInstance(), _T( "ChannelLinks" ))),
  Markers( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Markers" ))),
  Zones( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "CursorLinks" ))),
  MouseHitPoint( *new CTSLChannelMouseHitPoint( GetInstance(), _T( "MouseHitPoint" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayHighlighting::CTSLDisplayHighlighting( CLPClassProperty *a_property, CTSLDisplayHighlighting ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Channels( *new CTSLChannelItemHighlighting( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLChannelItemHighlighting( GetInstance(), _T( "ChannelLinks" ))),
  Markers( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Markers" ))),
  Zones( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "CursorLinks" ))),
  MouseHitPoint( *new CTSLChannelMouseHitPoint( GetInstance(), _T( "MouseHitPoint" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayHighlighting::CTSLDisplayHighlighting( CLPClassProperty *a_property, CTSLDisplayHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayHighlighting ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Channels( *new CTSLChannelItemHighlighting( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLChannelItemHighlighting( GetInstance(), _T( "ChannelLinks" ))),
  Markers( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Markers" ))),
  Zones( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "CursorLinks" ))),
  MouseHitPoint( *new CTSLChannelMouseHitPoint( GetInstance(), _T( "MouseHitPoint" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayHighlighting::CTSLDisplayHighlighting( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayHighlighting ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Channels( *new CTSLChannelItemHighlighting( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLChannelItemHighlighting( GetInstance(), _T( "ChannelLinks" ))),
  Markers( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Markers" ))),
  Zones( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "CursorLinks" ))),
  MouseHitPoint( *new CTSLChannelMouseHitPoint( GetInstance(), _T( "MouseHitPoint" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayHighlighting::CTSLDisplayHighlighting( CLPBaseComponent *a_control, CTSLDisplayHighlighting ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Channels( *new CTSLChannelItemHighlighting( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLChannelItemHighlighting( GetInstance(), _T( "ChannelLinks" ))),
  Markers( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Markers" ))),
  Zones( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "CursorLinks" ))),
  MouseHitPoint( *new CTSLChannelMouseHitPoint( GetInstance(), _T( "MouseHitPoint" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayHighlighting::CTSLDisplayHighlighting( CLPBaseComponent *a_control, CTSLDisplayHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayHighlighting ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Channels( *new CTSLChannelItemHighlighting( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLChannelItemHighlighting( GetInstance(), _T( "ChannelLinks" ))),
  Markers( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Markers" ))),
  Zones( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "CursorLinks" ))),
  MouseHitPoint( *new CTSLChannelMouseHitPoint( GetInstance(), _T( "MouseHitPoint" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayHighlighting::CTSLDisplayHighlighting( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Channels( *new CTSLChannelItemHighlighting( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLChannelItemHighlighting( GetInstance(), _T( "ChannelLinks" ))),
  Markers( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Markers" ))),
  Zones( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "CursorLinks" ))),
  MouseHitPoint( *new CTSLChannelMouseHitPoint( GetInstance(), _T( "MouseHitPoint" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayHighlighting::CTSLDisplayHighlighting( const CTSLDisplayHighlighting &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Channels( *new CTSLChannelItemHighlighting( GetInstance(), _T( "Channels" ))),
  ChannelLinks( *new CTSLChannelItemHighlighting( GetInstance(), _T( "ChannelLinks" ))),
  Markers( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Markers" ))),
  Zones( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Ellipses" ))),
  Cursors( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLDisplayItemHighlighting( GetInstance(), _T( "CursorLinks" ))),
  MouseHitPoint( *new CTSLChannelMouseHitPoint( GetInstance(), _T( "MouseHitPoint" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayHighlighting::~CTSLDisplayHighlighting()
{
  delete &Channels;
  delete &ChannelLinks;
  delete &Markers;
  delete &Zones;
  delete &Ellipses;
  delete &Cursors;
  delete &CursorLinks;
  delete &MouseHitPoint;
}
//------------------------------------------------------------------------------
inline CTSLDisplayHighlighting & CTSLDisplayHighlighting::operator = ( const CTSLDisplayHighlighting & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayHighlighting::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDisplayZoom::CTSLDisplayZoom( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MouseZoom( GetInstance(), _T( "MouseZoom" ) ),
  KeyboardZoom( GetInstance(), _T( "KeyboardZoom" ) ),
  SelectionColor( GetInstance(), _T( "SelectionColor" ) ),
  MouseWheelEnabled( GetInstance(), _T( "MouseWheelEnabled" ) ),
  HoldOnZoom( GetInstance(), _T( "HoldOnZoom" ) ),
  HoldOnPan( GetInstance(), _T( "HoldOnPan" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  YMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMax),
  YMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMin),
  XMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMax),
  XMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMin),
  IsZoomed( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZoom::CTSLDisplayZoom( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MouseZoom( GetInstance(), _T( "MouseZoom" ) ),
  KeyboardZoom( GetInstance(), _T( "KeyboardZoom" ) ),
  SelectionColor( GetInstance(), _T( "SelectionColor" ) ),
  MouseWheelEnabled( GetInstance(), _T( "MouseWheelEnabled" ) ),
  HoldOnZoom( GetInstance(), _T( "HoldOnZoom" ) ),
  HoldOnPan( GetInstance(), _T( "HoldOnPan" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  YMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMax),
  YMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMin),
  XMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMax),
  XMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMin),
  IsZoomed( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZoom::CTSLDisplayZoom( CLPClassProperty *a_property, CTSLDisplayZoom ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  MouseZoom( GetInstance(), _T( "MouseZoom" ) ),
  KeyboardZoom( GetInstance(), _T( "KeyboardZoom" ) ),
  SelectionColor( GetInstance(), _T( "SelectionColor" ) ),
  MouseWheelEnabled( GetInstance(), _T( "MouseWheelEnabled" ) ),
  HoldOnZoom( GetInstance(), _T( "HoldOnZoom" ) ),
  HoldOnPan( GetInstance(), _T( "HoldOnPan" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  YMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMax),
  YMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMin),
  XMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMax),
  XMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMin),
  IsZoomed( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZoom::CTSLDisplayZoom( CLPClassProperty *a_property, CTSLDisplayZoom ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZoom ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  MouseZoom( GetInstance(), _T( "MouseZoom" ) ),
  KeyboardZoom( GetInstance(), _T( "KeyboardZoom" ) ),
  SelectionColor( GetInstance(), _T( "SelectionColor" ) ),
  MouseWheelEnabled( GetInstance(), _T( "MouseWheelEnabled" ) ),
  HoldOnZoom( GetInstance(), _T( "HoldOnZoom" ) ),
  HoldOnPan( GetInstance(), _T( "HoldOnPan" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  YMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMax),
  YMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMin),
  XMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMax),
  XMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMin),
  IsZoomed( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZoom::CTSLDisplayZoom( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayZoom ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  MouseZoom( GetInstance(), _T( "MouseZoom" ) ),
  KeyboardZoom( GetInstance(), _T( "KeyboardZoom" ) ),
  SelectionColor( GetInstance(), _T( "SelectionColor" ) ),
  MouseWheelEnabled( GetInstance(), _T( "MouseWheelEnabled" ) ),
  HoldOnZoom( GetInstance(), _T( "HoldOnZoom" ) ),
  HoldOnPan( GetInstance(), _T( "HoldOnPan" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  YMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMax),
  YMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMin),
  XMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMax),
  XMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMin),
  IsZoomed( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZoom::CTSLDisplayZoom( CLPBaseComponent *a_control, CTSLDisplayZoom ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  MouseZoom( GetInstance(), _T( "MouseZoom" ) ),
  KeyboardZoom( GetInstance(), _T( "KeyboardZoom" ) ),
  SelectionColor( GetInstance(), _T( "SelectionColor" ) ),
  MouseWheelEnabled( GetInstance(), _T( "MouseWheelEnabled" ) ),
  HoldOnZoom( GetInstance(), _T( "HoldOnZoom" ) ),
  HoldOnPan( GetInstance(), _T( "HoldOnPan" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  YMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMax),
  YMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMin),
  XMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMax),
  XMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMin),
  IsZoomed( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZoom::CTSLDisplayZoom( CLPBaseComponent *a_control, CTSLDisplayZoom ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZoom ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  MouseZoom( GetInstance(), _T( "MouseZoom" ) ),
  KeyboardZoom( GetInstance(), _T( "KeyboardZoom" ) ),
  SelectionColor( GetInstance(), _T( "SelectionColor" ) ),
  MouseWheelEnabled( GetInstance(), _T( "MouseWheelEnabled" ) ),
  HoldOnZoom( GetInstance(), _T( "HoldOnZoom" ) ),
  HoldOnPan( GetInstance(), _T( "HoldOnPan" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  YMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMax),
  YMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMin),
  XMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMax),
  XMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMin),
  IsZoomed( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZoom::CTSLDisplayZoom( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MouseZoom( GetInstance(), _T( "MouseZoom" ) ),
  KeyboardZoom( GetInstance(), _T( "KeyboardZoom" ) ),
  SelectionColor( GetInstance(), _T( "SelectionColor" ) ),
  MouseWheelEnabled( GetInstance(), _T( "MouseWheelEnabled" ) ),
  HoldOnZoom( GetInstance(), _T( "HoldOnZoom" ) ),
  HoldOnPan( GetInstance(), _T( "HoldOnPan" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  YMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMax),
  YMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMin),
  XMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMax),
  XMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMin),
  IsZoomed( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZoom::CTSLDisplayZoom( const CTSLDisplayZoom &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  MouseZoom( GetInstance(), _T( "MouseZoom" ) ),
  KeyboardZoom( GetInstance(), _T( "KeyboardZoom" ) ),
  SelectionColor( GetInstance(), _T( "SelectionColor" ) ),
  MouseWheelEnabled( GetInstance(), _T( "MouseWheelEnabled" ) ),
  HoldOnZoom( GetInstance(), _T( "HoldOnZoom" ) ),
  HoldOnPan( GetInstance(), _T( "HoldOnPan" ) ),
  Mode( GetInstance(), _T( "Mode" ) ),
  YMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMax),
  YMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetYMin),
  XMax( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMax),
  XMin( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetXMin),
  IsZoomed( (CTSLDisplayZoom *)GetInstance(), &CTSLDisplayZoom::GetIsZoomed)
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayZoom & CTSLDisplayZoom::operator = ( const CTSLDisplayZoom & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayZoom::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline double CTSLDisplayZoom::GetYMax()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayZoom@GetYMax$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline double CTSLDisplayZoom::GetYMin()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayZoom@GetYMin$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline double CTSLDisplayZoom::GetXMax()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayZoom@GetXMax$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline double CTSLDisplayZoom::GetXMin()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayZoom@GetXMin$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  union
    {
    struct
      {
      DWORD First;
      DWORD Second;
      } Words;
    double Value;
  } __0_RtnValue_;
  __0_RtnValue_.Value = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return __0_RtnValue_.Value;
}
//------------------------------------------------------------------------------
inline bool CTSLDisplayZoom::GetIsZoomed()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDisplayZoom@GetIsZoomed$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLDisplayTrails::CTSLDisplayTrails( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTrails::CTSLDisplayTrails( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTrails::CTSLDisplayTrails( CLPClassProperty *a_property, CTSLDisplayTrails ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTrails::CTSLDisplayTrails( CLPClassProperty *a_property, CTSLDisplayTrails ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayTrails ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTrails::CTSLDisplayTrails( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayTrails ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTrails::CTSLDisplayTrails( CLPBaseComponent *a_control, CTSLDisplayTrails ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTrails::CTSLDisplayTrails( CLPBaseComponent *a_control, CTSLDisplayTrails ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayTrails ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTrails::CTSLDisplayTrails( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTrails::CTSLDisplayTrails( const CTSLDisplayTrails &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Font( *new CTFont( GetInstance(), _T( "Font" )))
{
}
//------------------------------------------------------------------------------
inline CTSLDisplayTrails::~CTSLDisplayTrails()
{
  delete &Font;
}
//------------------------------------------------------------------------------
inline CTSLDisplayTrails & CTSLDisplayTrails::operator = ( const CTSLDisplayTrails & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTSLDisplayTrails::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTSLDataChart::CTSLDataChart() :
  InputPins( GetInstance(), _T( "InputPins" ) ),
  XInputPins( GetInstance(), _T( "XInputPins" ) ),
  YAxis( *new CTSLScopeYAxis( GetInstance(), _T( "YAxis" ))),
  XAxis( *new CTSLScopeXAxis( GetInstance(), _T( "XAxis" ))),
  Legend( *new CTSLScopeLegendView( GetInstance(), _T( "Legend" ))),
  Title( *new CTSLDisplayTitle( GetInstance(), _T( "Title" ))),
  DataView( *new CTSLScopeDataView( GetInstance(), _T( "DataView" ))),
  Trails( *new CTSLDisplayTrails( GetInstance(), _T( "Trails" ))),
  Highlighting( *new CTSLDisplayHighlighting( GetInstance(), _T( "Highlighting" ))),
  CursorsStayInView( GetInstance(), _T( "CursorsStayInView" ) ),
  RefreshInterval( (CTSLDataChart *)GetInstance(), &CTSLDataChart::GetRefreshInterval, &CTSLDataChart::SetRefreshInterval),
  OnOverChannel( GetInstance(), _T( "OnOverChannel" ) ),
  OnLeaveChannel( GetInstance(), _T( "OnLeaveChannel" ) )
{
}
//------------------------------------------------------------------------------
inline CTSLDataChart::~CTSLDataChart()
{
  delete &YAxis;
  delete &XAxis;
  delete &Legend;
  delete &Title;
  delete &DataView;
  delete &Trails;
  delete &Highlighting;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLDataChart::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline void CTSLDataChart::ZoomBy( double XValue, double YValue, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataChart@ZoomBy$qqrddo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = XValue;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = YValue;
    int __1_Param3 = (int)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      mov  edx,__1_Param3
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataChart::ZoomTo( double XMin, double XMax, double YMin, double YMax, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataChart@ZoomTo$qqrddddo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = XMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = XMax;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param3;
    __1_Param3.Value = YMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param4;
    __1_Param4.Value = YMax;
    int __1_Param5 = (int)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      push __1_Param3.Words.Second
      push __1_Param3.Words.First
      push __1_Param4.Words.Second
      push __1_Param4.Words.First
      mov  edx,__1_Param5
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLDataChart::ZoomToData( double XMin, double XMax, double YMin, double YMax, bool SaveHistory )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataChart@ZoomToData$qqrddddo" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param1;
    __1_Param1.Value = XMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param2;
    __1_Param2.Value = XMax;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param3;
    __1_Param3.Value = YMin;
    union
      {
      struct
        {
        DWORD First;
        DWORD Second;
        } Words;
        double Value;
      } __1_Param4;
    __1_Param4.Value = YMax;
    int __1_Param5 = (int)SaveHistory;

    _asm
      {
      push eax
      push edx
      push __1_Param1.Words.Second
      push __1_Param1.Words.First
      push __1_Param2.Words.Second
      push __1_Param2.Words.First
      push __1_Param3.Words.Second
      push __1_Param3.Words.First
      push __1_Param4.Words.Second
      push __1_Param4.Words.First
      mov  edx,__1_Param5
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline unsigned int CTSLDataChart::GetRefreshInterval()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataChart@GetRefreshInterval$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  unsigned int __0_RtnValue_ = (unsigned int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (unsigned int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTSLDataChart::SetRefreshInterval( unsigned int AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLDataChart@SetRefreshInterval$qqrui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned int __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTSLScope::CTSLScope( HWND hParent ) :
  Vertical( GetInstance(), _T( "Vertical" ) ),
  MarkerGroups( *new CTSLScopeMarkerGroups( GetInstance(), _T( "MarkerGroups" ))),
  Zones( *new CTSLDisplayZones( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLDisplayEllipticZones( GetInstance(), _T( "Ellipses" ))),
  Channels( *new CTSLScopeChannels( GetInstance(), _T( "Channels" ))),
  Cursors( *new CTSLDisplayCursors( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLDisplayCursorLinks( GetInstance(), _T( "CursorLinks" ))),
  ChannelLinks( *new CTSLDisplayChannelLinks( GetInstance(), _T( "ChannelLinks" ))),
  SizeLimit( GetInstance(), _T( "SizeLimit" ) ),
  OnCustomMouseHitLabel( GetInstance(), _T( "OnCustomMouseHitLabel" ) )
{
  LibraryHandle = ::Get_SignalLabScopePkgCB6();
  Open( hParent );
}
//------------------------------------------------------------------------------
inline CTSLScope::CTSLScope() :
  Vertical( GetInstance(), _T( "Vertical" ) ),
  MarkerGroups( *new CTSLScopeMarkerGroups( GetInstance(), _T( "MarkerGroups" ))),
  Zones( *new CTSLDisplayZones( GetInstance(), _T( "Zones" ))),
  Ellipses( *new CTSLDisplayEllipticZones( GetInstance(), _T( "Ellipses" ))),
  Channels( *new CTSLScopeChannels( GetInstance(), _T( "Channels" ))),
  Cursors( *new CTSLDisplayCursors( GetInstance(), _T( "Cursors" ))),
  CursorLinks( *new CTSLDisplayCursorLinks( GetInstance(), _T( "CursorLinks" ))),
  ChannelLinks( *new CTSLDisplayChannelLinks( GetInstance(), _T( "ChannelLinks" ))),
  SizeLimit( GetInstance(), _T( "SizeLimit" ) ),
  OnCustomMouseHitLabel( GetInstance(), _T( "OnCustomMouseHitLabel" ) )
{
}
//------------------------------------------------------------------------------
inline void CTSLScope::Open( HWND hParent )
{
  LibraryHandle = ::Get_SignalLabScopePkgCB6();
  CLPControl::OpenControl( _T( "TSLScope" ), hParent );
}
//------------------------------------------------------------------------------
inline CTSLScope::~CTSLScope()
{
  delete &MarkerGroups;
  delete &Zones;
  delete &Ellipses;
  delete &Channels;
  delete &Cursors;
  delete &CursorLinks;
  delete &ChannelLinks;
}
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLScope::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
inline void CTSLScope::Invalidate()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLScope@Invalidate$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTSLScope::SetLabelText( CTString AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLScope@SetLabelText$qqrpc" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
#ifdef USE_STD_STRING
    const char * __1_Param1 = AValue.c_str();
#else
 #ifdef _UNICODE
    int __1_Length = AValue.GetLength();
    char * __1_Param1 = new char[ __1_Length * 2 + 1 ];
    wchar_t * __1_wch_ = AValue.LockBuffer();
  #if _MSC_VER >= 1400
    size_t   __1_i_;
    wcstombs_s( &__1_i_, __1_Param1, __1_Length * 2, __1_wch_, __1_Length );
  #else
    wcstombs( __1_Param1, __1_wch_, __1_Length );
  #endif
 #else
    char * __1_Param1 = AValue.LockBuffer();
 #endif
#endif

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }

#ifdef _UNICODE
    delete []__1_Param1;
#endif
#ifndef USE_STD_STRING
    AValue.UnlockBuffer();
#endif
    }

}
//------------------------------------------------------------------------------
inline void CTSLScope::Print()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLScope@Print$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline bool CTSLScope::GetAxisValueAt( int X, int Y, double &AxisX, double &AxisY )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Slscope@TSLScope@GetAxisValueAt$qqriirdt3" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = X;
    int __1_Param2 = Y;
    void * __1_Param3 = &AxisX;
    void * __1_Param4 = &AxisY;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param3
      push __1_Param4
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  ecx
      pop  edx
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline TLPFunctionEntry CTSLScopeLayer::GetFunction( const char *function_name )
{
  TLPFunctionEntry Result = VCL_GetFunction( LibraryHandle, function_name );
  if( Result )
    return Result;

  return inherited::GetFunction( function_name );
}
//------------------------------------------------------------------------------
#endif   // CSLScopeCode_H_
//------------------------------------------------------------------------------
