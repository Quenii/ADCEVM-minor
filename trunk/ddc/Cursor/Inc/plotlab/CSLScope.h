//------------------------------------------------------------------------------
//
//                    Generated by VCL C++ .NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2009
//                              www.mitov.com
//
//------------------------------------------------------------------------------
#ifndef CSLScope_H_
#define CSLScope_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabScopePkgCB6_H_
  #include <CSignalLabScopePkgCB6.h>
#endif
#ifndef CSLStreamTypes_H_
  #include <CSLStreamTypes.h>
#endif
#ifndef CSLMultiInput_H_
  #include <CSLMultiInput.h>
#endif
#ifndef CSLFilterTypes_H_
  #include <CSLFilterTypes.h>
#endif
#ifndef CLPDrawLayers_H_
  #include <CLPDrawLayers.h>
#endif

#include <SLVCInternalStore.h>

//------------------------------------------------------------------------------

enum CTSLViewAlign { vaTop, vaBottom, vaLeft, vaRight };
enum CTSLScopePointsShape { psCircle, psSquare, psDiamond, psPlus, psCross, psStar };
enum CTSLScopeChannelMode { cmLine, cmStep, cmBar, cmPoint };
enum CTSLScopeChannelLinkMode { clmZone, clmBar };
enum CTSLChannelShadeMode { csmZero, csmTop, csmBottom };
enum CTSLZoomOperation { zoUndo, zoRedo, zoMouseWheel, zoZoom, zoZoomOff };
enum CTSLMajorTicksMode { mtmAuto, mtmCustom, mtmOverride };
enum CTSLScaleMode { smLinear, smLogarithmic, smLogDecascale };
enum CTSLPrecisionMode { dpmGeneral, dpmScientific };
enum CTSLDisplayNavigateMode { nmZoom, nmPan };
enum CTSLDisplayZoomMode { zmBoth, zmXAxis, zmYAxis };
enum CTSLDisplayCursorKind { ckVertical, ckHorizontal, ckBoth };
enum CTSLToolBarHostView { thvDisplay, thvDataView };
enum CTSLMaxAxisMode { mamValue, mamOffset };
enum CTSLDisplayAxisTicksMode { atmAuto, atmAxis, atmBufferSamples, atmFrequency, atmIntensity, atmTime, atmManual };

//------------------------------------------------------------------------------
struct CTSLRealPoint
{
  double X;
  double Y;
};
struct CTSLRealRanges
{
  double XMin;
  double YMin;
  double XMax;
  double YMax;
};

//------------------------------------------------------------------------------
class CTSLDisplayCollectionItem : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTString> Name;

public:
  CTSLDisplayCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayCollectionItem( CLPClassProperty *a_property, CTSLDisplayCollectionItem ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCollectionItem( CLPClassProperty *a_property, CTSLDisplayCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCollectionItem ) );
  CTSLDisplayCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCollectionItem ) );
  CTSLDisplayCollectionItem( CLPBaseComponent *a_control, CTSLDisplayCollectionItem ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCollectionItem( CLPBaseComponent *a_control, CTSLDisplayCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCollectionItem ) );
  CTSLDisplayCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayCollectionItem( const CTSLDisplayCollectionItem &other );

public:
  CTSLDisplayCollectionItem & operator = ( const CTSLDisplayCollectionItem & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayCollectionItem ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayCollectionItem Value );
};
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> class CTSLDisplayCollection : public CLPCollectionProperty<_TMP_TYPE_>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<_TMP_TYPE_> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLDisplayCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayCollection( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayCollection( CLPClassProperty *a_property, CTSLDisplayCollection ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCollection( CLPClassProperty *a_property, CTSLDisplayCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCollection ) );
  CTSLDisplayCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCollection ) );
  CTSLDisplayCollection( CLPBaseComponent *a_control, CTSLDisplayCollection ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCollection( CLPBaseComponent *a_control, CTSLDisplayCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCollection ) );
  CTSLDisplayCollection( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayCollection( const CTSLDisplayCollection &other );

public:
  CTSLDisplayCollection & operator = ( const CTSLDisplayCollection & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayCollection ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayCollection Value );
};
//------------------------------------------------------------------------------
class CTSLOptionalDisplayCollectionItem : public CTSLDisplayCollectionItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayCollectionItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;

public:
  CTSLOptionalDisplayCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLOptionalDisplayCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLOptionalDisplayCollectionItem( CLPClassProperty *a_property, CTSLOptionalDisplayCollectionItem ( CLPBaseClass::*a_getter )() );
  CTSLOptionalDisplayCollectionItem( CLPClassProperty *a_property, CTSLOptionalDisplayCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalDisplayCollectionItem ) );
  CTSLOptionalDisplayCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLOptionalDisplayCollectionItem ) );
  CTSLOptionalDisplayCollectionItem( CLPBaseComponent *a_control, CTSLOptionalDisplayCollectionItem ( CLPBaseClass::*a_getter )() );
  CTSLOptionalDisplayCollectionItem( CLPBaseComponent *a_control, CTSLOptionalDisplayCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalDisplayCollectionItem ) );
  CTSLOptionalDisplayCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLOptionalDisplayCollectionItem( const CTSLOptionalDisplayCollectionItem &other );

public:
  CTSLOptionalDisplayCollectionItem & operator = ( const CTSLOptionalDisplayCollectionItem & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLOptionalDisplayCollectionItem ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLOptionalDisplayCollectionItem Value );
};
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> class CTSLOptionalDisplayCollection : public CTSLDisplayCollection<_TMP_TYPE_>
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayCollection<_TMP_TYPE_> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLOptionalDisplayCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLOptionalDisplayCollection( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLOptionalDisplayCollection( CLPClassProperty *a_property, CTSLOptionalDisplayCollection ( CLPBaseClass::*a_getter )() );
  CTSLOptionalDisplayCollection( CLPClassProperty *a_property, CTSLOptionalDisplayCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalDisplayCollection ) );
  CTSLOptionalDisplayCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLOptionalDisplayCollection ) );
  CTSLOptionalDisplayCollection( CLPBaseComponent *a_control, CTSLOptionalDisplayCollection ( CLPBaseClass::*a_getter )() );
  CTSLOptionalDisplayCollection( CLPBaseComponent *a_control, CTSLOptionalDisplayCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalDisplayCollection ) );
  CTSLOptionalDisplayCollection( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLOptionalDisplayCollection( const CTSLOptionalDisplayCollection &other );

public:
  CTSLOptionalDisplayCollection & operator = ( const CTSLOptionalDisplayCollection & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLOptionalDisplayCollection ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLOptionalDisplayCollection Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayMarkerGroup : public CTSLOptionalDisplayCollectionItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollectionItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayBrush &Brush;
  class CTPen &Pen;
  class CTSLOptionalLabel &Labels;

public:    // Properties
  CLPEnumProperty<CTSLDisplayMarkerShape> Shape;
  CLPProperty<unsigned int> Size;

public:
  CTSLDisplayMarkerGroup( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayMarkerGroup( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayMarkerGroup( CLPClassProperty *a_property, CTSLDisplayMarkerGroup ( CLPBaseClass::*a_getter )() );
  CTSLDisplayMarkerGroup( CLPClassProperty *a_property, CTSLDisplayMarkerGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayMarkerGroup ) );
  CTSLDisplayMarkerGroup( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayMarkerGroup ) );
  CTSLDisplayMarkerGroup( CLPBaseComponent *a_control, CTSLDisplayMarkerGroup ( CLPBaseClass::*a_getter )() );
  CTSLDisplayMarkerGroup( CLPBaseComponent *a_control, CTSLDisplayMarkerGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayMarkerGroup ) );
  CTSLDisplayMarkerGroup( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayMarkerGroup( const CTSLDisplayMarkerGroup &other );
  virtual ~CTSLDisplayMarkerGroup();

public:
  CTSLDisplayMarkerGroup & operator = ( const CTSLDisplayMarkerGroup & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayMarkerGroup ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayMarkerGroup Value );
};
//------------------------------------------------------------------------------
class CTSLScopeMarkerGroup : public CTSLDisplayMarkerGroup
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayMarkerGroup inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  void Clear();

public:
  CTSLScopeMarkerGroup( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeMarkerGroup( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeMarkerGroup( CLPClassProperty *a_property, CTSLScopeMarkerGroup ( CLPBaseClass::*a_getter )() );
  CTSLScopeMarkerGroup( CLPClassProperty *a_property, CTSLScopeMarkerGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMarkerGroup ) );
  CTSLScopeMarkerGroup( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeMarkerGroup ) );
  CTSLScopeMarkerGroup( CLPBaseComponent *a_control, CTSLScopeMarkerGroup ( CLPBaseClass::*a_getter )() );
  CTSLScopeMarkerGroup( CLPBaseComponent *a_control, CTSLScopeMarkerGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMarkerGroup ) );
  CTSLScopeMarkerGroup( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeMarkerGroup( const CTSLScopeMarkerGroup &other );

public:
  CTSLScopeMarkerGroup & operator = ( const CTSLScopeMarkerGroup & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeMarkerGroup ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeMarkerGroup Value );
};
//------------------------------------------------------------------------------
class CTSLScopeMarkerGroups : public CTSLOptionalDisplayCollection<CTSLScopeMarkerGroup>
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollection<CTSLScopeMarkerGroup> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Events
//  void __stdcall OnClick(VCLHANDLE Sender, int ChannelIndex, int MarkerIndex, CTSLRealPoint & ClickedValue, bool & Handled);
  CLPEventProperty_5<0, void, VCLHANDLE, int, int, CTSLRealPoint &, bool &> OnClick;

public:
  CTSLScopeMarkerGroups( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeMarkerGroups( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeMarkerGroups( CLPClassProperty *a_property, CTSLScopeMarkerGroups ( CLPBaseClass::*a_getter )() );
  CTSLScopeMarkerGroups( CLPClassProperty *a_property, CTSLScopeMarkerGroups ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMarkerGroups ) );
  CTSLScopeMarkerGroups( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeMarkerGroups ) );
  CTSLScopeMarkerGroups( CLPBaseComponent *a_control, CTSLScopeMarkerGroups ( CLPBaseClass::*a_getter )() );
  CTSLScopeMarkerGroups( CLPBaseComponent *a_control, CTSLScopeMarkerGroups ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMarkerGroups ) );
  CTSLScopeMarkerGroups( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeMarkerGroups( const CTSLScopeMarkerGroups &other );

public:
  CTSLScopeMarkerGroups & operator = ( const CTSLScopeMarkerGroups & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeMarkerGroups ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeMarkerGroups Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayZonePoint : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<double> X;
  CLPProperty<double> Y;

public:
  CTSLDisplayZonePoint( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayZonePoint( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayZonePoint( CLPClassProperty *a_property, CTSLDisplayZonePoint ( CLPBaseClass::*a_getter )() );
  CTSLDisplayZonePoint( CLPClassProperty *a_property, CTSLDisplayZonePoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZonePoint ) );
  CTSLDisplayZonePoint( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayZonePoint ) );
  CTSLDisplayZonePoint( CLPBaseComponent *a_control, CTSLDisplayZonePoint ( CLPBaseClass::*a_getter )() );
  CTSLDisplayZonePoint( CLPBaseComponent *a_control, CTSLDisplayZonePoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZonePoint ) );
  CTSLDisplayZonePoint( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayZonePoint( const CTSLDisplayZonePoint &other );

public:
  CTSLDisplayZonePoint & operator = ( const CTSLDisplayZonePoint & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayZonePoint ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayZonePoint Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayZonePoints : public CLPCollectionProperty<CTSLDisplayZonePoint>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<CTSLDisplayZonePoint> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLDisplayZonePoints( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayZonePoints( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayZonePoints( CLPClassProperty *a_property, CTSLDisplayZonePoints ( CLPBaseClass::*a_getter )() );
  CTSLDisplayZonePoints( CLPClassProperty *a_property, CTSLDisplayZonePoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZonePoints ) );
  CTSLDisplayZonePoints( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayZonePoints ) );
  CTSLDisplayZonePoints( CLPBaseComponent *a_control, CTSLDisplayZonePoints ( CLPBaseClass::*a_getter )() );
  CTSLDisplayZonePoints( CLPBaseComponent *a_control, CTSLDisplayZonePoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZonePoints ) );
  CTSLDisplayZonePoints( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayZonePoints( const CTSLDisplayZonePoints &other );

public:
  CTSLDisplayZonePoints & operator = ( const CTSLDisplayZonePoints & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayZonePoints ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayZonePoints Value );
};
//------------------------------------------------------------------------------
class CTSLBasicDisplayZone : public CTSLOptionalDisplayCollectionItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollectionItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayBrush &Brush;
  class CTPen &Pen;

public:    // Properties
  CLPReadAccessProperty<CTSLBasicDisplayZone,bool> IsDynamic;

protected:
  bool GetVC_IsDynamic();

public:
  CTSLBasicDisplayZone( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicDisplayZone( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicDisplayZone( CLPClassProperty *a_property, CTSLBasicDisplayZone ( CLPBaseClass::*a_getter )() );
  CTSLBasicDisplayZone( CLPClassProperty *a_property, CTSLBasicDisplayZone ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayZone ) );
  CTSLBasicDisplayZone( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayZone ) );
  CTSLBasicDisplayZone( CLPBaseComponent *a_control, CTSLBasicDisplayZone ( CLPBaseClass::*a_getter )() );
  CTSLBasicDisplayZone( CLPBaseComponent *a_control, CTSLBasicDisplayZone ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayZone ) );
  CTSLBasicDisplayZone( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicDisplayZone( const CTSLBasicDisplayZone &other );
  virtual ~CTSLBasicDisplayZone();

public:
  CTSLBasicDisplayZone & operator = ( const CTSLBasicDisplayZone & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicDisplayZone ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicDisplayZone Value );
};
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> class CTSLBasicDisplayZones : public CTSLOptionalDisplayCollection<_TMP_TYPE_>
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollection<_TMP_TYPE_> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLBasicDisplayZones( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicDisplayZones( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicDisplayZones( CLPClassProperty *a_property, CTSLBasicDisplayZones ( CLPBaseClass::*a_getter )() );
  CTSLBasicDisplayZones( CLPClassProperty *a_property, CTSLBasicDisplayZones ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayZones ) );
  CTSLBasicDisplayZones( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayZones ) );
  CTSLBasicDisplayZones( CLPBaseComponent *a_control, CTSLBasicDisplayZones ( CLPBaseClass::*a_getter )() );
  CTSLBasicDisplayZones( CLPBaseComponent *a_control, CTSLBasicDisplayZones ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayZones ) );
  CTSLBasicDisplayZones( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicDisplayZones( const CTSLBasicDisplayZones &other );

public:
  CTSLBasicDisplayZones & operator = ( const CTSLBasicDisplayZones & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicDisplayZones ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicDisplayZones Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayZone : public CTSLBasicDisplayZone
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicDisplayZone inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayZonePoints &Points;

public:
  CTSLDisplayZone( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayZone( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayZone( CLPClassProperty *a_property, CTSLDisplayZone ( CLPBaseClass::*a_getter )() );
  CTSLDisplayZone( CLPClassProperty *a_property, CTSLDisplayZone ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZone ) );
  CTSLDisplayZone( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayZone ) );
  CTSLDisplayZone( CLPBaseComponent *a_control, CTSLDisplayZone ( CLPBaseClass::*a_getter )() );
  CTSLDisplayZone( CLPBaseComponent *a_control, CTSLDisplayZone ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZone ) );
  CTSLDisplayZone( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayZone( const CTSLDisplayZone &other );
  virtual ~CTSLDisplayZone();

public:
  CTSLDisplayZone & operator = ( const CTSLDisplayZone & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayZone ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayZone Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayZones : public CTSLBasicDisplayZones<CTSLDisplayZone>
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicDisplayZones<CTSLDisplayZone> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLDisplayZones( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayZones( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayZones( CLPClassProperty *a_property, CTSLDisplayZones ( CLPBaseClass::*a_getter )() );
  CTSLDisplayZones( CLPClassProperty *a_property, CTSLDisplayZones ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZones ) );
  CTSLDisplayZones( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayZones ) );
  CTSLDisplayZones( CLPBaseComponent *a_control, CTSLDisplayZones ( CLPBaseClass::*a_getter )() );
  CTSLDisplayZones( CLPBaseComponent *a_control, CTSLDisplayZones ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZones ) );
  CTSLDisplayZones( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayZones( const CTSLDisplayZones &other );

public:
  CTSLDisplayZones & operator = ( const CTSLDisplayZones & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayZones ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayZones Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayEllipticPoint : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<double> X;
  CLPProperty<double> Y;

public:
  CTSLDisplayEllipticPoint( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayEllipticPoint( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayEllipticPoint( CLPClassProperty *a_property, CTSLDisplayEllipticPoint ( CLPBaseClass::*a_getter )() );
  CTSLDisplayEllipticPoint( CLPClassProperty *a_property, CTSLDisplayEllipticPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticPoint ) );
  CTSLDisplayEllipticPoint( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticPoint ) );
  CTSLDisplayEllipticPoint( CLPBaseComponent *a_control, CTSLDisplayEllipticPoint ( CLPBaseClass::*a_getter )() );
  CTSLDisplayEllipticPoint( CLPBaseComponent *a_control, CTSLDisplayEllipticPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticPoint ) );
  CTSLDisplayEllipticPoint( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayEllipticPoint( const CTSLDisplayEllipticPoint &other );

public:
  CTSLDisplayEllipticPoint & operator = ( const CTSLDisplayEllipticPoint & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayEllipticPoint ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayEllipticPoint Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayEllipticZone : public CTSLBasicDisplayZone
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicDisplayZone inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayEllipticPoint &Point1;
  class CTSLDisplayEllipticPoint &Point2;

public:
  CTSLDisplayEllipticZone( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayEllipticZone( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayEllipticZone( CLPClassProperty *a_property, CTSLDisplayEllipticZone ( CLPBaseClass::*a_getter )() );
  CTSLDisplayEllipticZone( CLPClassProperty *a_property, CTSLDisplayEllipticZone ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticZone ) );
  CTSLDisplayEllipticZone( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticZone ) );
  CTSLDisplayEllipticZone( CLPBaseComponent *a_control, CTSLDisplayEllipticZone ( CLPBaseClass::*a_getter )() );
  CTSLDisplayEllipticZone( CLPBaseComponent *a_control, CTSLDisplayEllipticZone ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticZone ) );
  CTSLDisplayEllipticZone( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayEllipticZone( const CTSLDisplayEllipticZone &other );
  virtual ~CTSLDisplayEllipticZone();

public:
  CTSLDisplayEllipticZone & operator = ( const CTSLDisplayEllipticZone & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayEllipticZone ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayEllipticZone Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayEllipticZones : public CTSLBasicDisplayZones<CTSLDisplayEllipticZone>
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicDisplayZones<CTSLDisplayEllipticZone> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLDisplayEllipticZones( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayEllipticZones( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayEllipticZones( CLPClassProperty *a_property, CTSLDisplayEllipticZones ( CLPBaseClass::*a_getter )() );
  CTSLDisplayEllipticZones( CLPClassProperty *a_property, CTSLDisplayEllipticZones ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticZones ) );
  CTSLDisplayEllipticZones( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticZones ) );
  CTSLDisplayEllipticZones( CLPBaseComponent *a_control, CTSLDisplayEllipticZones ( CLPBaseClass::*a_getter )() );
  CTSLDisplayEllipticZones( CLPBaseComponent *a_control, CTSLDisplayEllipticZones ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayEllipticZones ) );
  CTSLDisplayEllipticZones( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayEllipticZones( const CTSLDisplayEllipticZones &other );

public:
  CTSLDisplayEllipticZones & operator = ( const CTSLDisplayEllipticZones & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayEllipticZones ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayEllipticZones Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayMarker : public CTSLDisplayCollectionItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayCollectionItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:

public:
  CTSLDisplayMarker( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayMarker( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayMarker( CLPClassProperty *a_property, CTSLDisplayMarker ( CLPBaseClass::*a_getter )() );
  CTSLDisplayMarker( CLPClassProperty *a_property, CTSLDisplayMarker ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayMarker ) );
  CTSLDisplayMarker( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayMarker ) );
  CTSLDisplayMarker( CLPBaseComponent *a_control, CTSLDisplayMarker ( CLPBaseClass::*a_getter )() );
  CTSLDisplayMarker( CLPBaseComponent *a_control, CTSLDisplayMarker ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayMarker ) );
  CTSLDisplayMarker( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayMarker( const CTSLDisplayMarker &other );

public:
  CTSLDisplayMarker & operator = ( const CTSLDisplayMarker & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayMarker ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayMarker Value );
};
//------------------------------------------------------------------------------
class CTSLScopeChannelMarker : public CTSLDisplayMarker
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayMarker inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<int> Position;
  CLPAccessProperty<CTSLScopeChannelMarker,int> MarkerGroupIndex;

protected:
  void SetGroupIndex( int AValue );
  int GetGroupIndex();

public:
  CTSLScopeChannelMarker( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeChannelMarker( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeChannelMarker( CLPClassProperty *a_property, CTSLScopeChannelMarker ( CLPBaseClass::*a_getter )() );
  CTSLScopeChannelMarker( CLPClassProperty *a_property, CTSLScopeChannelMarker ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannelMarker ) );
  CTSLScopeChannelMarker( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeChannelMarker ) );
  CTSLScopeChannelMarker( CLPBaseComponent *a_control, CTSLScopeChannelMarker ( CLPBaseClass::*a_getter )() );
  CTSLScopeChannelMarker( CLPBaseComponent *a_control, CTSLScopeChannelMarker ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannelMarker ) );
  CTSLScopeChannelMarker( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeChannelMarker( const CTSLScopeChannelMarker &other );

public:
  CTSLScopeChannelMarker & operator = ( const CTSLScopeChannelMarker & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeChannelMarker ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeChannelMarker Value );
};
//------------------------------------------------------------------------------
class CTSLScopeChannelMarkers : public CTSLDisplayCollection<CTSLScopeChannelMarker>
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayCollection<CTSLScopeChannelMarker> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLScopeChannelMarker AddMarkerAt( int AMarkerGroupIndex, int XValue );
  CTSLScopeChannelMarker AddMarkerAtCurrentPos( int AMarkerGroupIndex );

public:
  CTSLScopeChannelMarkers( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeChannelMarkers( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeChannelMarkers( CLPClassProperty *a_property, CTSLScopeChannelMarkers ( CLPBaseClass::*a_getter )() );
  CTSLScopeChannelMarkers( CLPClassProperty *a_property, CTSLScopeChannelMarkers ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannelMarkers ) );
  CTSLScopeChannelMarkers( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeChannelMarkers ) );
  CTSLScopeChannelMarkers( CLPBaseComponent *a_control, CTSLScopeChannelMarkers ( CLPBaseClass::*a_getter )() );
  CTSLScopeChannelMarkers( CLPBaseComponent *a_control, CTSLScopeChannelMarkers ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannelMarkers ) );
  CTSLScopeChannelMarkers( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeChannelMarkers( const CTSLScopeChannelMarkers &other );

public:
  CTSLScopeChannelMarkers & operator = ( const CTSLScopeChannelMarkers & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeChannelMarkers ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeChannelMarkers Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayLabel : public CTSLOptionalLabel
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalLabel inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLDisplayLabel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayLabel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayLabel( CLPClassProperty *a_property, CTSLDisplayLabel ( CLPBaseClass::*a_getter )() );
  CTSLDisplayLabel( CLPClassProperty *a_property, CTSLDisplayLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayLabel ) );
  CTSLDisplayLabel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayLabel ) );
  CTSLDisplayLabel( CLPBaseComponent *a_control, CTSLDisplayLabel ( CLPBaseClass::*a_getter )() );
  CTSLDisplayLabel( CLPBaseComponent *a_control, CTSLDisplayLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayLabel ) );
  CTSLDisplayLabel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayLabel( const CTSLDisplayLabel &other );

public:
  CTSLDisplayLabel & operator = ( const CTSLDisplayLabel & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayLabel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayLabel Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayCursorChannelLink : public CTSLDisplayCollectionItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayCollectionItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTPen &Pen;
  class CTSLDisplayBrush &Brush;
  class CTSLDisplayLabel &ChannelLabel;

public:    // Properties
  CLPProperty<bool> UseChannelColor;
  CLPProperty<unsigned int> Size;
  CLPEnumProperty<CTSLDisplayMarkerShape> Shape;
  CLPAccessProperty<CTSLDisplayCursorChannelLink,int> ChannelIndex;

protected:
  void SetChannelIndex( int AValue );
  int GetChannelIndex();

public:
  CTSLDisplayCursorChannelLink( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayCursorChannelLink( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayCursorChannelLink( CLPClassProperty *a_property, CTSLDisplayCursorChannelLink ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursorChannelLink( CLPClassProperty *a_property, CTSLDisplayCursorChannelLink ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorChannelLink ) );
  CTSLDisplayCursorChannelLink( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorChannelLink ) );
  CTSLDisplayCursorChannelLink( CLPBaseComponent *a_control, CTSLDisplayCursorChannelLink ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursorChannelLink( CLPBaseComponent *a_control, CTSLDisplayCursorChannelLink ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorChannelLink ) );
  CTSLDisplayCursorChannelLink( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayCursorChannelLink( const CTSLDisplayCursorChannelLink &other );
  virtual ~CTSLDisplayCursorChannelLink();

public:
  CTSLDisplayCursorChannelLink & operator = ( const CTSLDisplayCursorChannelLink & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayCursorChannelLink ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayCursorChannelLink Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayCursorChannelLinks : public CTSLDisplayCollection<CTSLDisplayCursorChannelLink>
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayCollection<CTSLDisplayCursorChannelLink> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:

public:
  CTSLDisplayCursorChannelLinks( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayCursorChannelLinks( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayCursorChannelLinks( CLPClassProperty *a_property, CTSLDisplayCursorChannelLinks ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursorChannelLinks( CLPClassProperty *a_property, CTSLDisplayCursorChannelLinks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorChannelLinks ) );
  CTSLDisplayCursorChannelLinks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorChannelLinks ) );
  CTSLDisplayCursorChannelLinks( CLPBaseComponent *a_control, CTSLDisplayCursorChannelLinks ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursorChannelLinks( CLPBaseComponent *a_control, CTSLDisplayCursorChannelLinks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorChannelLinks ) );
  CTSLDisplayCursorChannelLinks( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayCursorChannelLinks( const CTSLDisplayCursorChannelLinks &other );

public:
  CTSLDisplayCursorChannelLinks & operator = ( const CTSLDisplayCursorChannelLinks & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayCursorChannelLinks ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayCursorChannelLinks Value );
};
//------------------------------------------------------------------------------
class CTSLViewButtonSettings : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTColor> MouseOverBorderColor;
  CLPProperty<CTColor> MouseOverColor;
  CLPProperty<CTColor> MouseDownBorderColor;
  CLPProperty<CTColor> MouseDownColor;
  CLPProperty<CTCursor> Cursor;
  CLPProperty<bool> Enabled;

public:
  CTSLViewButtonSettings( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLViewButtonSettings( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLViewButtonSettings( CLPClassProperty *a_property, CTSLViewButtonSettings ( CLPBaseClass::*a_getter )() );
  CTSLViewButtonSettings( CLPClassProperty *a_property, CTSLViewButtonSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLViewButtonSettings ) );
  CTSLViewButtonSettings( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLViewButtonSettings ) );
  CTSLViewButtonSettings( CLPBaseComponent *a_control, CTSLViewButtonSettings ( CLPBaseClass::*a_getter )() );
  CTSLViewButtonSettings( CLPBaseComponent *a_control, CTSLViewButtonSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLViewButtonSettings ) );
  CTSLViewButtonSettings( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLViewButtonSettings( const CTSLViewButtonSettings &other );

public:
  CTSLViewButtonSettings & operator = ( const CTSLViewButtonSettings & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLViewButtonSettings ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLViewButtonSettings Value );
};
//------------------------------------------------------------------------------
class CTSLLegendViewButtonSettings : public CTSLViewButtonSettings
{
//DOM-IGNORE-BEGIN
  typedef CTSLViewButtonSettings inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTColor> GlyphColor;
  CLPProperty<CTColor> BorderColor;
  CLPProperty<CTColor> ButtonColor;
  CLPProperty<CTColor> DisabledColor;

public:
  CTSLLegendViewButtonSettings( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLLegendViewButtonSettings( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLLegendViewButtonSettings( CLPClassProperty *a_property, CTSLLegendViewButtonSettings ( CLPBaseClass::*a_getter )() );
  CTSLLegendViewButtonSettings( CLPClassProperty *a_property, CTSLLegendViewButtonSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLegendViewButtonSettings ) );
  CTSLLegendViewButtonSettings( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLLegendViewButtonSettings ) );
  CTSLLegendViewButtonSettings( CLPBaseComponent *a_control, CTSLLegendViewButtonSettings ( CLPBaseClass::*a_getter )() );
  CTSLLegendViewButtonSettings( CLPBaseComponent *a_control, CTSLLegendViewButtonSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLegendViewButtonSettings ) );
  CTSLLegendViewButtonSettings( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLLegendViewButtonSettings( const CTSLLegendViewButtonSettings &other );

public:
  CTSLLegendViewButtonSettings & operator = ( const CTSLLegendViewButtonSettings & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLLegendViewButtonSettings ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLLegendViewButtonSettings Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayCursorPosition : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPAccessProperty<CTSLDisplayCursorPosition,double> X;
  CLPAccessProperty<CTSLDisplayCursorPosition,double> Y;

protected:
  double GetY();
  void SetY( double AValue );
  double GetX();
  void SetX( double AValue );

public:
  CTSLDisplayCursorPosition( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayCursorPosition( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayCursorPosition( CLPClassProperty *a_property, CTSLDisplayCursorPosition ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursorPosition( CLPClassProperty *a_property, CTSLDisplayCursorPosition ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorPosition ) );
  CTSLDisplayCursorPosition( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorPosition ) );
  CTSLDisplayCursorPosition( CLPBaseComponent *a_control, CTSLDisplayCursorPosition ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursorPosition( CLPBaseComponent *a_control, CTSLDisplayCursorPosition ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorPosition ) );
  CTSLDisplayCursorPosition( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayCursorPosition( const CTSLDisplayCursorPosition &other );

public:
  CTSLDisplayCursorPosition & operator = ( const CTSLDisplayCursorPosition & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayCursorPosition ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayCursorPosition Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayCursorLink : public CTSLDisplayCollectionItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayCollectionItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLScopeMeasurementLine &MeasurementLine;
  class CTSLScopeSelection &Selection;

public:    // Properties
  CLPAccessProperty<CTSLDisplayCursorLink,int> BeginCursorIndex;
  CLPAccessProperty<CTSLDisplayCursorLink,int> EndCursorIndex;
  CLPReadAccessProperty<CTSLDisplayCursorLink,bool> IsDynamic;

protected:
  int GetEndCursorIndex();
  void SetEndCursorIndex( int AValue );
  int GetBeginCursorIndex();
  void SetBeginCursorIndex( int AValue );
  bool GetVC_IsDynamic();

public:

public:
  CTSLDisplayCursorLink( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayCursorLink( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayCursorLink( CLPClassProperty *a_property, CTSLDisplayCursorLink ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursorLink( CLPClassProperty *a_property, CTSLDisplayCursorLink ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLink ) );
  CTSLDisplayCursorLink( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLink ) );
  CTSLDisplayCursorLink( CLPBaseComponent *a_control, CTSLDisplayCursorLink ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursorLink( CLPBaseComponent *a_control, CTSLDisplayCursorLink ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLink ) );
  CTSLDisplayCursorLink( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayCursorLink( const CTSLDisplayCursorLink &other );
  virtual ~CTSLDisplayCursorLink();

public:
  CTSLDisplayCursorLink & operator = ( const CTSLDisplayCursorLink & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayCursorLink ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayCursorLink Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayCursorLinkList : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPReadAccessProperty<CTSLDisplayCursorLinkList,int> Count;

protected:
  int GetCount();

public:
  CTSLDisplayCursorLinkList( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayCursorLinkList( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayCursorLinkList( CLPClassProperty *a_property, CTSLDisplayCursorLinkList ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursorLinkList( CLPClassProperty *a_property, CTSLDisplayCursorLinkList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLinkList ) );
  CTSLDisplayCursorLinkList( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLinkList ) );
  CTSLDisplayCursorLinkList( CLPBaseComponent *a_control, CTSLDisplayCursorLinkList ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursorLinkList( CLPBaseComponent *a_control, CTSLDisplayCursorLinkList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLinkList ) );
  CTSLDisplayCursorLinkList( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayCursorLinkList( const CTSLDisplayCursorLinkList &other );

public:
  CTSLDisplayCursorLinkList & operator = ( const CTSLDisplayCursorLinkList & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayCursorLinkList ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayCursorLinkList Value );
};
//------------------------------------------------------------------------------
class CTSLAssociatedChannelLinkList : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPReadAccessProperty<CTSLAssociatedChannelLinkList,int> Count;

protected:
  int GetCount();

public:
  CTSLAssociatedChannelLinkList( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLAssociatedChannelLinkList( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLAssociatedChannelLinkList( CLPClassProperty *a_property, CTSLAssociatedChannelLinkList ( CLPBaseClass::*a_getter )() );
  CTSLAssociatedChannelLinkList( CLPClassProperty *a_property, CTSLAssociatedChannelLinkList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAssociatedChannelLinkList ) );
  CTSLAssociatedChannelLinkList( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAssociatedChannelLinkList ) );
  CTSLAssociatedChannelLinkList( CLPBaseComponent *a_control, CTSLAssociatedChannelLinkList ( CLPBaseClass::*a_getter )() );
  CTSLAssociatedChannelLinkList( CLPBaseComponent *a_control, CTSLAssociatedChannelLinkList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAssociatedChannelLinkList ) );
  CTSLAssociatedChannelLinkList( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLAssociatedChannelLinkList( const CTSLAssociatedChannelLinkList &other );

public:
  CTSLAssociatedChannelLinkList & operator = ( const CTSLAssociatedChannelLinkList & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLAssociatedChannelLinkList ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLAssociatedChannelLinkList Value );
};
//------------------------------------------------------------------------------
class CTSLAssociatedCursorList : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPReadAccessProperty<CTSLAssociatedCursorList,int> Count;

protected:
  int GetCount();

public:
  CTSLAssociatedCursorList( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLAssociatedCursorList( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLAssociatedCursorList( CLPClassProperty *a_property, CTSLAssociatedCursorList ( CLPBaseClass::*a_getter )() );
  CTSLAssociatedCursorList( CLPClassProperty *a_property, CTSLAssociatedCursorList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAssociatedCursorList ) );
  CTSLAssociatedCursorList( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAssociatedCursorList ) );
  CTSLAssociatedCursorList( CLPBaseComponent *a_control, CTSLAssociatedCursorList ( CLPBaseClass::*a_getter )() );
  CTSLAssociatedCursorList( CLPBaseComponent *a_control, CTSLAssociatedCursorList ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAssociatedCursorList ) );
  CTSLAssociatedCursorList( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLAssociatedCursorList( const CTSLAssociatedCursorList &other );

public:
  CTSLAssociatedCursorList & operator = ( const CTSLAssociatedCursorList & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLAssociatedCursorList ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLAssociatedCursorList Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayChannelLink : public CTSLOptionalDisplayCollectionItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollectionItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayBrush &Brush;

public:    // Properties
  CLPAccessProperty<CTSLDisplayChannelLink,int> FirstChannelIndex;
  CLPAccessProperty<CTSLDisplayChannelLink,int> SecondChannelIndex;
  CLPProperty<int> Width;
  CLPEnumProperty<CTSLScopeChannelLinkMode> ChannelLinkMode;
  CLPReadAccessProperty<CTSLDisplayChannelLink,bool> IsDynamic;

protected:
  int GetSecondChannelIndex();
  void SetSecondChannelIndex( int AValue );
  int GetFirstChannelIndex();
  void SetFirstChannelIndex( int AValue );
  bool GetVC_IsDynamic();

public:
  CTSLDisplayChannelLink( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayChannelLink( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayChannelLink( CLPClassProperty *a_property, CTSLDisplayChannelLink ( CLPBaseClass::*a_getter )() );
  CTSLDisplayChannelLink( CLPClassProperty *a_property, CTSLDisplayChannelLink ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannelLink ) );
  CTSLDisplayChannelLink( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayChannelLink ) );
  CTSLDisplayChannelLink( CLPBaseComponent *a_control, CTSLDisplayChannelLink ( CLPBaseClass::*a_getter )() );
  CTSLDisplayChannelLink( CLPBaseComponent *a_control, CTSLDisplayChannelLink ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannelLink ) );
  CTSLDisplayChannelLink( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayChannelLink( const CTSLDisplayChannelLink &other );
  virtual ~CTSLDisplayChannelLink();

public:
  CTSLDisplayChannelLink & operator = ( const CTSLDisplayChannelLink & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayChannelLink ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayChannelLink Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayCursor : public CTSLOptionalDisplayCollectionItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollectionItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Events
//  void __stdcall OnClick(VCLHANDLE Sender);
  CLPEventProperty_1<0, void, VCLHANDLE> OnClick;
//  void __stdcall OnMouseDown(VCLHANDLE Sender, CTMouseButton Button, CTShiftState Shift, int X, int Y);
  CLPEventProperty_5<192, void, VCLHANDLE, CTMouseButton, CTShiftState, int, int> OnMouseDown;
//  void __stdcall OnMouseUp(VCLHANDLE Sender, CTMouseButton Button, CTShiftState Shift, int X, int Y);
  CLPEventProperty_5<192, void, VCLHANDLE, CTMouseButton, CTShiftState, int, int> OnMouseUp;

public:    // Class Properties
  class CTSLDisplayCursorPosition &Position;
  class CTSLDisplayCursorChannelLinks &Channels;
  class CTSLDisplayCursorLinkList &CursorLinks;

public:    // Properties
  CLPProperty<CTColor> Color;
  CLPEnumProperty<CTSLDisplayCursorKind> Kind;
  CLPAccessProperty<CTSLDisplayCursor,int> XAxisIndex;
  CLPAccessProperty<CTSLDisplayCursor,int> YAxisIndex;
  CLPReadAccessProperty<CTSLDisplayCursor,bool> IsDynamic;

protected:
  int GetYAxisIndex();
  void SetYAxisIndex( int AValue );
  int GetXAxisIndex();
  void SetXAxisIndex( int AValue );
  CTSLDisplayCursorLinkList GetVC_CursorLinks();
  bool GetVC_IsDynamic();

public:

public:
  CTSLDisplayCursor( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayCursor( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayCursor( CLPClassProperty *a_property, CTSLDisplayCursor ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursor( CLPClassProperty *a_property, CTSLDisplayCursor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursor ) );
  CTSLDisplayCursor( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursor ) );
  CTSLDisplayCursor( CLPBaseComponent *a_control, CTSLDisplayCursor ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursor( CLPBaseComponent *a_control, CTSLDisplayCursor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursor ) );
  CTSLDisplayCursor( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayCursor( const CTSLDisplayCursor &other );
  virtual ~CTSLDisplayCursor();

public:
  CTSLDisplayCursor & operator = ( const CTSLDisplayCursor & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayCursor ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayCursor Value );
};
//------------------------------------------------------------------------------
class CTSLScopeMeasurementLine : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLOptionalLabel &MeasurementLabel;

public:    // Properties
  CLPProperty<double> X;
  CLPProperty<double> Y;
  CLPProperty<bool> Visible;
  CLPProperty<CTColor> Color;
  CLPEnumProperty<unsigned char> Style;
  CLPEnumProperty<unsigned char> Mode;

public:
  CTSLScopeMeasurementLine( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeMeasurementLine( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeMeasurementLine( CLPClassProperty *a_property, CTSLScopeMeasurementLine ( CLPBaseClass::*a_getter )() );
  CTSLScopeMeasurementLine( CLPClassProperty *a_property, CTSLScopeMeasurementLine ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMeasurementLine ) );
  CTSLScopeMeasurementLine( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeMeasurementLine ) );
  CTSLScopeMeasurementLine( CLPBaseComponent *a_control, CTSLScopeMeasurementLine ( CLPBaseClass::*a_getter )() );
  CTSLScopeMeasurementLine( CLPBaseComponent *a_control, CTSLScopeMeasurementLine ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMeasurementLine ) );
  CTSLScopeMeasurementLine( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeMeasurementLine( const CTSLScopeMeasurementLine &other );
  virtual ~CTSLScopeMeasurementLine();

public:
  CTSLScopeMeasurementLine & operator = ( const CTSLScopeMeasurementLine & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeMeasurementLine ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeMeasurementLine Value );
};
//------------------------------------------------------------------------------
class CTSLAxisFormat : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPEnumProperty<CTSLPrecisionMode> PrecisionMode;
  CLPProperty<int> Precision;
  CLPProperty<bool> FixedPrecision;

public:
  CTSLAxisFormat( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLAxisFormat( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLAxisFormat( CLPClassProperty *a_property, CTSLAxisFormat ( CLPBaseClass::*a_getter )() );
  CTSLAxisFormat( CLPClassProperty *a_property, CTSLAxisFormat ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisFormat ) );
  CTSLAxisFormat( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAxisFormat ) );
  CTSLAxisFormat( CLPBaseComponent *a_control, CTSLAxisFormat ( CLPBaseClass::*a_getter )() );
  CTSLAxisFormat( CLPBaseComponent *a_control, CTSLAxisFormat ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisFormat ) );
  CTSLAxisFormat( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLAxisFormat( const CTSLAxisFormat &other );

public:
  CTSLAxisFormat & operator = ( const CTSLAxisFormat & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLAxisFormat ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLAxisFormat Value );
};
//------------------------------------------------------------------------------
class CTSLScopeSelection : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayBrush &Brush;

public:    // Properties
  CLPProperty<bool> Visible;

public:
  CTSLScopeSelection( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeSelection( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeSelection( CLPClassProperty *a_property, CTSLScopeSelection ( CLPBaseClass::*a_getter )() );
  CTSLScopeSelection( CLPClassProperty *a_property, CTSLScopeSelection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeSelection ) );
  CTSLScopeSelection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeSelection ) );
  CTSLScopeSelection( CLPBaseComponent *a_control, CTSLScopeSelection ( CLPBaseClass::*a_getter )() );
  CTSLScopeSelection( CLPBaseComponent *a_control, CTSLScopeSelection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeSelection ) );
  CTSLScopeSelection( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeSelection( const CTSLScopeSelection &other );
  virtual ~CTSLScopeSelection();

public:
  CTSLScopeSelection & operator = ( const CTSLScopeSelection & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeSelection ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeSelection Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayCursorLinks : public CTSLDisplayCollection<CTSLDisplayCursorLink>
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayCollection<CTSLDisplayCursorLink> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Events
//  void __stdcall OnPositionChange(VCLHANDLE Sender, int Index, CTSLRealPoint & OldPosition, CTSLRealPoint & NewPosition);
  CLPEventProperty_4<0, void, VCLHANDLE, int, CTSLRealPoint &, CTSLRealPoint &> OnPositionChange;

public:
  CTSLDisplayCursorLinks( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayCursorLinks( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayCursorLinks( CLPClassProperty *a_property, CTSLDisplayCursorLinks ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursorLinks( CLPClassProperty *a_property, CTSLDisplayCursorLinks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLinks ) );
  CTSLDisplayCursorLinks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLinks ) );
  CTSLDisplayCursorLinks( CLPBaseComponent *a_control, CTSLDisplayCursorLinks ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursorLinks( CLPBaseComponent *a_control, CTSLDisplayCursorLinks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursorLinks ) );
  CTSLDisplayCursorLinks( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayCursorLinks( const CTSLDisplayCursorLinks &other );

public:
  CTSLDisplayCursorLinks & operator = ( const CTSLDisplayCursorLinks & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayCursorLinks ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayCursorLinks Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayChannelLinks : public CTSLOptionalDisplayCollection<CTSLDisplayChannelLink>
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollection<CTSLDisplayChannelLink> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLDisplayChannelLinks( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayChannelLinks( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayChannelLinks( CLPClassProperty *a_property, CTSLDisplayChannelLinks ( CLPBaseClass::*a_getter )() );
  CTSLDisplayChannelLinks( CLPClassProperty *a_property, CTSLDisplayChannelLinks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannelLinks ) );
  CTSLDisplayChannelLinks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayChannelLinks ) );
  CTSLDisplayChannelLinks( CLPBaseComponent *a_control, CTSLDisplayChannelLinks ( CLPBaseClass::*a_getter )() );
  CTSLDisplayChannelLinks( CLPBaseComponent *a_control, CTSLDisplayChannelLinks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannelLinks ) );
  CTSLDisplayChannelLinks( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayChannelLinks( const CTSLDisplayChannelLinks &other );

public:
  CTSLDisplayChannelLinks & operator = ( const CTSLDisplayChannelLinks & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayChannelLinks ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayChannelLinks Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayCursors : public CTSLOptionalDisplayCollection<CTSLDisplayCursor>
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollection<CTSLDisplayCursor> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Events
//  void __stdcall OnPositionChange(VCLHANDLE Sender, int Index, CTSLRealPoint & OldPosition, CTSLRealPoint & NewPosition);
  CLPEventProperty_4<0, void, VCLHANDLE, int, CTSLRealPoint &, CTSLRealPoint &> OnPositionChange;

public:
  CTSLDisplayCursors( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayCursors( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayCursors( CLPClassProperty *a_property, CTSLDisplayCursors ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursors( CLPClassProperty *a_property, CTSLDisplayCursors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursors ) );
  CTSLDisplayCursors( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayCursors ) );
  CTSLDisplayCursors( CLPBaseComponent *a_control, CTSLDisplayCursors ( CLPBaseClass::*a_getter )() );
  CTSLDisplayCursors( CLPBaseComponent *a_control, CTSLDisplayCursors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayCursors ) );
  CTSLDisplayCursors( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayCursors( const CTSLDisplayCursors &other );

public:
  CTSLDisplayCursors & operator = ( const CTSLDisplayCursors & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayCursors ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayCursors Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayChannel : public CTSLOptionalDisplayCollectionItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollectionItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLScopePoints &Points;

public:    // Properties
  CLPAccessProperty<CTSLDisplayChannel,int> XAxisIndex;
  CLPAccessProperty<CTSLDisplayChannel,int> YAxisIndex;
  CLPProperty<CTColor> Color;
  CLPProperty<int> Width;
  CLPEnumProperty<CTSLScopeChannelMode> ChannelMode;

protected:
  int GetYAxisIndex();
  void SetYAxisIndex( int AValue );
  int GetXAxisIndex();
  void SetXAxisIndex( int AValue );

protected:    // Injected Methods
  void * NET_GetXPointsAtValue( double YValue );
  void * NET_GetYPointsAtValue( double XValue );
  int NET_GetArrayLength( void * PArray );
  double * NET_GetArray( void * PArray );
  void NET_PopulateArray( void * PArray, double * ARealArray );
  void NET_DestroyArray( void * PArray );

public:

public:    // Added Methods
  CLPArray<double> GetXPointsAtValue( double YValue )
  {
      void *DataPtr = NET_GetXPointsAtValue( YValue );
      CLPArray<double> RtnArray( NET_GetArray( DataPtr ), NET_GetArrayLength( DataPtr ) );
      NET_DestroyArray( DataPtr );
      return RtnArray;
  }

  CLPArray<double> GetYPointsAtValue( double XValue )
  {
      void *DataPtr = NET_GetYPointsAtValue( XValue );
      CLPArray<double> RtnArray( NET_GetArray( DataPtr ), NET_GetArrayLength( DataPtr ) );
      NET_DestroyArray( DataPtr );
      return RtnArray;
  }

public:
  CTSLDisplayChannel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayChannel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayChannel( CLPClassProperty *a_property, CTSLDisplayChannel ( CLPBaseClass::*a_getter )() );
  CTSLDisplayChannel( CLPClassProperty *a_property, CTSLDisplayChannel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannel ) );
  CTSLDisplayChannel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayChannel ) );
  CTSLDisplayChannel( CLPBaseComponent *a_control, CTSLDisplayChannel ( CLPBaseClass::*a_getter )() );
  CTSLDisplayChannel( CLPBaseComponent *a_control, CTSLDisplayChannel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannel ) );
  CTSLDisplayChannel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayChannel( const CTSLDisplayChannel &other );
  virtual ~CTSLDisplayChannel();

public:
  CTSLDisplayChannel & operator = ( const CTSLDisplayChannel & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayChannel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayChannel Value );
};
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> class CTSLDisplayChannels : public CTSLOptionalDisplayCollection<_TMP_TYPE_>
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollection<_TMP_TYPE_> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLDisplayChannels( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayChannels( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayChannels( CLPClassProperty *a_property, CTSLDisplayChannels ( CLPBaseClass::*a_getter )() );
  CTSLDisplayChannels( CLPClassProperty *a_property, CTSLDisplayChannels ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannels ) );
  CTSLDisplayChannels( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayChannels ) );
  CTSLDisplayChannels( CLPBaseComponent *a_control, CTSLDisplayChannels ( CLPBaseClass::*a_getter )() );
  CTSLDisplayChannels( CLPBaseComponent *a_control, CTSLDisplayChannels ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayChannels ) );
  CTSLDisplayChannels( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayChannels( const CTSLDisplayChannels &other );

public:
  CTSLDisplayChannels & operator = ( const CTSLDisplayChannels & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayChannels ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayChannels Value );
};
//------------------------------------------------------------------------------
class CTSLScopePoints : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayBrush &Brush;
  class CTPen &Pen;

public:    // Properties
  CLPProperty<bool> Visible;
  CLPEnumProperty<CTSLScopePointsShape> Shape;
  CLPProperty<unsigned int> Size;
  CLPProperty<bool> UseChannelColor;

public:
  CTSLScopePoints( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopePoints( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopePoints( CLPClassProperty *a_property, CTSLScopePoints ( CLPBaseClass::*a_getter )() );
  CTSLScopePoints( CLPClassProperty *a_property, CTSLScopePoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopePoints ) );
  CTSLScopePoints( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopePoints ) );
  CTSLScopePoints( CLPBaseComponent *a_control, CTSLScopePoints ( CLPBaseClass::*a_getter )() );
  CTSLScopePoints( CLPBaseComponent *a_control, CTSLScopePoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopePoints ) );
  CTSLScopePoints( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopePoints( const CTSLScopePoints &other );
  virtual ~CTSLScopePoints();

public:
  CTSLScopePoints & operator = ( const CTSLScopePoints & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopePoints ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopePoints Value );
};
//------------------------------------------------------------------------------
class CTSLChannelData : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPAccessProperty<CTSLChannelData,double> SampleRate;

protected:
  double GetSampleRate();
  void SetSampleRate( double AValue );

public:
  void SetYData( const unsigned short * ABufer, unsigned int ASize );
  void SetYData( const short * ABufer, unsigned int ASize );
  void SetYData( const unsigned int * ABufer, unsigned int ASize );
  void SetYData( const int * ABufer, unsigned int ASize );
  void SetYData( const float * ABufer, unsigned int ASize );
  void SetYData( const double * ABufer, unsigned int ASize );
  void SetXYData( const unsigned short * XBufer, const unsigned short * YBufer, unsigned int ASize );
  void SetXYData( const short * XBufer, const short * YBufer, unsigned int ASize );
  void SetXYData( const unsigned int * XBufer, const unsigned int * YBufer, unsigned int ASize );
  void SetXYData( const int * XBufer, const int * YBufer, unsigned int ASize );
  void SetXYData( const float * XBufer, const float * YBufer, unsigned int ASize );
  void SetXYData( const double * XBufer, const double * YBufer, unsigned int ASize );
  void AddYData( const unsigned short * ABufer, int ASize, bool ASeparate );
  void AddYData( const short * ABufer, unsigned int ASize, bool ASeparate );
  void AddYData( const unsigned int * ABufer, unsigned int ASize, bool ASeparate );
  void AddYData( const int * ABufer, unsigned int ASize, bool ASeparate );
  void AddYData( const float * ABufer, unsigned int ASize, bool ASeparate );
  void AddYData( const double * ABufer, unsigned int ASize, bool ASeparate );
  void AddXYData( const unsigned short * XBufer, const unsigned short * YBufer, unsigned int ASize, bool ASeparate );
  void AddXYData( const short * XBufer, const short * YBufer, unsigned int ASize, bool ASeparate );
  void AddXYData( const unsigned int * XBufer, const unsigned int * YBufer, unsigned int ASize, bool ASeparate );
  void AddXYData( const int * XBufer, const int * YBufer, unsigned int ASize, bool ASeparate );
  void AddXYData( const float * XBufer, const float * YBufer, unsigned int ASize, bool ASeparate );
  void AddXYData( const double * XBufer, const double * YBufer, unsigned int ASize, bool ASeparate );
  void Clear();
  void AddYPoint( double AValue );
  void AddYPoint( double AValue, bool ASeparate );
  void AddXYPoint( double XValue, double YValue );
  void AddXYPoint( double XValue, double YValue, bool ASeparate );
  int GetSize();
  void GetXData( double * ABuffer );
  void GetYData( double * ABuffer );
  void GetXYData( double * XBuffer, double * YBuffer );
  int GetDrawSize();
  void GetDrawXData( double * ABuffer );
  void GetDrawYData( double * ABuffer );
  void GetDrawXYData( double * XBuffer, double * YBuffer );

public:
  CTSLChannelData( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLChannelData( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLChannelData( CLPClassProperty *a_property, CTSLChannelData ( CLPBaseClass::*a_getter )() );
  CTSLChannelData( CLPClassProperty *a_property, CTSLChannelData ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelData ) );
  CTSLChannelData( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLChannelData ) );
  CTSLChannelData( CLPBaseComponent *a_control, CTSLChannelData ( CLPBaseClass::*a_getter )() );
  CTSLChannelData( CLPBaseComponent *a_control, CTSLChannelData ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelData ) );
  CTSLChannelData( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLChannelData( const CTSLChannelData &other );

public:
  CTSLChannelData & operator = ( const CTSLChannelData & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLChannelData ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLChannelData Value );
};
//------------------------------------------------------------------------------
class CTSLScopeChannel : public CTSLDisplayChannel
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayChannel inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // OpenWire Pins

public:    // Events
//  void __stdcall OnSampleDraw(VCLHANDLE Sender, double XValue, double YValue, VCLHANDLE & Canvas, bool Highlighted, bool & DefaultDraw);
  CLPEventProperty_6<320, void, VCLHANDLE, double, double, VCLHANDLE &, bool, bool &> OnSampleDraw;
//  void __stdcall OnChannelDraw(VCLHANDLE Sender, int ChannelIndex, double * ChannelData, int DataSize, bool WasChanged);
  CLPEventProperty_5<0, void, VCLHANDLE, int, double *, int, bool> OnChannelDraw;

public:    // Class Properties
  class CTSLScopeChannelMarkers &Markers;
  class CTSLScopeChannelMarkers &DrawMarkers;
  class CTSLChannelData &Data;

public:    // Properties
  CLPEnumProperty<CTSLChannelShadeMode> ShadeMode;

protected:
  void SetDrawMarkers( CTSLScopeChannelMarkers AValue );
  CTSLScopeChannelMarkers GetVC_DrawMarkers();
  CTSLChannelData GetVC_Data();

public:
  CTSLScopeChannel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeChannel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeChannel( CLPClassProperty *a_property, CTSLScopeChannel ( CLPBaseClass::*a_getter )() );
  CTSLScopeChannel( CLPClassProperty *a_property, CTSLScopeChannel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannel ) );
  CTSLScopeChannel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeChannel ) );
  CTSLScopeChannel( CLPBaseComponent *a_control, CTSLScopeChannel ( CLPBaseClass::*a_getter )() );
  CTSLScopeChannel( CLPBaseComponent *a_control, CTSLScopeChannel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannel ) );
  CTSLScopeChannel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeChannel( const CTSLScopeChannel &other );
  virtual ~CTSLScopeChannel();

public:
  CTSLScopeChannel & operator = ( const CTSLScopeChannel & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeChannel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeChannel Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayComponent : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLDisplayComponent( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayComponent( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayComponent( CLPClassProperty *a_property, CTSLDisplayComponent ( CLPBaseClass::*a_getter )() );
  CTSLDisplayComponent( CLPClassProperty *a_property, CTSLDisplayComponent ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayComponent ) );
  CTSLDisplayComponent( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayComponent ) );
  CTSLDisplayComponent( CLPBaseComponent *a_control, CTSLDisplayComponent ( CLPBaseClass::*a_getter )() );
  CTSLDisplayComponent( CLPBaseComponent *a_control, CTSLDisplayComponent ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayComponent ) );
  CTSLDisplayComponent( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayComponent( const CTSLDisplayComponent &other );

public:
  CTSLDisplayComponent & operator = ( const CTSLDisplayComponent & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayComponent ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayComponent Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayView : public CTSLDisplayComponent
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayComponent inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPReadAccessProperty<CTSLDisplayView,int> Height;
  CLPReadAccessProperty<CTSLDisplayView,int> Width;
  CLPReadAccessProperty<CTSLDisplayView,int> Top;
  CLPReadAccessProperty<CTSLDisplayView,int> Left;

protected:
  int GetHeightProp();
  int GetWidthProp();
  int GetTopProp();
  int GetLeftProp();

public:
  CTSLDisplayView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayView( CLPClassProperty *a_property, CTSLDisplayView ( CLPBaseClass::*a_getter )() );
  CTSLDisplayView( CLPClassProperty *a_property, CTSLDisplayView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayView ) );
  CTSLDisplayView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayView ) );
  CTSLDisplayView( CLPBaseComponent *a_control, CTSLDisplayView ( CLPBaseClass::*a_getter )() );
  CTSLDisplayView( CLPBaseComponent *a_control, CTSLDisplayView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayView ) );
  CTSLDisplayView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayView( const CTSLDisplayView &other );

public:
  CTSLDisplayView & operator = ( const CTSLDisplayView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayView Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayViewBackground : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTColor> Color;
  CLPProperty<bool> UseControlColor;

public:
  CTSLDisplayViewBackground( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayViewBackground( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayViewBackground( CLPClassProperty *a_property, CTSLDisplayViewBackground ( CLPBaseClass::*a_getter )() );
  CTSLDisplayViewBackground( CLPClassProperty *a_property, CTSLDisplayViewBackground ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayViewBackground ) );
  CTSLDisplayViewBackground( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayViewBackground ) );
  CTSLDisplayViewBackground( CLPBaseComponent *a_control, CTSLDisplayViewBackground ( CLPBaseClass::*a_getter )() );
  CTSLDisplayViewBackground( CLPBaseComponent *a_control, CTSLDisplayViewBackground ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayViewBackground ) );
  CTSLDisplayViewBackground( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayViewBackground( const CTSLDisplayViewBackground &other );

public:
  CTSLDisplayViewBackground & operator = ( const CTSLDisplayViewBackground & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayViewBackground ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayViewBackground Value );
};
//------------------------------------------------------------------------------
class CTSLCustomColorDisplayView : public CTSLDisplayView
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayViewBackground &Background;

public:
  CTSLCustomColorDisplayView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLCustomColorDisplayView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLCustomColorDisplayView( CLPClassProperty *a_property, CTSLCustomColorDisplayView ( CLPBaseClass::*a_getter )() );
  CTSLCustomColorDisplayView( CLPClassProperty *a_property, CTSLCustomColorDisplayView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLCustomColorDisplayView ) );
  CTSLCustomColorDisplayView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLCustomColorDisplayView ) );
  CTSLCustomColorDisplayView( CLPBaseComponent *a_control, CTSLCustomColorDisplayView ( CLPBaseClass::*a_getter )() );
  CTSLCustomColorDisplayView( CLPBaseComponent *a_control, CTSLCustomColorDisplayView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLCustomColorDisplayView ) );
  CTSLCustomColorDisplayView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLCustomColorDisplayView( const CTSLCustomColorDisplayView &other );
  virtual ~CTSLCustomColorDisplayView();

public:
  CTSLCustomColorDisplayView & operator = ( const CTSLCustomColorDisplayView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLCustomColorDisplayView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLCustomColorDisplayView Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayViewSize : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> AutoSize;
  CLPProperty<unsigned int> Size;

public:
  CTSLDisplayViewSize( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayViewSize( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayViewSize( CLPClassProperty *a_property, CTSLDisplayViewSize ( CLPBaseClass::*a_getter )() );
  CTSLDisplayViewSize( CLPClassProperty *a_property, CTSLDisplayViewSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayViewSize ) );
  CTSLDisplayViewSize( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayViewSize ) );
  CTSLDisplayViewSize( CLPBaseComponent *a_control, CTSLDisplayViewSize ( CLPBaseClass::*a_getter )() );
  CTSLDisplayViewSize( CLPBaseComponent *a_control, CTSLDisplayViewSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayViewSize ) );
  CTSLDisplayViewSize( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayViewSize( const CTSLDisplayViewSize &other );

public:
  CTSLDisplayViewSize & operator = ( const CTSLDisplayViewSize & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayViewSize ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayViewSize Value );
};
//------------------------------------------------------------------------------
class CTSLCustomSizeDisplayView : public CTSLCustomColorDisplayView
{
//DOM-IGNORE-BEGIN
  typedef CTSLCustomColorDisplayView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayViewSize &ViewSize;

public:    // Properties
  CLPEnumProperty<CTSLViewAlign> Align;

public:
  CTSLCustomSizeDisplayView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLCustomSizeDisplayView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLCustomSizeDisplayView( CLPClassProperty *a_property, CTSLCustomSizeDisplayView ( CLPBaseClass::*a_getter )() );
  CTSLCustomSizeDisplayView( CLPClassProperty *a_property, CTSLCustomSizeDisplayView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLCustomSizeDisplayView ) );
  CTSLCustomSizeDisplayView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLCustomSizeDisplayView ) );
  CTSLCustomSizeDisplayView( CLPBaseComponent *a_control, CTSLCustomSizeDisplayView ( CLPBaseClass::*a_getter )() );
  CTSLCustomSizeDisplayView( CLPBaseComponent *a_control, CTSLCustomSizeDisplayView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLCustomSizeDisplayView ) );
  CTSLCustomSizeDisplayView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLCustomSizeDisplayView( const CTSLCustomSizeDisplayView &other );
  virtual ~CTSLCustomSizeDisplayView();

public:
  CTSLCustomSizeDisplayView & operator = ( const CTSLCustomSizeDisplayView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLCustomSizeDisplayView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLCustomSizeDisplayView Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayProperty : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLDisplayProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayProperty( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayProperty( CLPClassProperty *a_property, CTSLDisplayProperty ( CLPBaseClass::*a_getter )() );
  CTSLDisplayProperty( CLPClassProperty *a_property, CTSLDisplayProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayProperty ) );
  CTSLDisplayProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayProperty ) );
  CTSLDisplayProperty( CLPBaseComponent *a_control, CTSLDisplayProperty ( CLPBaseClass::*a_getter )() );
  CTSLDisplayProperty( CLPBaseComponent *a_control, CTSLDisplayProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayProperty ) );
  CTSLDisplayProperty( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayProperty( const CTSLDisplayProperty &other );

public:
  CTSLDisplayProperty & operator = ( const CTSLDisplayProperty & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayProperty ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayProperty Value );
};
//------------------------------------------------------------------------------
class CTSLVisibleDisplayProperty : public CTSLDisplayProperty
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;

public:
  CTSLVisibleDisplayProperty( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLVisibleDisplayProperty( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLVisibleDisplayProperty( CLPClassProperty *a_property, CTSLVisibleDisplayProperty ( CLPBaseClass::*a_getter )() );
  CTSLVisibleDisplayProperty( CLPClassProperty *a_property, CTSLVisibleDisplayProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLVisibleDisplayProperty ) );
  CTSLVisibleDisplayProperty( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLVisibleDisplayProperty ) );
  CTSLVisibleDisplayProperty( CLPBaseComponent *a_control, CTSLVisibleDisplayProperty ( CLPBaseClass::*a_getter )() );
  CTSLVisibleDisplayProperty( CLPBaseComponent *a_control, CTSLVisibleDisplayProperty ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLVisibleDisplayProperty ) );
  CTSLVisibleDisplayProperty( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLVisibleDisplayProperty( const CTSLVisibleDisplayProperty &other );

public:
  CTSLVisibleDisplayProperty & operator = ( const CTSLVisibleDisplayProperty & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLVisibleDisplayProperty ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLVisibleDisplayProperty Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayGridLineSettings : public CTSLVisibleDisplayProperty
{
//DOM-IGNORE-BEGIN
  typedef CTSLVisibleDisplayProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTPen &Pen;

public:
  CTSLDisplayGridLineSettings( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayGridLineSettings( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayGridLineSettings( CLPClassProperty *a_property, CTSLDisplayGridLineSettings ( CLPBaseClass::*a_getter )() );
  CTSLDisplayGridLineSettings( CLPClassProperty *a_property, CTSLDisplayGridLineSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayGridLineSettings ) );
  CTSLDisplayGridLineSettings( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayGridLineSettings ) );
  CTSLDisplayGridLineSettings( CLPBaseComponent *a_control, CTSLDisplayGridLineSettings ( CLPBaseClass::*a_getter )() );
  CTSLDisplayGridLineSettings( CLPBaseComponent *a_control, CTSLDisplayGridLineSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayGridLineSettings ) );
  CTSLDisplayGridLineSettings( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayGridLineSettings( const CTSLDisplayGridLineSettings &other );
  virtual ~CTSLDisplayGridLineSettings();

public:
  CTSLDisplayGridLineSettings & operator = ( const CTSLDisplayGridLineSettings & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayGridLineSettings ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayGridLineSettings Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayGridDirectionalLinesSettings : public CTSLDisplayProperty
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayGridLineSettings &Lines;
  class CTSLDisplayGridLineSettings &ZeroLine;

public:
  CTSLDisplayGridDirectionalLinesSettings( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayGridDirectionalLinesSettings( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayGridDirectionalLinesSettings( CLPClassProperty *a_property, CTSLDisplayGridDirectionalLinesSettings ( CLPBaseClass::*a_getter )() );
  CTSLDisplayGridDirectionalLinesSettings( CLPClassProperty *a_property, CTSLDisplayGridDirectionalLinesSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayGridDirectionalLinesSettings ) );
  CTSLDisplayGridDirectionalLinesSettings( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayGridDirectionalLinesSettings ) );
  CTSLDisplayGridDirectionalLinesSettings( CLPBaseComponent *a_control, CTSLDisplayGridDirectionalLinesSettings ( CLPBaseClass::*a_getter )() );
  CTSLDisplayGridDirectionalLinesSettings( CLPBaseComponent *a_control, CTSLDisplayGridDirectionalLinesSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayGridDirectionalLinesSettings ) );
  CTSLDisplayGridDirectionalLinesSettings( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayGridDirectionalLinesSettings( const CTSLDisplayGridDirectionalLinesSettings &other );
  virtual ~CTSLDisplayGridDirectionalLinesSettings();

public:
  CTSLDisplayGridDirectionalLinesSettings & operator = ( const CTSLDisplayGridDirectionalLinesSettings & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayGridDirectionalLinesSettings ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayGridDirectionalLinesSettings Value );
};
//------------------------------------------------------------------------------
class CTSLScopeDataView : public CTSLCustomColorDisplayView
{
//DOM-IGNORE-BEGIN
  typedef CTSLCustomColorDisplayView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayGridLineSettings &Border;

public:
  CTSLScopeDataView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeDataView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeDataView( CLPClassProperty *a_property, CTSLScopeDataView ( CLPBaseClass::*a_getter )() );
  CTSLScopeDataView( CLPClassProperty *a_property, CTSLScopeDataView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeDataView ) );
  CTSLScopeDataView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeDataView ) );
  CTSLScopeDataView( CLPBaseComponent *a_control, CTSLScopeDataView ( CLPBaseClass::*a_getter )() );
  CTSLScopeDataView( CLPBaseComponent *a_control, CTSLScopeDataView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeDataView ) );
  CTSLScopeDataView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeDataView( const CTSLScopeDataView &other );
  virtual ~CTSLScopeDataView();

public:
  CTSLScopeDataView & operator = ( const CTSLScopeDataView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeDataView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeDataView Value );
};
//------------------------------------------------------------------------------
class CTSLOptionalView : public CTSLCustomSizeDisplayView
{
//DOM-IGNORE-BEGIN
  typedef CTSLCustomSizeDisplayView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;

public:
  CTSLOptionalView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLOptionalView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLOptionalView( CLPClassProperty *a_property, CTSLOptionalView ( CLPBaseClass::*a_getter )() );
  CTSLOptionalView( CLPClassProperty *a_property, CTSLOptionalView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalView ) );
  CTSLOptionalView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLOptionalView ) );
  CTSLOptionalView( CLPBaseComponent *a_control, CTSLOptionalView ( CLPBaseClass::*a_getter )() );
  CTSLOptionalView( CLPBaseComponent *a_control, CTSLOptionalView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalView ) );
  CTSLOptionalView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLOptionalView( const CTSLOptionalView &other );

public:
  CTSLOptionalView & operator = ( const CTSLOptionalView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLOptionalView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLOptionalView Value );
};
//------------------------------------------------------------------------------
class CTSLBasicLegendGroup : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Events
//  void __stdcall OnItemClick(VCLHANDLE Sender, int ChannelIndex, bool & Handled);
  CLPEventProperty_3<0, void, VCLHANDLE, int, bool &> OnItemClick;

public:    // Class Properties
  class CTSLDisplayLabel &Caption;

public:    // Properties
  CLPProperty<bool> Visible;
  CLPProperty<CTCursor> Cursor;

public:

public:
  CTSLBasicLegendGroup( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicLegendGroup( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicLegendGroup( CLPClassProperty *a_property, CTSLBasicLegendGroup ( CLPBaseClass::*a_getter )() );
  CTSLBasicLegendGroup( CLPClassProperty *a_property, CTSLBasicLegendGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicLegendGroup ) );
  CTSLBasicLegendGroup( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicLegendGroup ) );
  CTSLBasicLegendGroup( CLPBaseComponent *a_control, CTSLBasicLegendGroup ( CLPBaseClass::*a_getter )() );
  CTSLBasicLegendGroup( CLPBaseComponent *a_control, CTSLBasicLegendGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicLegendGroup ) );
  CTSLBasicLegendGroup( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicLegendGroup( const CTSLBasicLegendGroup &other );
  virtual ~CTSLBasicLegendGroup();

public:
  CTSLBasicLegendGroup & operator = ( const CTSLBasicLegendGroup & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicLegendGroup ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicLegendGroup Value );
};
//------------------------------------------------------------------------------
class CTSLLegendGroup : public CTSLBasicLegendGroup
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicLegendGroup inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLLegendGroup( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLLegendGroup( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLLegendGroup( CLPClassProperty *a_property, CTSLLegendGroup ( CLPBaseClass::*a_getter )() );
  CTSLLegendGroup( CLPClassProperty *a_property, CTSLLegendGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLegendGroup ) );
  CTSLLegendGroup( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLLegendGroup ) );
  CTSLLegendGroup( CLPBaseComponent *a_control, CTSLLegendGroup ( CLPBaseClass::*a_getter )() );
  CTSLLegendGroup( CLPBaseComponent *a_control, CTSLLegendGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLegendGroup ) );
  CTSLLegendGroup( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLLegendGroup( const CTSLLegendGroup &other );

public:
  CTSLLegendGroup & operator = ( const CTSLLegendGroup & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLLegendGroup ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLLegendGroup Value );
};
//------------------------------------------------------------------------------
class CTSLLegendView : public CTSLOptionalView
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTFont &Font;
  class CTSLLegendViewButtonSettings &Buttons;

public:
  CTSLLegendView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLLegendView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLLegendView( CLPClassProperty *a_property, CTSLLegendView ( CLPBaseClass::*a_getter )() );
  CTSLLegendView( CLPClassProperty *a_property, CTSLLegendView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLegendView ) );
  CTSLLegendView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLLegendView ) );
  CTSLLegendView( CLPBaseComponent *a_control, CTSLLegendView ( CLPBaseClass::*a_getter )() );
  CTSLLegendView( CLPBaseComponent *a_control, CTSLLegendView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLegendView ) );
  CTSLLegendView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLLegendView( const CTSLLegendView &other );
  virtual ~CTSLLegendView();

public:
  CTSLLegendView & operator = ( const CTSLLegendView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLLegendView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLLegendView Value );
};
//------------------------------------------------------------------------------
class CTSLScopeLegendView : public CTSLLegendView
{
//DOM-IGNORE-BEGIN
  typedef CTSLLegendView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLLegendGroup &Channels;
  class CTSLLegendGroup &ChannelLinks;
  class CTSLLegendGroup &MarkerGroups;
  class CTSLLegendGroup &Zones;
  class CTSLLegendGroup &Ellipses;
  class CTSLLegendGroup &Cursors;
  class CTSLLegendGroup &CursorLinks;

public:
  CTSLScopeLegendView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeLegendView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeLegendView( CLPClassProperty *a_property, CTSLScopeLegendView ( CLPBaseClass::*a_getter )() );
  CTSLScopeLegendView( CLPClassProperty *a_property, CTSLScopeLegendView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeLegendView ) );
  CTSLScopeLegendView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeLegendView ) );
  CTSLScopeLegendView( CLPBaseComponent *a_control, CTSLScopeLegendView ( CLPBaseClass::*a_getter )() );
  CTSLScopeLegendView( CLPBaseComponent *a_control, CTSLScopeLegendView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeLegendView ) );
  CTSLScopeLegendView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeLegendView( const CTSLScopeLegendView &other );
  virtual ~CTSLScopeLegendView();

public:
  CTSLScopeLegendView & operator = ( const CTSLScopeLegendView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeLegendView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeLegendView Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayTitleLabel : public CTSLDisplayLabel
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayLabel inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLDisplayTitleLabel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayTitleLabel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayTitleLabel( CLPClassProperty *a_property, CTSLDisplayTitleLabel ( CLPBaseClass::*a_getter )() );
  CTSLDisplayTitleLabel( CLPClassProperty *a_property, CTSLDisplayTitleLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayTitleLabel ) );
  CTSLDisplayTitleLabel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayTitleLabel ) );
  CTSLDisplayTitleLabel( CLPBaseComponent *a_control, CTSLDisplayTitleLabel ( CLPBaseClass::*a_getter )() );
  CTSLDisplayTitleLabel( CLPBaseComponent *a_control, CTSLDisplayTitleLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayTitleLabel ) );
  CTSLDisplayTitleLabel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayTitleLabel( const CTSLDisplayTitleLabel &other );

public:
  CTSLDisplayTitleLabel & operator = ( const CTSLDisplayTitleLabel & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayTitleLabel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayTitleLabel Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayTitle : public CTSLOptionalView
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTFont &Font;

public:    // Properties
  CLPProperty<CTString> Text;

public:
  CTSLDisplayTitle( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayTitle( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayTitle( CLPClassProperty *a_property, CTSLDisplayTitle ( CLPBaseClass::*a_getter )() );
  CTSLDisplayTitle( CLPClassProperty *a_property, CTSLDisplayTitle ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayTitle ) );
  CTSLDisplayTitle( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayTitle ) );
  CTSLDisplayTitle( CLPBaseComponent *a_control, CTSLDisplayTitle ( CLPBaseClass::*a_getter )() );
  CTSLDisplayTitle( CLPBaseComponent *a_control, CTSLDisplayTitle ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayTitle ) );
  CTSLDisplayTitle( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayTitle( const CTSLDisplayTitle &other );
  virtual ~CTSLDisplayTitle();

public:
  CTSLDisplayTitle & operator = ( const CTSLDisplayTitle & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayTitle ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayTitle Value );
};
//------------------------------------------------------------------------------
class CTSLOptionalAxis : public CTSLOptionalView
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLOptionalAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLOptionalAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLOptionalAxis( CLPClassProperty *a_property, CTSLOptionalAxis ( CLPBaseClass::*a_getter )() );
  CTSLOptionalAxis( CLPClassProperty *a_property, CTSLOptionalAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalAxis ) );
  CTSLOptionalAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLOptionalAxis ) );
  CTSLOptionalAxis( CLPBaseComponent *a_control, CTSLOptionalAxis ( CLPBaseClass::*a_getter )() );
  CTSLOptionalAxis( CLPBaseComponent *a_control, CTSLOptionalAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLOptionalAxis ) );
  CTSLOptionalAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLOptionalAxis( const CTSLOptionalAxis &other );

public:
  CTSLOptionalAxis & operator = ( const CTSLOptionalAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLOptionalAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLOptionalAxis Value );
};
//------------------------------------------------------------------------------
class CTSLMinorTicks : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<unsigned int> Count;

public:
  CTSLMinorTicks( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLMinorTicks( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLMinorTicks( CLPClassProperty *a_property, CTSLMinorTicks ( CLPBaseClass::*a_getter )() );
  CTSLMinorTicks( CLPClassProperty *a_property, CTSLMinorTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMinorTicks ) );
  CTSLMinorTicks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLMinorTicks ) );
  CTSLMinorTicks( CLPBaseComponent *a_control, CTSLMinorTicks ( CLPBaseClass::*a_getter )() );
  CTSLMinorTicks( CLPBaseComponent *a_control, CTSLMinorTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMinorTicks ) );
  CTSLMinorTicks( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLMinorTicks( const CTSLMinorTicks &other );

public:
  CTSLMinorTicks & operator = ( const CTSLMinorTicks & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLMinorTicks ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLMinorTicks Value );
};
//------------------------------------------------------------------------------
class CTSLMajorTicksParam : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPEnumProperty<CTSLMajorTicksMode> Mode;

public:
  CTSLMajorTicksParam( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLMajorTicksParam( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLMajorTicksParam( CLPClassProperty *a_property, CTSLMajorTicksParam ( CLPBaseClass::*a_getter )() );
  CTSLMajorTicksParam( CLPClassProperty *a_property, CTSLMajorTicksParam ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMajorTicksParam ) );
  CTSLMajorTicksParam( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLMajorTicksParam ) );
  CTSLMajorTicksParam( CLPBaseComponent *a_control, CTSLMajorTicksParam ( CLPBaseClass::*a_getter )() );
  CTSLMajorTicksParam( CLPBaseComponent *a_control, CTSLMajorTicksParam ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMajorTicksParam ) );
  CTSLMajorTicksParam( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLMajorTicksParam( const CTSLMajorTicksParam &other );

public:
  CTSLMajorTicksParam & operator = ( const CTSLMajorTicksParam & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLMajorTicksParam ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLMajorTicksParam Value );
};
//------------------------------------------------------------------------------
class CTSLTicksStart : public CTSLMajorTicksParam
{
//DOM-IGNORE-BEGIN
  typedef CTSLMajorTicksParam inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<double> StartFrom;

public:
  CTSLTicksStart( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLTicksStart( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLTicksStart( CLPClassProperty *a_property, CTSLTicksStart ( CLPBaseClass::*a_getter )() );
  CTSLTicksStart( CLPClassProperty *a_property, CTSLTicksStart ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLTicksStart ) );
  CTSLTicksStart( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLTicksStart ) );
  CTSLTicksStart( CLPBaseComponent *a_control, CTSLTicksStart ( CLPBaseClass::*a_getter )() );
  CTSLTicksStart( CLPBaseComponent *a_control, CTSLTicksStart ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLTicksStart ) );
  CTSLTicksStart( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLTicksStart( const CTSLTicksStart &other );

public:
  CTSLTicksStart & operator = ( const CTSLTicksStart & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLTicksStart ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLTicksStart Value );
};
//------------------------------------------------------------------------------
class CTSLMajorTicks : public CTSLMajorTicksParam
{
//DOM-IGNORE-BEGIN
  typedef CTSLMajorTicksParam inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLTicksStart &StartFrom;

public:    // Properties
  CLPProperty<double> Step;

public:
  CTSLMajorTicks( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLMajorTicks( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLMajorTicks( CLPClassProperty *a_property, CTSLMajorTicks ( CLPBaseClass::*a_getter )() );
  CTSLMajorTicks( CLPClassProperty *a_property, CTSLMajorTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMajorTicks ) );
  CTSLMajorTicks( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLMajorTicks ) );
  CTSLMajorTicks( CLPBaseComponent *a_control, CTSLMajorTicks ( CLPBaseClass::*a_getter )() );
  CTSLMajorTicks( CLPBaseComponent *a_control, CTSLMajorTicks ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMajorTicks ) );
  CTSLMajorTicks( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLMajorTicks( const CTSLMajorTicks &other );
  virtual ~CTSLMajorTicks();

public:
  CTSLMajorTicks & operator = ( const CTSLMajorTicks & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLMajorTicks ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLMajorTicks Value );
};
//------------------------------------------------------------------------------
class CTSLTrackingOptionalAxis : public CTSLOptionalAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Events
//  void __stdcall OnCustomStep(VCLHANDLE Sender, double SampleValue, double & Step, bool & Draw);
  CLPEventProperty_4<16, void, VCLHANDLE, double, double &, bool &> OnCustomStep;

public:    // Class Properties
  class CTSLMinorTicks &MinorTicks;
  class CTSLMajorTicks &MajorTicks;

public:    // Properties
  CLPProperty<bool> TrackCursor;
  CLPProperty<CTColor> TrackColor;

public:
  CTSLTrackingOptionalAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLTrackingOptionalAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLTrackingOptionalAxis( CLPClassProperty *a_property, CTSLTrackingOptionalAxis ( CLPBaseClass::*a_getter )() );
  CTSLTrackingOptionalAxis( CLPClassProperty *a_property, CTSLTrackingOptionalAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLTrackingOptionalAxis ) );
  CTSLTrackingOptionalAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLTrackingOptionalAxis ) );
  CTSLTrackingOptionalAxis( CLPBaseComponent *a_control, CTSLTrackingOptionalAxis ( CLPBaseClass::*a_getter )() );
  CTSLTrackingOptionalAxis( CLPBaseComponent *a_control, CTSLTrackingOptionalAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLTrackingOptionalAxis ) );
  CTSLTrackingOptionalAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLTrackingOptionalAxis( const CTSLTrackingOptionalAxis &other );
  virtual ~CTSLTrackingOptionalAxis();

public:
  CTSLTrackingOptionalAxis & operator = ( const CTSLTrackingOptionalAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLTrackingOptionalAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLTrackingOptionalAxis Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayToolBarButton : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;

public:
  CTSLDisplayToolBarButton( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayToolBarButton( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayToolBarButton( CLPClassProperty *a_property, CTSLDisplayToolBarButton ( CLPBaseClass::*a_getter )() );
  CTSLDisplayToolBarButton( CLPClassProperty *a_property, CTSLDisplayToolBarButton ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBarButton ) );
  CTSLDisplayToolBarButton( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBarButton ) );
  CTSLDisplayToolBarButton( CLPBaseComponent *a_control, CTSLDisplayToolBarButton ( CLPBaseClass::*a_getter )() );
  CTSLDisplayToolBarButton( CLPBaseComponent *a_control, CTSLDisplayToolBarButton ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBarButton ) );
  CTSLDisplayToolBarButton( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayToolBarButton( const CTSLDisplayToolBarButton &other );

public:
  CTSLDisplayToolBarButton & operator = ( const CTSLDisplayToolBarButton & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayToolBarButton ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayToolBarButton Value );
};
//------------------------------------------------------------------------------
class CTSLBasicDisplayToolBar : public CTSLDisplayComponent
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayComponent inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;
  CLPProperty<bool> AutoHide;
  CLPProperty<CTColor> GlyphColor;
  CLPProperty<CTColor> BorderColor;
  CLPProperty<CTColor> ButtonColor;
  CLPProperty<CTColor> MouseOverBorderColor;
  CLPProperty<CTColor> MouseOverButtonColor;
  CLPProperty<CTColor> MouseDownBorderColor;
  CLPProperty<CTColor> MouseDownButtonColor;
  CLPProperty<CTColor> DisabledColor;
  CLPProperty<CTCursor> Cursor;

public:

public:
  CTSLBasicDisplayToolBar( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicDisplayToolBar( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicDisplayToolBar( CLPClassProperty *a_property, CTSLBasicDisplayToolBar ( CLPBaseClass::*a_getter )() );
  CTSLBasicDisplayToolBar( CLPClassProperty *a_property, CTSLBasicDisplayToolBar ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayToolBar ) );
  CTSLBasicDisplayToolBar( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayToolBar ) );
  CTSLBasicDisplayToolBar( CLPBaseComponent *a_control, CTSLBasicDisplayToolBar ( CLPBaseClass::*a_getter )() );
  CTSLBasicDisplayToolBar( CLPBaseComponent *a_control, CTSLBasicDisplayToolBar ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicDisplayToolBar ) );
  CTSLBasicDisplayToolBar( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicDisplayToolBar( const CTSLBasicDisplayToolBar &other );

public:
  CTSLBasicDisplayToolBar & operator = ( const CTSLBasicDisplayToolBar & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicDisplayToolBar ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicDisplayToolBar Value );
};
//------------------------------------------------------------------------------
class CTSLAxisToolBarButtons : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayToolBarButton &ZoomIn;
  class CTSLDisplayToolBarButton &ZoomOut;
  class CTSLDisplayToolBarButton &ZoomOff;
  class CTSLDisplayToolBarButton &ZoomOneDir;

public:
  CTSLAxisToolBarButtons( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLAxisToolBarButtons( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLAxisToolBarButtons( CLPClassProperty *a_property, CTSLAxisToolBarButtons ( CLPBaseClass::*a_getter )() );
  CTSLAxisToolBarButtons( CLPClassProperty *a_property, CTSLAxisToolBarButtons ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisToolBarButtons ) );
  CTSLAxisToolBarButtons( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAxisToolBarButtons ) );
  CTSLAxisToolBarButtons( CLPBaseComponent *a_control, CTSLAxisToolBarButtons ( CLPBaseClass::*a_getter )() );
  CTSLAxisToolBarButtons( CLPBaseComponent *a_control, CTSLAxisToolBarButtons ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisToolBarButtons ) );
  CTSLAxisToolBarButtons( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLAxisToolBarButtons( const CTSLAxisToolBarButtons &other );
  virtual ~CTSLAxisToolBarButtons();

public:
  CTSLAxisToolBarButtons & operator = ( const CTSLAxisToolBarButtons & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLAxisToolBarButtons ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLAxisToolBarButtons Value );
};
//------------------------------------------------------------------------------
class CTSLAxisToolBar : public CTSLBasicDisplayToolBar
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicDisplayToolBar inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLAxisToolBarButtons &Buttons;

public:
  CTSLAxisToolBar( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLAxisToolBar( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLAxisToolBar( CLPClassProperty *a_property, CTSLAxisToolBar ( CLPBaseClass::*a_getter )() );
  CTSLAxisToolBar( CLPClassProperty *a_property, CTSLAxisToolBar ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisToolBar ) );
  CTSLAxisToolBar( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAxisToolBar ) );
  CTSLAxisToolBar( CLPBaseComponent *a_control, CTSLAxisToolBar ( CLPBaseClass::*a_getter )() );
  CTSLAxisToolBar( CLPBaseComponent *a_control, CTSLAxisToolBar ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisToolBar ) );
  CTSLAxisToolBar( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLAxisToolBar( const CTSLAxisToolBar &other );
  virtual ~CTSLAxisToolBar();

public:
  CTSLAxisToolBar & operator = ( const CTSLAxisToolBar & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLAxisToolBar ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLAxisToolBar Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayAxis : public CTSLTrackingOptionalAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLTrackingOptionalAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Events
//  void __stdcall OnCustomLabel(VCLHANDLE Sender, double SampleValue, CTString & AxisLabel);
  CLPEventProperty_3<4, void, VCLHANDLE, double, CTString &> OnCustomLabel;

public:    // Class Properties
  class CTFont &Font;
  class CTSLAxisToolBar &ToolBar;
  class CTSLViewButtonSettings &Button;
  class CTSLDisplayTitleLabel &AxisLabel;
  class CTSLAssociatedChannelLinkList &AssociatedChannels;

public:    // Properties
  CLPProperty<CTColor> Color;
  CLPReadAccessProperty<CTSLDisplayAxis,double> CurrentMax;
  CLPReadAccessProperty<CTSLDisplayAxis,double> CurrentMin;

protected:
  double GetCurrentMax();
  double GetCurrentMin();
  CTSLAssociatedChannelLinkList GetVC_AssociatedChannels();

public:
  void SetTickText( CTString AValue );

public:
  CTSLDisplayAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayAxis( CLPClassProperty *a_property, CTSLDisplayAxis ( CLPBaseClass::*a_getter )() );
  CTSLDisplayAxis( CLPClassProperty *a_property, CTSLDisplayAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayAxis ) );
  CTSLDisplayAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayAxis ) );
  CTSLDisplayAxis( CLPBaseComponent *a_control, CTSLDisplayAxis ( CLPBaseClass::*a_getter )() );
  CTSLDisplayAxis( CLPBaseComponent *a_control, CTSLDisplayAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayAxis ) );
  CTSLDisplayAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayAxis( const CTSLDisplayAxis &other );
  virtual ~CTSLDisplayAxis();

public:
  CTSLDisplayAxis & operator = ( const CTSLDisplayAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayAxis Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayYAxis : public CTSLDisplayAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLAxisFormat &Format;

public:
  CTSLDisplayYAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayYAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayYAxis( CLPClassProperty *a_property, CTSLDisplayYAxis ( CLPBaseClass::*a_getter )() );
  CTSLDisplayYAxis( CLPClassProperty *a_property, CTSLDisplayYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayYAxis ) );
  CTSLDisplayYAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayYAxis ) );
  CTSLDisplayYAxis( CLPBaseComponent *a_control, CTSLDisplayYAxis ( CLPBaseClass::*a_getter )() );
  CTSLDisplayYAxis( CLPBaseComponent *a_control, CTSLDisplayYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayYAxis ) );
  CTSLDisplayYAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayYAxis( const CTSLDisplayYAxis &other );
  virtual ~CTSLDisplayYAxis();

public:
  CTSLDisplayYAxis & operator = ( const CTSLDisplayYAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayYAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayYAxis Value );
};
//------------------------------------------------------------------------------
class CTSLScopeAutoScalingSpace : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<unsigned int> Space;
  CLPProperty<unsigned int> Threshold;

public:
  CTSLScopeAutoScalingSpace( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeAutoScalingSpace( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeAutoScalingSpace( CLPClassProperty *a_property, CTSLScopeAutoScalingSpace ( CLPBaseClass::*a_getter )() );
  CTSLScopeAutoScalingSpace( CLPClassProperty *a_property, CTSLScopeAutoScalingSpace ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeAutoScalingSpace ) );
  CTSLScopeAutoScalingSpace( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeAutoScalingSpace ) );
  CTSLScopeAutoScalingSpace( CLPBaseComponent *a_control, CTSLScopeAutoScalingSpace ( CLPBaseClass::*a_getter )() );
  CTSLScopeAutoScalingSpace( CLPBaseComponent *a_control, CTSLScopeAutoScalingSpace ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeAutoScalingSpace ) );
  CTSLScopeAutoScalingSpace( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeAutoScalingSpace( const CTSLScopeAutoScalingSpace &other );

public:
  CTSLScopeAutoScalingSpace & operator = ( const CTSLScopeAutoScalingSpace & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeAutoScalingSpace ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeAutoScalingSpace Value );
};
//------------------------------------------------------------------------------
class CTSLScopeAutoScaling : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLScopeAutoScalingSpace &SpaceAbove;
  class CTSLScopeAutoScalingSpace &SpaceBelow;

public:    // Properties
  CLPProperty<bool> Enabled;
  CLPProperty<unsigned int> MaxHistory;

public:
  CTSLScopeAutoScaling( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeAutoScaling( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeAutoScaling( CLPClassProperty *a_property, CTSLScopeAutoScaling ( CLPBaseClass::*a_getter )() );
  CTSLScopeAutoScaling( CLPClassProperty *a_property, CTSLScopeAutoScaling ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeAutoScaling ) );
  CTSLScopeAutoScaling( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeAutoScaling ) );
  CTSLScopeAutoScaling( CLPBaseComponent *a_control, CTSLScopeAutoScaling ( CLPBaseClass::*a_getter )() );
  CTSLScopeAutoScaling( CLPBaseComponent *a_control, CTSLScopeAutoScaling ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeAutoScaling ) );
  CTSLScopeAutoScaling( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeAutoScaling( const CTSLScopeAutoScaling &other );
  virtual ~CTSLScopeAutoScaling();

public:
  CTSLScopeAutoScaling & operator = ( const CTSLScopeAutoScaling & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeAutoScaling ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeAutoScaling Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayAxisCursorSettings : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> SnapToSample;

public:
  CTSLDisplayAxisCursorSettings( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayAxisCursorSettings( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayAxisCursorSettings( CLPClassProperty *a_property, CTSLDisplayAxisCursorSettings ( CLPBaseClass::*a_getter )() );
  CTSLDisplayAxisCursorSettings( CLPClassProperty *a_property, CTSLDisplayAxisCursorSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayAxisCursorSettings ) );
  CTSLDisplayAxisCursorSettings( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayAxisCursorSettings ) );
  CTSLDisplayAxisCursorSettings( CLPBaseComponent *a_control, CTSLDisplayAxisCursorSettings ( CLPBaseClass::*a_getter )() );
  CTSLDisplayAxisCursorSettings( CLPBaseComponent *a_control, CTSLDisplayAxisCursorSettings ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayAxisCursorSettings ) );
  CTSLDisplayAxisCursorSettings( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayAxisCursorSettings( const CTSLDisplayAxisCursorSettings &other );

public:
  CTSLDisplayAxisCursorSettings & operator = ( const CTSLDisplayAxisCursorSettings & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayAxisCursorSettings ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayAxisCursorSettings Value );
};
//------------------------------------------------------------------------------
class CTSLToolBarPosition : public CTSLCoordinateOffset
{
//DOM-IGNORE-BEGIN
  typedef CTSLCoordinateOffset inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPEnumProperty<CTSLToolBarHostView> HostView;

public:
  CTSLToolBarPosition( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLToolBarPosition( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLToolBarPosition( CLPClassProperty *a_property, CTSLToolBarPosition ( CLPBaseClass::*a_getter )() );
  CTSLToolBarPosition( CLPClassProperty *a_property, CTSLToolBarPosition ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLToolBarPosition ) );
  CTSLToolBarPosition( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLToolBarPosition ) );
  CTSLToolBarPosition( CLPBaseComponent *a_control, CTSLToolBarPosition ( CLPBaseClass::*a_getter )() );
  CTSLToolBarPosition( CLPBaseComponent *a_control, CTSLToolBarPosition ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLToolBarPosition ) );
  CTSLToolBarPosition( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLToolBarPosition( const CTSLToolBarPosition &other );

public:
  CTSLToolBarPosition & operator = ( const CTSLToolBarPosition & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLToolBarPosition ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLToolBarPosition Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayToolBarButtons : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayToolBarButton &Setup;
  class CTSLDisplayToolBarButton &Hold;
  class CTSLDisplayToolBarButton &ZoomOff;
  class CTSLDisplayToolBarButton &ZoomPrevious;
  class CTSLDisplayToolBarButton &ZoomNext;
  class CTSLDisplayToolBarButton &ZoomIn;
  class CTSLDisplayToolBarButton &ZoomOut;
  class CTSLDisplayToolBarButton &ZoomMode;
  class CTSLDisplayToolBarButton &XYZoomOn;
  class CTSLDisplayToolBarButton &Copy;
  class CTSLDisplayToolBarButton &Print;
  class CTSLDisplayToolBarButton &Save;

public:
  CTSLDisplayToolBarButtons( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayToolBarButtons( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayToolBarButtons( CLPClassProperty *a_property, CTSLDisplayToolBarButtons ( CLPBaseClass::*a_getter )() );
  CTSLDisplayToolBarButtons( CLPClassProperty *a_property, CTSLDisplayToolBarButtons ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBarButtons ) );
  CTSLDisplayToolBarButtons( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBarButtons ) );
  CTSLDisplayToolBarButtons( CLPBaseComponent *a_control, CTSLDisplayToolBarButtons ( CLPBaseClass::*a_getter )() );
  CTSLDisplayToolBarButtons( CLPBaseComponent *a_control, CTSLDisplayToolBarButtons ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBarButtons ) );
  CTSLDisplayToolBarButtons( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayToolBarButtons( const CTSLDisplayToolBarButtons &other );
  virtual ~CTSLDisplayToolBarButtons();

public:
  CTSLDisplayToolBarButtons & operator = ( const CTSLDisplayToolBarButtons & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayToolBarButtons ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayToolBarButtons Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayToolBar : public CTSLBasicDisplayToolBar
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicDisplayToolBar inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLToolBarPosition &Position;
  class CTSLDisplayToolBarButtons &Buttons;

public:
  CTSLDisplayToolBar( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayToolBar( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayToolBar( CLPClassProperty *a_property, CTSLDisplayToolBar ( CLPBaseClass::*a_getter )() );
  CTSLDisplayToolBar( CLPClassProperty *a_property, CTSLDisplayToolBar ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBar ) );
  CTSLDisplayToolBar( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBar ) );
  CTSLDisplayToolBar( CLPBaseComponent *a_control, CTSLDisplayToolBar ( CLPBaseClass::*a_getter )() );
  CTSLDisplayToolBar( CLPBaseComponent *a_control, CTSLDisplayToolBar ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayToolBar ) );
  CTSLDisplayToolBar( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayToolBar( const CTSLDisplayToolBar &other );
  virtual ~CTSLDisplayToolBar();

public:
  CTSLDisplayToolBar & operator = ( const CTSLDisplayToolBar & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayToolBar ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayToolBar Value );
};
//------------------------------------------------------------------------------
class CTSLBasicScopeYAxis : public CTSLDisplayYAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayYAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLBasicScopeAxisValue &Min;
  class CTSLBasicScopeAxisValue &Max;
  class CTSLScopeAutoScaling &AutoScaling;
  class CTSLDisplayAxisCursorSettings &CursorSettings;
  class CTSLDisplayAxisZoom &Zooming;
  class CTSLDisplayGridDirectionalLinesSettings &DataView;

public:    // Properties
  CLPEnumProperty<CTSLScaleMode> ScaleMode;
  CLPProperty<bool> Reversed;

public:
  void ZoomBy( double AValue );
  void ZoomBy( double AValue, bool SaveHistory );
  void ZoomTo( double AMin, double AMax );
  void ZoomTo( double AMin, double AMax, bool SaveHistory );
  void ZoomToData( double AMin, double AMax );
  void ZoomToData( double AMin, double AMax, bool SaveHistory );

public:
  CTSLBasicScopeYAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicScopeYAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicScopeYAxis( CLPClassProperty *a_property, CTSLBasicScopeYAxis ( CLPBaseClass::*a_getter )() );
  CTSLBasicScopeYAxis( CLPClassProperty *a_property, CTSLBasicScopeYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicScopeYAxis ) );
  CTSLBasicScopeYAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicScopeYAxis ) );
  CTSLBasicScopeYAxis( CLPBaseComponent *a_control, CTSLBasicScopeYAxis ( CLPBaseClass::*a_getter )() );
  CTSLBasicScopeYAxis( CLPBaseComponent *a_control, CTSLBasicScopeYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicScopeYAxis ) );
  CTSLBasicScopeYAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicScopeYAxis( const CTSLBasicScopeYAxis &other );
  virtual ~CTSLBasicScopeYAxis();

public:
  CTSLBasicScopeYAxis & operator = ( const CTSLBasicScopeYAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicScopeYAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicScopeYAxis Value );
};
//------------------------------------------------------------------------------
class CTSLAdditionalScopeYAxis : public CTSLBasicScopeYAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicScopeYAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLAdditionalScopeYAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLAdditionalScopeYAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLAdditionalScopeYAxis( CLPClassProperty *a_property, CTSLAdditionalScopeYAxis ( CLPBaseClass::*a_getter )() );
  CTSLAdditionalScopeYAxis( CLPClassProperty *a_property, CTSLAdditionalScopeYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAdditionalScopeYAxis ) );
  CTSLAdditionalScopeYAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAdditionalScopeYAxis ) );
  CTSLAdditionalScopeYAxis( CLPBaseComponent *a_control, CTSLAdditionalScopeYAxis ( CLPBaseClass::*a_getter )() );
  CTSLAdditionalScopeYAxis( CLPBaseComponent *a_control, CTSLAdditionalScopeYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAdditionalScopeYAxis ) );
  CTSLAdditionalScopeYAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLAdditionalScopeYAxis( const CTSLAdditionalScopeYAxis &other );

public:
  CTSLAdditionalScopeYAxis & operator = ( const CTSLAdditionalScopeYAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLAdditionalScopeYAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLAdditionalScopeYAxis Value );
};
//------------------------------------------------------------------------------
class CTSLScopeYAxesCollectionItem : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLAdditionalScopeYAxis &Axis;

public:
  CTSLScopeYAxesCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeYAxesCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeYAxesCollectionItem( CLPClassProperty *a_property, CTSLScopeYAxesCollectionItem ( CLPBaseClass::*a_getter )() );
  CTSLScopeYAxesCollectionItem( CLPClassProperty *a_property, CTSLScopeYAxesCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeYAxesCollectionItem ) );
  CTSLScopeYAxesCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeYAxesCollectionItem ) );
  CTSLScopeYAxesCollectionItem( CLPBaseComponent *a_control, CTSLScopeYAxesCollectionItem ( CLPBaseClass::*a_getter )() );
  CTSLScopeYAxesCollectionItem( CLPBaseComponent *a_control, CTSLScopeYAxesCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeYAxesCollectionItem ) );
  CTSLScopeYAxesCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeYAxesCollectionItem( const CTSLScopeYAxesCollectionItem &other );
  virtual ~CTSLScopeYAxesCollectionItem();

public:
  CTSLScopeYAxesCollectionItem & operator = ( const CTSLScopeYAxesCollectionItem & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeYAxesCollectionItem ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeYAxesCollectionItem Value );
};
//------------------------------------------------------------------------------
class CTSLScopeYAxesCollection : public CLPCollectionProperty<CTSLScopeYAxesCollectionItem>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<CTSLScopeYAxesCollectionItem> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLScopeYAxesCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeYAxesCollection( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeYAxesCollection( CLPClassProperty *a_property, CTSLScopeYAxesCollection ( CLPBaseClass::*a_getter )() );
  CTSLScopeYAxesCollection( CLPClassProperty *a_property, CTSLScopeYAxesCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeYAxesCollection ) );
  CTSLScopeYAxesCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeYAxesCollection ) );
  CTSLScopeYAxesCollection( CLPBaseComponent *a_control, CTSLScopeYAxesCollection ( CLPBaseClass::*a_getter )() );
  CTSLScopeYAxesCollection( CLPBaseComponent *a_control, CTSLScopeYAxesCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeYAxesCollection ) );
  CTSLScopeYAxesCollection( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeYAxesCollection( const CTSLScopeYAxesCollection &other );

public:
  CTSLScopeYAxesCollection & operator = ( const CTSLScopeYAxesCollection & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeYAxesCollection ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeYAxesCollection Value );
};
//------------------------------------------------------------------------------
class CTSLScopeYAxis : public CTSLBasicScopeYAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicScopeYAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLScopeYAxesCollection &AdditionalAxes;

public:
  CTSLScopeYAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeYAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeYAxis( CLPClassProperty *a_property, CTSLScopeYAxis ( CLPBaseClass::*a_getter )() );
  CTSLScopeYAxis( CLPClassProperty *a_property, CTSLScopeYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeYAxis ) );
  CTSLScopeYAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeYAxis ) );
  CTSLScopeYAxis( CLPBaseComponent *a_control, CTSLScopeYAxis ( CLPBaseClass::*a_getter )() );
  CTSLScopeYAxis( CLPBaseComponent *a_control, CTSLScopeYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeYAxis ) );
  CTSLScopeYAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeYAxis( const CTSLScopeYAxis &other );
  virtual ~CTSLScopeYAxis();

public:
  CTSLScopeYAxis & operator = ( const CTSLScopeYAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeYAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeYAxis Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayXAxis : public CTSLDisplayAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPReadAccessProperty<CTSLDisplayXAxis,int> Samples;

protected:
  int GetVC_Samples();

public:
  CTSLDisplayXAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayXAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayXAxis( CLPClassProperty *a_property, CTSLDisplayXAxis ( CLPBaseClass::*a_getter )() );
  CTSLDisplayXAxis( CLPClassProperty *a_property, CTSLDisplayXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayXAxis ) );
  CTSLDisplayXAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayXAxis ) );
  CTSLDisplayXAxis( CLPBaseComponent *a_control, CTSLDisplayXAxis ( CLPBaseClass::*a_getter )() );
  CTSLDisplayXAxis( CLPBaseComponent *a_control, CTSLDisplayXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayXAxis ) );
  CTSLDisplayXAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayXAxis( const CTSLDisplayXAxis &other );

public:
  CTSLDisplayXAxis & operator = ( const CTSLDisplayXAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayXAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayXAxis Value );
};
//------------------------------------------------------------------------------
class CTSLBasicAxisValue : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> AutoScale;
  CLPProperty<double> Value;

public:
  CTSLBasicAxisValue( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicAxisValue( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicAxisValue( CLPClassProperty *a_property, CTSLBasicAxisValue ( CLPBaseClass::*a_getter )() );
  CTSLBasicAxisValue( CLPClassProperty *a_property, CTSLBasicAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicAxisValue ) );
  CTSLBasicAxisValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicAxisValue ) );
  CTSLBasicAxisValue( CLPBaseComponent *a_control, CTSLBasicAxisValue ( CLPBaseClass::*a_getter )() );
  CTSLBasicAxisValue( CLPBaseComponent *a_control, CTSLBasicAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicAxisValue ) );
  CTSLBasicAxisValue( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicAxisValue( const CTSLBasicAxisValue &other );

public:
  CTSLBasicAxisValue & operator = ( const CTSLBasicAxisValue & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicAxisValue ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicAxisValue Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayPersistent : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLDisplayPersistent( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayPersistent( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayPersistent( CLPClassProperty *a_property, CTSLDisplayPersistent ( CLPBaseClass::*a_getter )() );
  CTSLDisplayPersistent( CLPClassProperty *a_property, CTSLDisplayPersistent ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayPersistent ) );
  CTSLDisplayPersistent( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayPersistent ) );
  CTSLDisplayPersistent( CLPBaseComponent *a_control, CTSLDisplayPersistent ( CLPBaseClass::*a_getter )() );
  CTSLDisplayPersistent( CLPBaseComponent *a_control, CTSLDisplayPersistent ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayPersistent ) );
  CTSLDisplayPersistent( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayPersistent( const CTSLDisplayPersistent &other );

public:
  CTSLDisplayPersistent & operator = ( const CTSLDisplayPersistent & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayPersistent ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayPersistent Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayOptionalValue : public CTSLDisplayPersistent
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayPersistent inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<double> Value;
  CLPProperty<bool> Enabled;

public:
  CTSLDisplayOptionalValue( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayOptionalValue( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayOptionalValue( CLPClassProperty *a_property, CTSLDisplayOptionalValue ( CLPBaseClass::*a_getter )() );
  CTSLDisplayOptionalValue( CLPClassProperty *a_property, CTSLDisplayOptionalValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayOptionalValue ) );
  CTSLDisplayOptionalValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayOptionalValue ) );
  CTSLDisplayOptionalValue( CLPBaseComponent *a_control, CTSLDisplayOptionalValue ( CLPBaseClass::*a_getter )() );
  CTSLDisplayOptionalValue( CLPBaseComponent *a_control, CTSLDisplayOptionalValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayOptionalValue ) );
  CTSLDisplayOptionalValue( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayOptionalValue( const CTSLDisplayOptionalValue &other );

public:
  CTSLDisplayOptionalValue & operator = ( const CTSLDisplayOptionalValue & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayOptionalValue ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayOptionalValue Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayValueRange : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayOptionalValue &High;
  class CTSLDisplayOptionalValue &Low;

public:
  CTSLDisplayValueRange( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayValueRange( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayValueRange( CLPClassProperty *a_property, CTSLDisplayValueRange ( CLPBaseClass::*a_getter )() );
  CTSLDisplayValueRange( CLPClassProperty *a_property, CTSLDisplayValueRange ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayValueRange ) );
  CTSLDisplayValueRange( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayValueRange ) );
  CTSLDisplayValueRange( CLPBaseComponent *a_control, CTSLDisplayValueRange ( CLPBaseClass::*a_getter )() );
  CTSLDisplayValueRange( CLPBaseComponent *a_control, CTSLDisplayValueRange ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayValueRange ) );
  CTSLDisplayValueRange( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayValueRange( const CTSLDisplayValueRange &other );
  virtual ~CTSLDisplayValueRange();

public:
  CTSLDisplayValueRange & operator = ( const CTSLDisplayValueRange & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayValueRange ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayValueRange Value );
};
//------------------------------------------------------------------------------
class CTSLBasicScopeAxisValue : public CTSLBasicAxisValue
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicAxisValue inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayValueRange &Range;

public:
  CTSLBasicScopeAxisValue( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicScopeAxisValue( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicScopeAxisValue( CLPClassProperty *a_property, CTSLBasicScopeAxisValue ( CLPBaseClass::*a_getter )() );
  CTSLBasicScopeAxisValue( CLPClassProperty *a_property, CTSLBasicScopeAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicScopeAxisValue ) );
  CTSLBasicScopeAxisValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicScopeAxisValue ) );
  CTSLBasicScopeAxisValue( CLPBaseComponent *a_control, CTSLBasicScopeAxisValue ( CLPBaseClass::*a_getter )() );
  CTSLBasicScopeAxisValue( CLPBaseComponent *a_control, CTSLBasicScopeAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicScopeAxisValue ) );
  CTSLBasicScopeAxisValue( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicScopeAxisValue( const CTSLBasicScopeAxisValue &other );
  virtual ~CTSLBasicScopeAxisValue();

public:
  CTSLBasicScopeAxisValue & operator = ( const CTSLBasicScopeAxisValue & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicScopeAxisValue ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicScopeAxisValue Value );
};
//------------------------------------------------------------------------------
class CTSLScopeAxisValue : public CTSLBasicScopeAxisValue
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicScopeAxisValue inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLBasicAxisValue &Tick;

public:
  CTSLScopeAxisValue( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeAxisValue( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeAxisValue( CLPClassProperty *a_property, CTSLScopeAxisValue ( CLPBaseClass::*a_getter )() );
  CTSLScopeAxisValue( CLPClassProperty *a_property, CTSLScopeAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeAxisValue ) );
  CTSLScopeAxisValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeAxisValue ) );
  CTSLScopeAxisValue( CLPBaseComponent *a_control, CTSLScopeAxisValue ( CLPBaseClass::*a_getter )() );
  CTSLScopeAxisValue( CLPBaseComponent *a_control, CTSLScopeAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeAxisValue ) );
  CTSLScopeAxisValue( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeAxisValue( const CTSLScopeAxisValue &other );
  virtual ~CTSLScopeAxisValue();

public:
  CTSLScopeAxisValue & operator = ( const CTSLScopeAxisValue & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeAxisValue ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeAxisValue Value );
};
//------------------------------------------------------------------------------
class CTSLMaxScopeAxisValue : public CTSLScopeAxisValue
{
//DOM-IGNORE-BEGIN
  typedef CTSLScopeAxisValue inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPEnumProperty<CTSLMaxAxisMode> Mode;

public:
  CTSLMaxScopeAxisValue( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLMaxScopeAxisValue( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLMaxScopeAxisValue( CLPClassProperty *a_property, CTSLMaxScopeAxisValue ( CLPBaseClass::*a_getter )() );
  CTSLMaxScopeAxisValue( CLPClassProperty *a_property, CTSLMaxScopeAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMaxScopeAxisValue ) );
  CTSLMaxScopeAxisValue( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLMaxScopeAxisValue ) );
  CTSLMaxScopeAxisValue( CLPBaseComponent *a_control, CTSLMaxScopeAxisValue ( CLPBaseClass::*a_getter )() );
  CTSLMaxScopeAxisValue( CLPBaseComponent *a_control, CTSLMaxScopeAxisValue ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMaxScopeAxisValue ) );
  CTSLMaxScopeAxisValue( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLMaxScopeAxisValue( const CTSLMaxScopeAxisValue &other );

public:
  CTSLMaxScopeAxisValue & operator = ( const CTSLMaxScopeAxisValue & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLMaxScopeAxisValue ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLMaxScopeAxisValue Value );
};
//------------------------------------------------------------------------------
class CTSLScopeMaxSample : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Autosize;
  CLPProperty<unsigned int> Value;

public:
  CTSLScopeMaxSample( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeMaxSample( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeMaxSample( CLPClassProperty *a_property, CTSLScopeMaxSample ( CLPBaseClass::*a_getter )() );
  CTSLScopeMaxSample( CLPClassProperty *a_property, CTSLScopeMaxSample ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMaxSample ) );
  CTSLScopeMaxSample( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeMaxSample ) );
  CTSLScopeMaxSample( CLPBaseComponent *a_control, CTSLScopeMaxSample ( CLPBaseClass::*a_getter )() );
  CTSLScopeMaxSample( CLPBaseComponent *a_control, CTSLScopeMaxSample ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeMaxSample ) );
  CTSLScopeMaxSample( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeMaxSample( const CTSLScopeMaxSample &other );

public:
  CTSLScopeMaxSample & operator = ( const CTSLScopeMaxSample & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeMaxSample ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeMaxSample Value );
};
//------------------------------------------------------------------------------
class CTSLScopeXAxisUnitScale : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> AutoScale;
  CLPProperty<int> Exponent;

public:
  CTSLScopeXAxisUnitScale( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeXAxisUnitScale( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeXAxisUnitScale( CLPClassProperty *a_property, CTSLScopeXAxisUnitScale ( CLPBaseClass::*a_getter )() );
  CTSLScopeXAxisUnitScale( CLPClassProperty *a_property, CTSLScopeXAxisUnitScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxisUnitScale ) );
  CTSLScopeXAxisUnitScale( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeXAxisUnitScale ) );
  CTSLScopeXAxisUnitScale( CLPBaseComponent *a_control, CTSLScopeXAxisUnitScale ( CLPBaseClass::*a_getter )() );
  CTSLScopeXAxisUnitScale( CLPBaseComponent *a_control, CTSLScopeXAxisUnitScale ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxisUnitScale ) );
  CTSLScopeXAxisUnitScale( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeXAxisUnitScale( const CTSLScopeXAxisUnitScale &other );

public:
  CTSLScopeXAxisUnitScale & operator = ( const CTSLScopeXAxisUnitScale & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeXAxisUnitScale ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeXAxisUnitScale Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayAxisZoom : public CTSLDisplayPersistent
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayPersistent inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayValueRange &Range;

public:    // Properties
  CLPReadAccessProperty<CTSLDisplayAxisZoom,double> Max;
  CLPReadAccessProperty<CTSLDisplayAxisZoom,double> Min;
  CLPReadAccessProperty<CTSLDisplayAxisZoom,bool> IsZoomed;

protected:
  double GetMax();
  double GetMin();
  bool GetIsZoomed();

public:
  CTSLDisplayAxisZoom( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayAxisZoom( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayAxisZoom( CLPClassProperty *a_property, CTSLDisplayAxisZoom ( CLPBaseClass::*a_getter )() );
  CTSLDisplayAxisZoom( CLPClassProperty *a_property, CTSLDisplayAxisZoom ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayAxisZoom ) );
  CTSLDisplayAxisZoom( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayAxisZoom ) );
  CTSLDisplayAxisZoom( CLPBaseComponent *a_control, CTSLDisplayAxisZoom ( CLPBaseClass::*a_getter )() );
  CTSLDisplayAxisZoom( CLPBaseComponent *a_control, CTSLDisplayAxisZoom ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayAxisZoom ) );
  CTSLDisplayAxisZoom( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayAxisZoom( const CTSLDisplayAxisZoom &other );
  virtual ~CTSLDisplayAxisZoom();

public:
  CTSLDisplayAxisZoom & operator = ( const CTSLDisplayAxisZoom & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayAxisZoom ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayAxisZoom Value );
};
//------------------------------------------------------------------------------
class CTSLBasicScopeXAxis : public CTSLDisplayXAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayXAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLAxisFormat &Format;
  class CTSLDisplayAxisCursorSettings &CursorSettings;
  class CTSLScopeXAxisUnitScale &UnitScale;
  class CTSLScopeAxisValue &Min;
  class CTSLMaxScopeAxisValue &Max;
  class CTSLScopeMaxSample &MaxSample;
  class CTSLDisplayAxisZoom &Zooming;
  class CTSLDisplayGridDirectionalLinesSettings &DataView;

public:    // Properties
  CLPEnumProperty<CTSLDisplayAxisTicksMode> TicksMode;
  CLPEnumProperty<CTSLScaleMode> ScaleMode;

public:
  void ZoomBy( double AValue );
  void ZoomBy( double AValue, bool SaveHistory );
  void ZoomTo( double AMin, double AMax );
  void ZoomTo( double AMin, double AMax, bool SaveHistory );
  void ZoomToData( double AMin, double AMax );
  void ZoomToData( double AMin, double AMax, bool SaveHistory );

public:
  CTSLBasicScopeXAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicScopeXAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicScopeXAxis( CLPClassProperty *a_property, CTSLBasicScopeXAxis ( CLPBaseClass::*a_getter )() );
  CTSLBasicScopeXAxis( CLPClassProperty *a_property, CTSLBasicScopeXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicScopeXAxis ) );
  CTSLBasicScopeXAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicScopeXAxis ) );
  CTSLBasicScopeXAxis( CLPBaseComponent *a_control, CTSLBasicScopeXAxis ( CLPBaseClass::*a_getter )() );
  CTSLBasicScopeXAxis( CLPBaseComponent *a_control, CTSLBasicScopeXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicScopeXAxis ) );
  CTSLBasicScopeXAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicScopeXAxis( const CTSLBasicScopeXAxis &other );
  virtual ~CTSLBasicScopeXAxis();

public:
  CTSLBasicScopeXAxis & operator = ( const CTSLBasicScopeXAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicScopeXAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicScopeXAxis Value );
};
//------------------------------------------------------------------------------
class CTSLAdditionalScopeXAxis : public CTSLBasicScopeXAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicScopeXAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLAdditionalScopeXAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLAdditionalScopeXAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLAdditionalScopeXAxis( CLPClassProperty *a_property, CTSLAdditionalScopeXAxis ( CLPBaseClass::*a_getter )() );
  CTSLAdditionalScopeXAxis( CLPClassProperty *a_property, CTSLAdditionalScopeXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAdditionalScopeXAxis ) );
  CTSLAdditionalScopeXAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAdditionalScopeXAxis ) );
  CTSLAdditionalScopeXAxis( CLPBaseComponent *a_control, CTSLAdditionalScopeXAxis ( CLPBaseClass::*a_getter )() );
  CTSLAdditionalScopeXAxis( CLPBaseComponent *a_control, CTSLAdditionalScopeXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAdditionalScopeXAxis ) );
  CTSLAdditionalScopeXAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLAdditionalScopeXAxis( const CTSLAdditionalScopeXAxis &other );

public:
  CTSLAdditionalScopeXAxis & operator = ( const CTSLAdditionalScopeXAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLAdditionalScopeXAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLAdditionalScopeXAxis Value );
};
//------------------------------------------------------------------------------
class CTSLScopeXAxesCollectionItem : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLAdditionalScopeXAxis &Axis;

public:
  CTSLScopeXAxesCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeXAxesCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeXAxesCollectionItem( CLPClassProperty *a_property, CTSLScopeXAxesCollectionItem ( CLPBaseClass::*a_getter )() );
  CTSLScopeXAxesCollectionItem( CLPClassProperty *a_property, CTSLScopeXAxesCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxesCollectionItem ) );
  CTSLScopeXAxesCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeXAxesCollectionItem ) );
  CTSLScopeXAxesCollectionItem( CLPBaseComponent *a_control, CTSLScopeXAxesCollectionItem ( CLPBaseClass::*a_getter )() );
  CTSLScopeXAxesCollectionItem( CLPBaseComponent *a_control, CTSLScopeXAxesCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxesCollectionItem ) );
  CTSLScopeXAxesCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeXAxesCollectionItem( const CTSLScopeXAxesCollectionItem &other );
  virtual ~CTSLScopeXAxesCollectionItem();

public:
  CTSLScopeXAxesCollectionItem & operator = ( const CTSLScopeXAxesCollectionItem & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeXAxesCollectionItem ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeXAxesCollectionItem Value );
};
//------------------------------------------------------------------------------
class CTSLScopeXAxesCollection : public CLPCollectionProperty<CTSLScopeXAxesCollectionItem>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<CTSLScopeXAxesCollectionItem> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLScopeXAxesCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeXAxesCollection( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeXAxesCollection( CLPClassProperty *a_property, CTSLScopeXAxesCollection ( CLPBaseClass::*a_getter )() );
  CTSLScopeXAxesCollection( CLPClassProperty *a_property, CTSLScopeXAxesCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxesCollection ) );
  CTSLScopeXAxesCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeXAxesCollection ) );
  CTSLScopeXAxesCollection( CLPBaseComponent *a_control, CTSLScopeXAxesCollection ( CLPBaseClass::*a_getter )() );
  CTSLScopeXAxesCollection( CLPBaseComponent *a_control, CTSLScopeXAxesCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxesCollection ) );
  CTSLScopeXAxesCollection( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeXAxesCollection( const CTSLScopeXAxesCollection &other );

public:
  CTSLScopeXAxesCollection & operator = ( const CTSLScopeXAxesCollection & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeXAxesCollection ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeXAxesCollection Value );
};
//------------------------------------------------------------------------------
class CTSLScopeXAxis : public CTSLBasicScopeXAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicScopeXAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLScopeXAxesCollection &AdditionalAxes;

public:
  CTSLScopeXAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeXAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeXAxis( CLPClassProperty *a_property, CTSLScopeXAxis ( CLPBaseClass::*a_getter )() );
  CTSLScopeXAxis( CLPClassProperty *a_property, CTSLScopeXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxis ) );
  CTSLScopeXAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeXAxis ) );
  CTSLScopeXAxis( CLPBaseComponent *a_control, CTSLScopeXAxis ( CLPBaseClass::*a_getter )() );
  CTSLScopeXAxis( CLPBaseComponent *a_control, CTSLScopeXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeXAxis ) );
  CTSLScopeXAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeXAxis( const CTSLScopeXAxis &other );
  virtual ~CTSLScopeXAxis();

public:
  CTSLScopeXAxis & operator = ( const CTSLScopeXAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeXAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeXAxis Value );
};
//------------------------------------------------------------------------------
class CTSLScopeChannels : public CTSLDisplayChannels<CTSLScopeChannel>
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayChannels<CTSLScopeChannel> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Events
//  void __stdcall OnClick(VCLHANDLE Sender, int ChannelIndex, int BeginSampleIndex, int EndSampleIndex, CTSLRealPoint & ClickedValue, bool & Handled);
  CLPEventProperty_6<0, void, VCLHANDLE, int, int, int, CTSLRealPoint &, bool &> OnClick;

public:
  CTSLScopeChannels( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLScopeChannels( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLScopeChannels( CLPClassProperty *a_property, CTSLScopeChannels ( CLPBaseClass::*a_getter )() );
  CTSLScopeChannels( CLPClassProperty *a_property, CTSLScopeChannels ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannels ) );
  CTSLScopeChannels( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLScopeChannels ) );
  CTSLScopeChannels( CLPBaseComponent *a_control, CTSLScopeChannels ( CLPBaseClass::*a_getter )() );
  CTSLScopeChannels( CLPBaseComponent *a_control, CTSLScopeChannels ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLScopeChannels ) );
  CTSLScopeChannels( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLScopeChannels( const CTSLScopeChannels &other );

public:
  CTSLScopeChannels & operator = ( const CTSLScopeChannels & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLScopeChannels ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLScopeChannels Value );
};
//------------------------------------------------------------------------------
class CTSLDataDisplay : public CTLPControlDrawLayer
{
//DOM-IGNORE-BEGIN
  typedef CTLPControlDrawLayer inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Events
//  void __stdcall OnZoomChanged(VCLHANDLE Sender, CTSLZoomOperation ZoomOperation, CTSLRealRanges & ZoomValues);
  CLPEventProperty_3<12, void, VCLHANDLE, CTSLZoomOperation, CTSLRealRanges &> OnZoomChanged;
//  void __stdcall OnKeyDown(VCLHANDLE Sender, unsigned short & Key, CTShiftState Shift);
  CLPEventProperty_3<0, void, VCLHANDLE, unsigned short &, CTShiftState> OnKeyDown;
//  void __stdcall OnKeyPress(VCLHANDLE Sender, char & Key);
  CLPEventProperty_2<0, void, VCLHANDLE, char &> OnKeyPress;
//  void __stdcall OnKeyUp(VCLHANDLE Sender, unsigned short & Key, CTShiftState Shift);
  CLPEventProperty_3<0, void, VCLHANDLE, unsigned short &, CTShiftState> OnKeyUp;
//  void __stdcall OnClick(VCLHANDLE Sender);
  CLPEventProperty_1<0, void, VCLHANDLE> OnClick;
//  void __stdcall OnDblClick(VCLHANDLE Sender);
  CLPEventProperty_1<0, void, VCLHANDLE> OnDblClick;
//  void __stdcall OnMouseDown(VCLHANDLE Sender, CTMouseButton Button, CTShiftState Shift, int X, int Y);
  CLPEventProperty_5<192, void, VCLHANDLE, CTMouseButton, CTShiftState, int, int> OnMouseDown;
//  void __stdcall OnMouseMove(VCLHANDLE Sender, CTShiftState Shift, int X, int Y);
  CLPEventProperty_4<0, void, VCLHANDLE, CTShiftState, int, int> OnMouseMove;
//  void __stdcall OnMouseUp(VCLHANDLE Sender, CTMouseButton Button, CTShiftState Shift, int X, int Y);
  CLPEventProperty_5<192, void, VCLHANDLE, CTMouseButton, CTShiftState, int, int> OnMouseUp;

public:    // Class Properties
  class CTSLDisplayToolBar &ToolBar;
  class CTSLDisplayZoom &Zooming;

public:    // Properties
  CLPProperty<CTCursor> Cursor;
  CLPEnumProperty<CTSLDisplayNavigateMode> NavigateMode;
  CLPProperty<bool> Visible;
  CLPReadAccessProperty<CTSLDataDisplay,bool> CanRedoZoom;
  CLPReadAccessProperty<CTSLDataDisplay,bool> CanUndoZoom;
  CLPReadAccessProperty<CTSLDataDisplay,bool> CanZoomOut;
  CLPReadAccessProperty<CTSLDataDisplay,bool> CanZoomIn;
  CLPAccessProperty<CTSLDataDisplay,bool> Hold;

protected:
  bool GetCanRedoZoom();
  bool GetCanUndoZoom();
  bool GetCanZoomOut();
  bool GetCanZoomIn();
  void SetHold( bool AValue );
  bool GetVC_Hold();

public:
  void InvalidateRefresh();
  void RefreshView();
  void CopyToBitmap( HBITMAP &ABitmap );
  virtual void Print();
  void CopyToClipboard();
  void SaveToBitmap( CTString FileName );
  void SaveToJpeg( CTString FileName );
  virtual void ZoomOff();
  virtual void ZoomBy( double AValue );
  virtual void ZoomBy( double AValue, bool SaveHistory );
  virtual void ZoomBy( double XValue, double YValue );
  virtual void ZoomBy( double XValue, double YValue, bool SaveHistory );
  virtual void ZoomTo( double XMin, double XMax, double YMin, double YMax );
  virtual void ZoomTo( double XMin, double XMax, double YMin, double YMax, bool SaveHistory );
  virtual void ZoomToData( double XMin, double XMax, double YMin, double YMax );
  virtual void ZoomToData( double XMin, double XMax, double YMin, double YMax, bool SaveHistory );
  virtual void UndoZoom();
  virtual void RedoZoom();
  virtual void ClearZoomUndo();

public:
  CTSLDataDisplay();
  virtual ~CTSLDataDisplay();
};
//------------------------------------------------------------------------------
class CTSLChannelMouseHitPoint : public CTSLDisplayPersistent
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayPersistent inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLOptionalLabel &PointLabel;

public:    // Properties
  CLPProperty<bool> Enabled;
  CLPProperty<CTColor> Color;
  CLPProperty<bool> UseChannelColor;

public:
  CTSLChannelMouseHitPoint( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLChannelMouseHitPoint( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLChannelMouseHitPoint( CLPClassProperty *a_property, CTSLChannelMouseHitPoint ( CLPBaseClass::*a_getter )() );
  CTSLChannelMouseHitPoint( CLPClassProperty *a_property, CTSLChannelMouseHitPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelMouseHitPoint ) );
  CTSLChannelMouseHitPoint( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLChannelMouseHitPoint ) );
  CTSLChannelMouseHitPoint( CLPBaseComponent *a_control, CTSLChannelMouseHitPoint ( CLPBaseClass::*a_getter )() );
  CTSLChannelMouseHitPoint( CLPBaseComponent *a_control, CTSLChannelMouseHitPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelMouseHitPoint ) );
  CTSLChannelMouseHitPoint( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLChannelMouseHitPoint( const CTSLChannelMouseHitPoint &other );
  virtual ~CTSLChannelMouseHitPoint();

public:
  CTSLChannelMouseHitPoint & operator = ( const CTSLChannelMouseHitPoint & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLChannelMouseHitPoint ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLChannelMouseHitPoint Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayItemHighlighting : public CTSLDisplayPersistent
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayPersistent inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> HiglightLegendButton;
  CLPProperty<bool> HiglightFromLegend;
  CLPProperty<bool> HiglightFromMouse;
  CLPProperty<CTColor> Color;

public:
  CTSLDisplayItemHighlighting( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayItemHighlighting( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayItemHighlighting( CLPClassProperty *a_property, CTSLDisplayItemHighlighting ( CLPBaseClass::*a_getter )() );
  CTSLDisplayItemHighlighting( CLPClassProperty *a_property, CTSLDisplayItemHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayItemHighlighting ) );
  CTSLDisplayItemHighlighting( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayItemHighlighting ) );
  CTSLDisplayItemHighlighting( CLPBaseComponent *a_control, CTSLDisplayItemHighlighting ( CLPBaseClass::*a_getter )() );
  CTSLDisplayItemHighlighting( CLPBaseComponent *a_control, CTSLDisplayItemHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayItemHighlighting ) );
  CTSLDisplayItemHighlighting( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayItemHighlighting( const CTSLDisplayItemHighlighting &other );

public:
  CTSLDisplayItemHighlighting & operator = ( const CTSLDisplayItemHighlighting & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayItemHighlighting ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayItemHighlighting Value );
};
//------------------------------------------------------------------------------
class CTSLChannelItemHighlighting : public CTSLDisplayItemHighlighting
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayItemHighlighting inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLChannelItemHighlighting( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLChannelItemHighlighting( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLChannelItemHighlighting( CLPClassProperty *a_property, CTSLChannelItemHighlighting ( CLPBaseClass::*a_getter )() );
  CTSLChannelItemHighlighting( CLPClassProperty *a_property, CTSLChannelItemHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelItemHighlighting ) );
  CTSLChannelItemHighlighting( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLChannelItemHighlighting ) );
  CTSLChannelItemHighlighting( CLPBaseComponent *a_control, CTSLChannelItemHighlighting ( CLPBaseClass::*a_getter )() );
  CTSLChannelItemHighlighting( CLPBaseComponent *a_control, CTSLChannelItemHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelItemHighlighting ) );
  CTSLChannelItemHighlighting( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLChannelItemHighlighting( const CTSLChannelItemHighlighting &other );

public:
  CTSLChannelItemHighlighting & operator = ( const CTSLChannelItemHighlighting & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLChannelItemHighlighting ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLChannelItemHighlighting Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayHighlighting : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLChannelItemHighlighting &Channels;
  class CTSLChannelItemHighlighting &ChannelLinks;
  class CTSLDisplayItemHighlighting &Markers;
  class CTSLDisplayItemHighlighting &Zones;
  class CTSLDisplayItemHighlighting &Ellipses;
  class CTSLDisplayItemHighlighting &Cursors;
  class CTSLDisplayItemHighlighting &CursorLinks;
  class CTSLChannelMouseHitPoint &MouseHitPoint;

public:
  CTSLDisplayHighlighting( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayHighlighting( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayHighlighting( CLPClassProperty *a_property, CTSLDisplayHighlighting ( CLPBaseClass::*a_getter )() );
  CTSLDisplayHighlighting( CLPClassProperty *a_property, CTSLDisplayHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayHighlighting ) );
  CTSLDisplayHighlighting( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayHighlighting ) );
  CTSLDisplayHighlighting( CLPBaseComponent *a_control, CTSLDisplayHighlighting ( CLPBaseClass::*a_getter )() );
  CTSLDisplayHighlighting( CLPBaseComponent *a_control, CTSLDisplayHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayHighlighting ) );
  CTSLDisplayHighlighting( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayHighlighting( const CTSLDisplayHighlighting &other );
  virtual ~CTSLDisplayHighlighting();

public:
  CTSLDisplayHighlighting & operator = ( const CTSLDisplayHighlighting & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayHighlighting ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayHighlighting Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayZoom : public CTSLDisplayPersistent
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayPersistent inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> MouseZoom;
  CLPProperty<bool> KeyboardZoom;
  CLPProperty<CTColor> SelectionColor;
  CLPProperty<bool> MouseWheelEnabled;
  CLPProperty<bool> HoldOnZoom;
  CLPProperty<bool> HoldOnPan;
  CLPEnumProperty<CTSLDisplayZoomMode> Mode;
  CLPReadAccessProperty<CTSLDisplayZoom,double> YMax;
  CLPReadAccessProperty<CTSLDisplayZoom,double> YMin;
  CLPReadAccessProperty<CTSLDisplayZoom,double> XMax;
  CLPReadAccessProperty<CTSLDisplayZoom,double> XMin;
  CLPReadAccessProperty<CTSLDisplayZoom,bool> IsZoomed;

protected:
  double GetYMax();
  double GetYMin();
  double GetXMax();
  double GetXMin();
  bool GetIsZoomed();

public:
  CTSLDisplayZoom( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayZoom( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayZoom( CLPClassProperty *a_property, CTSLDisplayZoom ( CLPBaseClass::*a_getter )() );
  CTSLDisplayZoom( CLPClassProperty *a_property, CTSLDisplayZoom ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZoom ) );
  CTSLDisplayZoom( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayZoom ) );
  CTSLDisplayZoom( CLPBaseComponent *a_control, CTSLDisplayZoom ( CLPBaseClass::*a_getter )() );
  CTSLDisplayZoom( CLPBaseComponent *a_control, CTSLDisplayZoom ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayZoom ) );
  CTSLDisplayZoom( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayZoom( const CTSLDisplayZoom &other );

public:
  CTSLDisplayZoom & operator = ( const CTSLDisplayZoom & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayZoom ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayZoom Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayTrails : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTFont &Font;

public:    // Properties
  CLPProperty<CTColor> Color;

public:
  CTSLDisplayTrails( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayTrails( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayTrails( CLPClassProperty *a_property, CTSLDisplayTrails ( CLPBaseClass::*a_getter )() );
  CTSLDisplayTrails( CLPClassProperty *a_property, CTSLDisplayTrails ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayTrails ) );
  CTSLDisplayTrails( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayTrails ) );
  CTSLDisplayTrails( CLPBaseComponent *a_control, CTSLDisplayTrails ( CLPBaseClass::*a_getter )() );
  CTSLDisplayTrails( CLPBaseComponent *a_control, CTSLDisplayTrails ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayTrails ) );
  CTSLDisplayTrails( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayTrails( const CTSLDisplayTrails &other );
  virtual ~CTSLDisplayTrails();

public:
  CTSLDisplayTrails & operator = ( const CTSLDisplayTrails & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayTrails ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayTrails Value );
};
//------------------------------------------------------------------------------
class CTSLDataChart : public CTSLDataDisplay
{
//DOM-IGNORE-BEGIN
  typedef CTSLDataDisplay inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWPinListProperty InputPins;
  CTOWPinListProperty XInputPins;

public:    // Events
//  void __stdcall OnOverChannel(VCLHANDLE Sender, int ChannelIndex, int BeginSampleIndex, int EndSampleIndex, CTSLRealPoint & ClickedValue);
  CLPEventProperty_5<0, void, VCLHANDLE, int, int, int, CTSLRealPoint &> OnOverChannel;
//  void __stdcall OnLeaveChannel(VCLHANDLE Sender);
  CLPEventProperty_1<0, void, VCLHANDLE> OnLeaveChannel;

public:    // Class Properties
  class CTSLScopeYAxis &YAxis;
  class CTSLScopeXAxis &XAxis;
  class CTSLScopeLegendView &Legend;
  class CTSLDisplayTitle &Title;
  class CTSLScopeDataView &DataView;
  class CTSLDisplayTrails &Trails;
  class CTSLDisplayHighlighting &Highlighting;

public:    // Properties
  CLPProperty<bool> CursorsStayInView;
  CLPAccessProperty<CTSLDataChart,unsigned int> RefreshInterval;

protected:
  unsigned int GetRefreshInterval();
  void SetRefreshInterval( unsigned int AValue );

public:
  virtual void ZoomBy( double XValue, double YValue, bool SaveHistory );
  virtual void ZoomTo( double XMin, double XMax, double YMin, double YMax, bool SaveHistory );
  virtual void ZoomToData( double XMin, double XMax, double YMin, double YMax, bool SaveHistory );

public:
  CTSLDataChart();
  virtual ~CTSLDataChart();
};
//------------------------------------------------------------------------------
class CTSLScope : public CTSLDataChart
{
//DOM-IGNORE-BEGIN
  typedef CTSLDataChart inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Events
//  void __stdcall OnCustomMouseHitLabel(VCLHANDLE Sender, double XValue, double YValue, CTString & AxisLabel);
  CLPEventProperty_4<20, void, VCLHANDLE, double, double, CTString &> OnCustomMouseHitLabel;

public:    // Class Properties
  class CTSLScopeMarkerGroups &MarkerGroups;
  class CTSLDisplayZones &Zones;
  class CTSLDisplayEllipticZones &Ellipses;
  class CTSLScopeChannels &Channels;
  class CTSLDisplayCursors &Cursors;
  class CTSLDisplayCursorLinks &CursorLinks;
  class CTSLDisplayChannelLinks &ChannelLinks;

public:    // Properties
  CLPProperty<bool> Vertical;
  CLPProperty<unsigned int> SizeLimit;

public:
  virtual void Invalidate();
  void SetLabelText( CTString AValue );
  virtual void Print();
  bool GetAxisValueAt( int X, int Y, double &AxisX, double &AxisY );

public:
  virtual void Open( HWND hParent );

public:
  CTSLScope( HWND hParent );
  CTSLScope();
  virtual ~CTSLScope();
};
//------------------------------------------------------------------------------
class CTSLScopeLayer : public CTSLScope
{
//DOM-IGNORE-BEGIN
  typedef CTSLScope inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

};
//------------------------------------------------------------------------------
#include <CSLScopeCode.h>
//------------------------------------------------------------------------------
#endif   // CSLScope_H_
//------------------------------------------------------------------------------
