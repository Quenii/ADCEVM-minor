//------------------------------------------------------------------------------
//
//                    Generated by VCL C++ .NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2009
//                              www.mitov.com
//
//------------------------------------------------------------------------------
#ifndef CVLBasicBitmap_H_
#define CVLBasicBitmap_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabBasicPkgCB6_H_
  #include <CSignalLabBasicPkgCB6.h>
#endif

#include <SLVCInternalStore.h>

//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
class CTVLBasicBitmap : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPAccessProperty<CTVLBasicBitmap,unsigned char> PixelFormat;
  CLPAccessProperty<CTVLBasicBitmap,int> Height;
  CLPAccessProperty<CTVLBasicBitmap,int> Width;

protected:
  unsigned char GetPixelFormat();
  void SetPixelFormat( unsigned char AValue );
  void SetHeight( int AHeight );
  void SetWidth( int AWidth );
  int GetVC_Height();
  int GetVC_Width();

public:
  void Resize( int AWidth, int AHeight );
  void FromBuffer( BYTE * APtr, int AScanlineStep );
  void ToBuffer( BYTE * APtr, int AScanlineStep );
  void ToBitmap( HBITMAP &ABitmap );
  HDC GetDC();

public:
  CTVLBasicBitmap();
  CTVLBasicBitmap( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTVLBasicBitmap( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTVLBasicBitmap( CLPClassProperty *a_property, CTVLBasicBitmap ( CLPBaseClass::*a_getter )() );
  CTVLBasicBitmap( CLPClassProperty *a_property, CTVLBasicBitmap ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTVLBasicBitmap ) );
  CTVLBasicBitmap( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTVLBasicBitmap ) );
  CTVLBasicBitmap( CLPBaseComponent *a_control, CTVLBasicBitmap ( CLPBaseClass::*a_getter )() );
  CTVLBasicBitmap( CLPBaseComponent *a_control, CTVLBasicBitmap ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTVLBasicBitmap ) );
  CTVLBasicBitmap( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTVLBasicBitmap( const CTVLBasicBitmap &other );

public:
  CTVLBasicBitmap & operator = ( const CTVLBasicBitmap & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTVLBasicBitmap ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTVLBasicBitmap Value );
};
//------------------------------------------------------------------------------
#include <CVLBasicBitmapCode.h>
//------------------------------------------------------------------------------
#endif   // CVLBasicBitmap_H_
//------------------------------------------------------------------------------
