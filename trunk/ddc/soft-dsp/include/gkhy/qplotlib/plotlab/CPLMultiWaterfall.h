//------------------------------------------------------------------------------
//
//                    Generated by VCL C++ .NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2009
//                              www.mitov.com
//
//------------------------------------------------------------------------------
#ifndef CPLMultiWaterfall_H_
#define CPLMultiWaterfall_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CPlotLabPkgCB6_H_
  #include <CPlotLabPkgCB6.h>
#endif
#ifndef CSLScope_H_
  #include <CSLScope.h>
#endif
#ifndef CSLLevelDisplay_H_
  #include <CSLLevelDisplay.h>
#endif
#ifndef CSLWaterfall_H_
  #include <CSLWaterfall.h>
#endif
#ifndef CSLStreamTypes_H_
  #include <CSLStreamTypes.h>
#endif


//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
class CTSLChannelDisplayLevelView : public CTSLAxisDisplayLevelView
{
//DOM-IGNORE-BEGIN
  typedef CTSLAxisDisplayLevelView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_PlotLabPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLBasicLevelDisplayLabel &LevelLabel;

protected:
  CTSLBasicLevelDisplayLabel GetLevelLabel();
  void SetLevelLabel( CTSLBasicLevelDisplayLabel AValue );

public:
  CTSLChannelDisplayLevelView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLChannelDisplayLevelView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLChannelDisplayLevelView( CLPClassProperty *a_property, CTSLChannelDisplayLevelView ( CLPBaseClass::*a_getter )() );
  CTSLChannelDisplayLevelView( CLPClassProperty *a_property, CTSLChannelDisplayLevelView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelDisplayLevelView ) );
  CTSLChannelDisplayLevelView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLChannelDisplayLevelView ) );
  CTSLChannelDisplayLevelView( CLPBaseComponent *a_control, CTSLChannelDisplayLevelView ( CLPBaseClass::*a_getter )() );
  CTSLChannelDisplayLevelView( CLPBaseComponent *a_control, CTSLChannelDisplayLevelView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLChannelDisplayLevelView ) );
  CTSLChannelDisplayLevelView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLChannelDisplayLevelView( const CTSLChannelDisplayLevelView &other );
  virtual ~CTSLChannelDisplayLevelView();

public:
  CTSLChannelDisplayLevelView & operator = ( const CTSLChannelDisplayLevelView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLChannelDisplayLevelView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLChannelDisplayLevelView Value );
};
//------------------------------------------------------------------------------
class CTPLMultiWaterfallChannel : public CTSLOptionalDisplayCollectionItem
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollectionItem inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_PlotLabPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Class Properties
  class CTSLChannelDisplayLevelView &Levels;
  class CTSLMultiWaterfallChannelData &Data;

public:    // Properties
  CLPProperty<CTColor> Color;

protected:
  CTSLMultiWaterfallChannelData GetVC_Data();

public:
  CTPLMultiWaterfallChannel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTPLMultiWaterfallChannel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTPLMultiWaterfallChannel( CLPClassProperty *a_property, CTPLMultiWaterfallChannel ( CLPBaseClass::*a_getter )() );
  CTPLMultiWaterfallChannel( CLPClassProperty *a_property, CTPLMultiWaterfallChannel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTPLMultiWaterfallChannel ) );
  CTPLMultiWaterfallChannel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTPLMultiWaterfallChannel ) );
  CTPLMultiWaterfallChannel( CLPBaseComponent *a_control, CTPLMultiWaterfallChannel ( CLPBaseClass::*a_getter )() );
  CTPLMultiWaterfallChannel( CLPBaseComponent *a_control, CTPLMultiWaterfallChannel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTPLMultiWaterfallChannel ) );
  CTPLMultiWaterfallChannel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTPLMultiWaterfallChannel( const CTPLMultiWaterfallChannel &other );
  virtual ~CTPLMultiWaterfallChannel();

public:
  CTPLMultiWaterfallChannel & operator = ( const CTPLMultiWaterfallChannel & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTPLMultiWaterfallChannel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTPLMultiWaterfallChannel Value );
};
//------------------------------------------------------------------------------
class CTPLMultiWaterfallChannels : public CTSLOptionalDisplayCollection<CTPLMultiWaterfallChannel>
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollection<CTPLMultiWaterfallChannel> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_PlotLabPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTPLMultiWaterfallChannels( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTPLMultiWaterfallChannels( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTPLMultiWaterfallChannels( CLPClassProperty *a_property, CTPLMultiWaterfallChannels ( CLPBaseClass::*a_getter )() );
  CTPLMultiWaterfallChannels( CLPClassProperty *a_property, CTPLMultiWaterfallChannels ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTPLMultiWaterfallChannels ) );
  CTPLMultiWaterfallChannels( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTPLMultiWaterfallChannels ) );
  CTPLMultiWaterfallChannels( CLPBaseComponent *a_control, CTPLMultiWaterfallChannels ( CLPBaseClass::*a_getter )() );
  CTPLMultiWaterfallChannels( CLPBaseComponent *a_control, CTPLMultiWaterfallChannels ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTPLMultiWaterfallChannels ) );
  CTPLMultiWaterfallChannels( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTPLMultiWaterfallChannels( const CTPLMultiWaterfallChannels &other );

public:
  CTPLMultiWaterfallChannels & operator = ( const CTPLMultiWaterfallChannels & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTPLMultiWaterfallChannels ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTPLMultiWaterfallChannels Value );
};
//------------------------------------------------------------------------------
class CTSLMultiWaterfallChannelData : public CTSLBasicWaterfallData
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicWaterfallData inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_PlotLabPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  virtual void Clear();

public:
  CTSLMultiWaterfallChannelData( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLMultiWaterfallChannelData( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLMultiWaterfallChannelData( CLPClassProperty *a_property, CTSLMultiWaterfallChannelData ( CLPBaseClass::*a_getter )() );
  CTSLMultiWaterfallChannelData( CLPClassProperty *a_property, CTSLMultiWaterfallChannelData ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMultiWaterfallChannelData ) );
  CTSLMultiWaterfallChannelData( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLMultiWaterfallChannelData ) );
  CTSLMultiWaterfallChannelData( CLPBaseComponent *a_control, CTSLMultiWaterfallChannelData ( CLPBaseClass::*a_getter )() );
  CTSLMultiWaterfallChannelData( CLPBaseComponent *a_control, CTSLMultiWaterfallChannelData ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLMultiWaterfallChannelData ) );
  CTSLMultiWaterfallChannelData( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLMultiWaterfallChannelData( const CTSLMultiWaterfallChannelData &other );

public:
  CTSLMultiWaterfallChannelData & operator = ( const CTSLMultiWaterfallChannelData & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLMultiWaterfallChannelData ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLMultiWaterfallChannelData Value );
};
//------------------------------------------------------------------------------
class CTPLMultiWaterfallDataView : public CTSLBasicWaterfallDataView
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicWaterfallDataView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_PlotLabPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTPLMultiWaterfallDataView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTPLMultiWaterfallDataView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTPLMultiWaterfallDataView( CLPClassProperty *a_property, CTPLMultiWaterfallDataView ( CLPBaseClass::*a_getter )() );
  CTPLMultiWaterfallDataView( CLPClassProperty *a_property, CTPLMultiWaterfallDataView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTPLMultiWaterfallDataView ) );
  CTPLMultiWaterfallDataView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTPLMultiWaterfallDataView ) );
  CTPLMultiWaterfallDataView( CLPBaseComponent *a_control, CTPLMultiWaterfallDataView ( CLPBaseClass::*a_getter )() );
  CTPLMultiWaterfallDataView( CLPBaseComponent *a_control, CTPLMultiWaterfallDataView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTPLMultiWaterfallDataView ) );
  CTPLMultiWaterfallDataView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTPLMultiWaterfallDataView( const CTPLMultiWaterfallDataView &other );

public:
  CTPLMultiWaterfallDataView & operator = ( const CTPLMultiWaterfallDataView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTPLMultiWaterfallDataView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTPLMultiWaterfallDataView Value );
};
//------------------------------------------------------------------------------
class CTPLMultiWaterfall : public CTSLBasicWaterfall
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicWaterfall inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWPinListProperty InputPins;

public:    // Class Properties
  class CTPLMultiWaterfallChannels &Channels;
  class CTSLViewButtonSettings &ChannelButtons;
  class CTPLMultiWaterfallDataView &DataView;

protected:
  CTPLMultiWaterfallDataView GetWaterfallDataView();

public:

public:
  virtual void Open( HWND hParent );

public:
  CTPLMultiWaterfall( HWND hParent );
  CTPLMultiWaterfall();
  virtual ~CTPLMultiWaterfall();
};
//------------------------------------------------------------------------------
class CTPLMultiWaterfallLayer : public CTPLMultiWaterfall
{
//DOM-IGNORE-BEGIN
  typedef CTPLMultiWaterfall inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

};
//------------------------------------------------------------------------------
#include <CPLMultiWaterfallCode.h>
//------------------------------------------------------------------------------
#endif   // CPLMultiWaterfall_H_
//------------------------------------------------------------------------------
