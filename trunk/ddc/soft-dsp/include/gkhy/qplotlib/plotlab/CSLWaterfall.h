//------------------------------------------------------------------------------
//
//                    Generated by VCL C++ .NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2009
//                              www.mitov.com
//
//------------------------------------------------------------------------------
#ifndef CSLWaterfall_H_
#define CSLWaterfall_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabScopePkgCB6_H_
  #include <CSignalLabScopePkgCB6.h>
#endif
#ifndef CSLScope_H_
  #include <CSLScope.h>
#endif
#ifndef CSLStreamTypes_H_
  #include <CSLStreamTypes.h>
#endif
#ifndef CSLLevelDisplay_H_
  #include <CSLLevelDisplay.h>
#endif


//------------------------------------------------------------------------------

enum CTSLWaterfallMarkerMode { mmRelative, mmAbsolute };

//------------------------------------------------------------------------------
class CTSLWaterfallMarkerPosition : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<int> X;
  CLPProperty<double> Y;

public:
  CTSLWaterfallMarkerPosition( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallMarkerPosition( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallMarkerPosition( CLPClassProperty *a_property, CTSLWaterfallMarkerPosition ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallMarkerPosition( CLPClassProperty *a_property, CTSLWaterfallMarkerPosition ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkerPosition ) );
  CTSLWaterfallMarkerPosition( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkerPosition ) );
  CTSLWaterfallMarkerPosition( CLPBaseComponent *a_control, CTSLWaterfallMarkerPosition ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallMarkerPosition( CLPBaseComponent *a_control, CTSLWaterfallMarkerPosition ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkerPosition ) );
  CTSLWaterfallMarkerPosition( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallMarkerPosition( const CTSLWaterfallMarkerPosition &other );

public:
  CTSLWaterfallMarkerPosition & operator = ( const CTSLWaterfallMarkerPosition & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallMarkerPosition ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallMarkerPosition Value );
};
//------------------------------------------------------------------------------
class CTSLWaterfallMarker : public CTSLDisplayMarker
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayMarker inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLWaterfallMarkerPosition &Position;

public:
  CTSLWaterfallMarker( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallMarker( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallMarker( CLPClassProperty *a_property, CTSLWaterfallMarker ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallMarker( CLPClassProperty *a_property, CTSLWaterfallMarker ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarker ) );
  CTSLWaterfallMarker( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarker ) );
  CTSLWaterfallMarker( CLPBaseComponent *a_control, CTSLWaterfallMarker ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallMarker( CLPBaseComponent *a_control, CTSLWaterfallMarker ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarker ) );
  CTSLWaterfallMarker( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallMarker( const CTSLWaterfallMarker &other );
  virtual ~CTSLWaterfallMarker();

public:
  CTSLWaterfallMarker & operator = ( const CTSLWaterfallMarker & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallMarker ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallMarker Value );
};
//------------------------------------------------------------------------------
class CTSLWaterfallMarkers : public CTSLDisplayCollection<CTSLWaterfallMarker>
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayCollection<CTSLWaterfallMarker> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLWaterfallMarkers( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallMarkers( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallMarkers( CLPClassProperty *a_property, CTSLWaterfallMarkers ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallMarkers( CLPClassProperty *a_property, CTSLWaterfallMarkers ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkers ) );
  CTSLWaterfallMarkers( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkers ) );
  CTSLWaterfallMarkers( CLPBaseComponent *a_control, CTSLWaterfallMarkers ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallMarkers( CLPBaseComponent *a_control, CTSLWaterfallMarkers ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkers ) );
  CTSLWaterfallMarkers( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallMarkers( const CTSLWaterfallMarkers &other );

public:
  CTSLWaterfallMarkers & operator = ( const CTSLWaterfallMarkers & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallMarkers ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallMarkers Value );
};
//------------------------------------------------------------------------------
class CTSLWaterfallMarkerGroupLine : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Visible;
  CLPProperty<bool> UsePointsColor;
  CLPProperty<CTColor> Color;
  CLPProperty<int> Width;

public:
  CTSLWaterfallMarkerGroupLine( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallMarkerGroupLine( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallMarkerGroupLine( CLPClassProperty *a_property, CTSLWaterfallMarkerGroupLine ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallMarkerGroupLine( CLPClassProperty *a_property, CTSLWaterfallMarkerGroupLine ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkerGroupLine ) );
  CTSLWaterfallMarkerGroupLine( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkerGroupLine ) );
  CTSLWaterfallMarkerGroupLine( CLPBaseComponent *a_control, CTSLWaterfallMarkerGroupLine ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallMarkerGroupLine( CLPBaseComponent *a_control, CTSLWaterfallMarkerGroupLine ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkerGroupLine ) );
  CTSLWaterfallMarkerGroupLine( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallMarkerGroupLine( const CTSLWaterfallMarkerGroupLine &other );

public:
  CTSLWaterfallMarkerGroupLine & operator = ( const CTSLWaterfallMarkerGroupLine & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallMarkerGroupLine ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallMarkerGroupLine Value );
};
//------------------------------------------------------------------------------
class CTSLWaterfallMarkerGroup : public CTSLDisplayMarkerGroup
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayMarkerGroup inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLWaterfallMarkers &Markers;
  class CTSLWaterfallMarkerGroupLine &Line;

public:    // Properties
  CLPEnumProperty<CTSLWaterfallMarkerMode> Mode;

public:
  CTSLWaterfallMarkerGroup( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallMarkerGroup( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallMarkerGroup( CLPClassProperty *a_property, CTSLWaterfallMarkerGroup ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallMarkerGroup( CLPClassProperty *a_property, CTSLWaterfallMarkerGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkerGroup ) );
  CTSLWaterfallMarkerGroup( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkerGroup ) );
  CTSLWaterfallMarkerGroup( CLPBaseComponent *a_control, CTSLWaterfallMarkerGroup ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallMarkerGroup( CLPBaseComponent *a_control, CTSLWaterfallMarkerGroup ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkerGroup ) );
  CTSLWaterfallMarkerGroup( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallMarkerGroup( const CTSLWaterfallMarkerGroup &other );
  virtual ~CTSLWaterfallMarkerGroup();

public:
  CTSLWaterfallMarkerGroup & operator = ( const CTSLWaterfallMarkerGroup & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallMarkerGroup ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallMarkerGroup Value );
};
//------------------------------------------------------------------------------
class CTSLWaterfallMarkerGroups : public CTSLOptionalDisplayCollection<CTSLWaterfallMarkerGroup>
{
//DOM-IGNORE-BEGIN
  typedef CTSLOptionalDisplayCollection<CTSLWaterfallMarkerGroup> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  void ClearAllMarkers();

public:
  CTSLWaterfallMarkerGroups( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallMarkerGroups( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallMarkerGroups( CLPClassProperty *a_property, CTSLWaterfallMarkerGroups ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallMarkerGroups( CLPClassProperty *a_property, CTSLWaterfallMarkerGroups ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkerGroups ) );
  CTSLWaterfallMarkerGroups( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkerGroups ) );
  CTSLWaterfallMarkerGroups( CLPBaseComponent *a_control, CTSLWaterfallMarkerGroups ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallMarkerGroups( CLPBaseComponent *a_control, CTSLWaterfallMarkerGroups ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallMarkerGroups ) );
  CTSLWaterfallMarkerGroups( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallMarkerGroups( const CTSLWaterfallMarkerGroups &other );

public:
  CTSLWaterfallMarkerGroups & operator = ( const CTSLWaterfallMarkerGroups & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallMarkerGroups ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallMarkerGroups Value );
};
//------------------------------------------------------------------------------
class CTSLBasicWaterfallData : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPAccessProperty<CTSLBasicWaterfallData,double> SampleRate;

protected:
  double GetSampleRateProp();
  void SetSampleRateProp( double Value );

protected:    // Injected Methods
  double * GetCreateIntDataArray( int &Dimention1, int &Dimention2 );
  double * GetCreateIntDrawDataArray( int &Dimention1, int &Dimention2 );
  void DeleteIntDataArray( double * AData );

public:
  void AddData( const unsigned short * ABufer, int ASize );
  void AddData( const short * ABufer, int ASize );
  void AddData( const unsigned int * ABufer, int ASize );
  void AddData( const int * ABufer, int ASize );
  void AddData( const float * ABufer, int ASize );
  void AddData( const double * ABufer, int ASize );
  virtual void Clear();

public:
  CTSLBasicWaterfallData( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicWaterfallData( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicWaterfallData( CLPClassProperty *a_property, CTSLBasicWaterfallData ( CLPBaseClass::*a_getter )() );
  CTSLBasicWaterfallData( CLPClassProperty *a_property, CTSLBasicWaterfallData ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicWaterfallData ) );
  CTSLBasicWaterfallData( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicWaterfallData ) );
  CTSLBasicWaterfallData( CLPBaseComponent *a_control, CTSLBasicWaterfallData ( CLPBaseClass::*a_getter )() );
  CTSLBasicWaterfallData( CLPBaseComponent *a_control, CTSLBasicWaterfallData ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicWaterfallData ) );
  CTSLBasicWaterfallData( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicWaterfallData( const CTSLBasicWaterfallData &other );

public:
  CTSLBasicWaterfallData & operator = ( const CTSLBasicWaterfallData & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicWaterfallData ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicWaterfallData Value );
};
//------------------------------------------------------------------------------
class CTSLWaterfallData : public CTSLBasicWaterfallData
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicWaterfallData inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  virtual void Clear();

public:
  CTSLWaterfallData( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallData( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallData( CLPClassProperty *a_property, CTSLWaterfallData ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallData( CLPClassProperty *a_property, CTSLWaterfallData ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallData ) );
  CTSLWaterfallData( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallData ) );
  CTSLWaterfallData( CLPBaseComponent *a_control, CTSLWaterfallData ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallData( CLPBaseComponent *a_control, CTSLWaterfallData ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallData ) );
  CTSLWaterfallData( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallData( const CTSLWaterfallData &other );

public:
  CTSLWaterfallData & operator = ( const CTSLWaterfallData & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallData ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallData Value );
};
//------------------------------------------------------------------------------
class CTSLWaterfallXAxis : public CTSLDisplayXAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayXAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLBasicAxisValue &MinTick;
  class CTSLBasicAxisValue &MaxTick;

public:    // Properties
  CLPProperty<int> Samples;
  CLPAccessProperty<CTSLWaterfallXAxis,bool> Reversed;

protected:
  bool GetReversed();
  void SetReversedProp( bool AValue );

public:
  CTSLWaterfallXAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallXAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallXAxis( CLPClassProperty *a_property, CTSLWaterfallXAxis ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallXAxis( CLPClassProperty *a_property, CTSLWaterfallXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallXAxis ) );
  CTSLWaterfallXAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallXAxis ) );
  CTSLWaterfallXAxis( CLPBaseComponent *a_control, CTSLWaterfallXAxis ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallXAxis( CLPBaseComponent *a_control, CTSLWaterfallXAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallXAxis ) );
  CTSLWaterfallXAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallXAxis( const CTSLWaterfallXAxis &other );
  virtual ~CTSLWaterfallXAxis();

public:
  CTSLWaterfallXAxis & operator = ( const CTSLWaterfallXAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallXAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallXAxis Value );
};
//------------------------------------------------------------------------------
class CTSLWaterfallLegendView : public CTSLLegendView
{
//DOM-IGNORE-BEGIN
  typedef CTSLLegendView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLLegendGroup &MarkerGroups;

public:
  CTSLWaterfallLegendView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallLegendView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallLegendView( CLPClassProperty *a_property, CTSLWaterfallLegendView ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallLegendView( CLPClassProperty *a_property, CTSLWaterfallLegendView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallLegendView ) );
  CTSLWaterfallLegendView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallLegendView ) );
  CTSLWaterfallLegendView( CLPBaseComponent *a_control, CTSLWaterfallLegendView ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallLegendView( CLPBaseComponent *a_control, CTSLWaterfallLegendView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallLegendView ) );
  CTSLWaterfallLegendView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallLegendView( const CTSLWaterfallLegendView &other );
  virtual ~CTSLWaterfallLegendView();

public:
  CTSLWaterfallLegendView & operator = ( const CTSLWaterfallLegendView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallLegendView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallLegendView Value );
};
//------------------------------------------------------------------------------
class CTSLWaterfallHighlighting : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLDisplayItemHighlighting &Markers;
  class CTSLChannelMouseHitPoint &MouseHitPoint;

public:
  CTSLWaterfallHighlighting( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallHighlighting( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallHighlighting( CLPClassProperty *a_property, CTSLWaterfallHighlighting ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallHighlighting( CLPClassProperty *a_property, CTSLWaterfallHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallHighlighting ) );
  CTSLWaterfallHighlighting( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallHighlighting ) );
  CTSLWaterfallHighlighting( CLPBaseComponent *a_control, CTSLWaterfallHighlighting ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallHighlighting( CLPBaseComponent *a_control, CTSLWaterfallHighlighting ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallHighlighting ) );
  CTSLWaterfallHighlighting( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallHighlighting( const CTSLWaterfallHighlighting &other );
  virtual ~CTSLWaterfallHighlighting();

public:
  CTSLWaterfallHighlighting & operator = ( const CTSLWaterfallHighlighting & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallHighlighting ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallHighlighting Value );
};
//------------------------------------------------------------------------------
class CTSLBasicWaterfall : public CTSLDataDisplay
{
//DOM-IGNORE-BEGIN
  typedef CTSLDataDisplay inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // Class Properties
  class CTSLDisplayTitle &Title;
  class CTSLWaterfallXAxis &XAxis;
  class CTSLWaterfallYAxis &YAxis;
  class CTSLWaterfallLegendView &Legend;
  class CTSLWaterfallMarkerGroups &MarkerGroups;
  class CTSLWaterfallHighlighting &Highlighting;

public:    // Properties
  CLPProperty<bool> Vertical;
  CLPAccessProperty<CTSLBasicWaterfall,unsigned int> RefreshInterval;

protected:
  unsigned int GetRefreshInterval();
  void SetRefreshInterval( unsigned int AValue );

public:
  virtual void Print();
  virtual void ZoomTo( double XMin, double XMax, double YMin, double YMax, bool SaveHistory );
  virtual void ZoomToData( double XMin, double XMax, double YMin, double YMax, bool SaveHistory );
  virtual void ZoomBy( double XValue, double YValue, bool SaveHistory );

public:
  CTSLBasicWaterfall();
  virtual ~CTSLBasicWaterfall();
};
//------------------------------------------------------------------------------
class CTSLWaterfallDisplayLevelView : public CTSLDisplayLevelView
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayLevelView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLViewButtonSettings &Button;

public:
  CTSLWaterfallDisplayLevelView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallDisplayLevelView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallDisplayLevelView( CLPClassProperty *a_property, CTSLWaterfallDisplayLevelView ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallDisplayLevelView( CLPClassProperty *a_property, CTSLWaterfallDisplayLevelView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallDisplayLevelView ) );
  CTSLWaterfallDisplayLevelView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallDisplayLevelView ) );
  CTSLWaterfallDisplayLevelView( CLPBaseComponent *a_control, CTSLWaterfallDisplayLevelView ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallDisplayLevelView( CLPBaseComponent *a_control, CTSLWaterfallDisplayLevelView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallDisplayLevelView ) );
  CTSLWaterfallDisplayLevelView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallDisplayLevelView( const CTSLWaterfallDisplayLevelView &other );
  virtual ~CTSLWaterfallDisplayLevelView();

public:
  CTSLWaterfallDisplayLevelView & operator = ( const CTSLWaterfallDisplayLevelView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallDisplayLevelView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallDisplayLevelView Value );
};
//------------------------------------------------------------------------------
class CTSLWaterfall : public CTSLBasicWaterfall
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicWaterfall inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

public:    // OpenWire Pins
  CTOWInputPinProperty InputPin;

public:    // Class Properties
  class CTSLWaterfallDisplayLevelView &Levels;
  class CTSLWaterfallDataView &DataView;
  class CTSLWaterfallData &Data;

protected:
  CTSLWaterfallDataView GetWaterfallDataView();
  CTSLWaterfallData GetVC_Data();

public:

public:
  virtual void Open( HWND hParent );

public:
  CTSLWaterfall( HWND hParent );
  CTSLWaterfall();
  virtual ~CTSLWaterfall();
};
//------------------------------------------------------------------------------
class CTSLWaterfallLayer : public CTSLWaterfall
{
//DOM-IGNORE-BEGIN
  typedef CTSLWaterfall inherited;
//DOM-IGNORE-END

  VCLHANDLE LibraryHandle;

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name );

};
//------------------------------------------------------------------------------
class CTSLBasicWaterfallDataView : public CTSLDisplayView
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:

public:
  CTSLBasicWaterfallDataView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicWaterfallDataView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicWaterfallDataView( CLPClassProperty *a_property, CTSLBasicWaterfallDataView ( CLPBaseClass::*a_getter )() );
  CTSLBasicWaterfallDataView( CLPClassProperty *a_property, CTSLBasicWaterfallDataView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicWaterfallDataView ) );
  CTSLBasicWaterfallDataView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicWaterfallDataView ) );
  CTSLBasicWaterfallDataView( CLPBaseComponent *a_control, CTSLBasicWaterfallDataView ( CLPBaseClass::*a_getter )() );
  CTSLBasicWaterfallDataView( CLPBaseComponent *a_control, CTSLBasicWaterfallDataView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicWaterfallDataView ) );
  CTSLBasicWaterfallDataView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicWaterfallDataView( const CTSLBasicWaterfallDataView &other );

public:
  CTSLBasicWaterfallDataView & operator = ( const CTSLBasicWaterfallDataView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicWaterfallDataView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicWaterfallDataView Value );
};
//------------------------------------------------------------------------------
class CTSLWaterfallDataView : public CTSLBasicWaterfallDataView
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicWaterfallDataView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  double GetValueAt( int X, int Y );
  double GetValueAtScale( double X, double Y );

public:
  CTSLWaterfallDataView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallDataView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallDataView( CLPClassProperty *a_property, CTSLWaterfallDataView ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallDataView( CLPClassProperty *a_property, CTSLWaterfallDataView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallDataView ) );
  CTSLWaterfallDataView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallDataView ) );
  CTSLWaterfallDataView( CLPBaseComponent *a_control, CTSLWaterfallDataView ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallDataView( CLPBaseComponent *a_control, CTSLWaterfallDataView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallDataView ) );
  CTSLWaterfallDataView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallDataView( const CTSLWaterfallDataView &other );

public:
  CTSLWaterfallDataView & operator = ( const CTSLWaterfallDataView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallDataView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallDataView Value );
};
//------------------------------------------------------------------------------
class CTSLWaterfallYAxis : public CTSLDisplayYAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLDisplayYAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPEnumProperty<CTSLDisplayAxisTicksMode> TicksMode;
  CLPProperty<double> MinTick;
  CLPProperty<double> MaxTick;

public:
  virtual CTString GetAxisLabelText();

public:
  CTSLWaterfallYAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLWaterfallYAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLWaterfallYAxis( CLPClassProperty *a_property, CTSLWaterfallYAxis ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallYAxis( CLPClassProperty *a_property, CTSLWaterfallYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallYAxis ) );
  CTSLWaterfallYAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLWaterfallYAxis ) );
  CTSLWaterfallYAxis( CLPBaseComponent *a_control, CTSLWaterfallYAxis ( CLPBaseClass::*a_getter )() );
  CTSLWaterfallYAxis( CLPBaseComponent *a_control, CTSLWaterfallYAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLWaterfallYAxis ) );
  CTSLWaterfallYAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLWaterfallYAxis( const CTSLWaterfallYAxis &other );

public:
  CTSLWaterfallYAxis & operator = ( const CTSLWaterfallYAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLWaterfallYAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLWaterfallYAxis Value );
};
//------------------------------------------------------------------------------
#include <CSLWaterfallCode.h>
//------------------------------------------------------------------------------
#endif   // CSLWaterfall_H_
//------------------------------------------------------------------------------
