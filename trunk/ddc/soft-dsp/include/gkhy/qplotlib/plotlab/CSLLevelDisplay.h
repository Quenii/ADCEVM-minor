//------------------------------------------------------------------------------
//
//                    Generated by VCL C++ .NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2009
//                              www.mitov.com
//
//------------------------------------------------------------------------------
#ifndef CSLLevelDisplay_H_
#define CSLLevelDisplay_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabScopePkgCB6_H_
  #include <CSignalLabScopePkgCB6.h>
#endif
#ifndef CSLScope_H_
  #include <CSLScope.h>
#endif
#ifndef CSLStreamTypes_H_
  #include <CSLStreamTypes.h>
#endif
#ifndef CSLFilterTypes_H_
  #include <CSLFilterTypes.h>
#endif


//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
class CTSLLevelDisplayColor : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTColor> Color;

public:
  CTSLLevelDisplayColor( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLLevelDisplayColor( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLLevelDisplayColor( CLPClassProperty *a_property, CTSLLevelDisplayColor ( CLPBaseClass::*a_getter )() );
  CTSLLevelDisplayColor( CLPClassProperty *a_property, CTSLLevelDisplayColor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLevelDisplayColor ) );
  CTSLLevelDisplayColor( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLLevelDisplayColor ) );
  CTSLLevelDisplayColor( CLPBaseComponent *a_control, CTSLLevelDisplayColor ( CLPBaseClass::*a_getter )() );
  CTSLLevelDisplayColor( CLPBaseComponent *a_control, CTSLLevelDisplayColor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLevelDisplayColor ) );
  CTSLLevelDisplayColor( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLLevelDisplayColor( const CTSLLevelDisplayColor &other );

public:
  CTSLLevelDisplayColor & operator = ( const CTSLLevelDisplayColor & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLLevelDisplayColor ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLLevelDisplayColor Value );
};
//------------------------------------------------------------------------------
class CTSLLevelDisplayColors : public CLPCollectionProperty<CTSLLevelDisplayColor>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<CTSLLevelDisplayColor> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLLevelDisplayColors( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLLevelDisplayColors( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLLevelDisplayColors( CLPClassProperty *a_property, CTSLLevelDisplayColors ( CLPBaseClass::*a_getter )() );
  CTSLLevelDisplayColors( CLPClassProperty *a_property, CTSLLevelDisplayColors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLevelDisplayColors ) );
  CTSLLevelDisplayColors( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLLevelDisplayColors ) );
  CTSLLevelDisplayColors( CLPBaseComponent *a_control, CTSLLevelDisplayColors ( CLPBaseClass::*a_getter )() );
  CTSLLevelDisplayColors( CLPBaseComponent *a_control, CTSLLevelDisplayColors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLevelDisplayColors ) );
  CTSLLevelDisplayColors( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLLevelDisplayColors( const CTSLLevelDisplayColors &other );

public:
  CTSLLevelDisplayColors & operator = ( const CTSLLevelDisplayColors & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLLevelDisplayColors ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLLevelDisplayColors Value );
};
//------------------------------------------------------------------------------
class CTSLBasicLevelAxis : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTFont &Font;

public:    // Properties
  CLPProperty<CTColor> Color;
  CLPProperty<int> Precision;
  CLPProperty<bool> FixedPrecision;
  CLPProperty<bool> Visible;
  CLPEnumProperty<CTSLScaleMode> ScaleMode;

public:
  CTSLBasicLevelAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicLevelAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicLevelAxis( CLPClassProperty *a_property, CTSLBasicLevelAxis ( CLPBaseClass::*a_getter )() );
  CTSLBasicLevelAxis( CLPClassProperty *a_property, CTSLBasicLevelAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicLevelAxis ) );
  CTSLBasicLevelAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicLevelAxis ) );
  CTSLBasicLevelAxis( CLPBaseComponent *a_control, CTSLBasicLevelAxis ( CLPBaseClass::*a_getter )() );
  CTSLBasicLevelAxis( CLPBaseComponent *a_control, CTSLBasicLevelAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicLevelAxis ) );
  CTSLBasicLevelAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicLevelAxis( const CTSLBasicLevelAxis &other );
  virtual ~CTSLBasicLevelAxis();

public:
  CTSLBasicLevelAxis & operator = ( const CTSLBasicLevelAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicLevelAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicLevelAxis Value );
};
//------------------------------------------------------------------------------
class CTSLLevelAxis : public CTSLBasicLevelAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicLevelAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Events
//  void __stdcall OnCustomLabel(VCLHANDLE Sender, double SampleValue, CTString & AxisLabel);
  CLPEventProperty_3<4, void, VCLHANDLE, double, CTString &> OnCustomLabel;

public:    // Properties
  CLPProperty<bool> Autoscale;
  CLPProperty<int> Min;
  CLPProperty<int> Max;
  CLPWriteAccessProperty<CTSLLevelAxis,CTString> TickText;

protected:
  void SetNewTickText( CTString Value );

public:
  CTSLLevelAxis( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLLevelAxis( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLLevelAxis( CLPClassProperty *a_property, CTSLLevelAxis ( CLPBaseClass::*a_getter )() );
  CTSLLevelAxis( CLPClassProperty *a_property, CTSLLevelAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLevelAxis ) );
  CTSLLevelAxis( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLLevelAxis ) );
  CTSLLevelAxis( CLPBaseComponent *a_control, CTSLLevelAxis ( CLPBaseClass::*a_getter )() );
  CTSLLevelAxis( CLPBaseComponent *a_control, CTSLLevelAxis ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLevelAxis ) );
  CTSLLevelAxis( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLLevelAxis( const CTSLLevelAxis &other );

public:
  CTSLLevelAxis & operator = ( const CTSLLevelAxis & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLLevelAxis ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLLevelAxis Value );
};
//------------------------------------------------------------------------------
class CTSLBasicLevelDisplayLabel : public CTSLBasicOptionalLabel
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicOptionalLabel inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTSLBasicLevelDisplayLabel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicLevelDisplayLabel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicLevelDisplayLabel( CLPClassProperty *a_property, CTSLBasicLevelDisplayLabel ( CLPBaseClass::*a_getter )() );
  CTSLBasicLevelDisplayLabel( CLPClassProperty *a_property, CTSLBasicLevelDisplayLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicLevelDisplayLabel ) );
  CTSLBasicLevelDisplayLabel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicLevelDisplayLabel ) );
  CTSLBasicLevelDisplayLabel( CLPBaseComponent *a_control, CTSLBasicLevelDisplayLabel ( CLPBaseClass::*a_getter )() );
  CTSLBasicLevelDisplayLabel( CLPBaseComponent *a_control, CTSLBasicLevelDisplayLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicLevelDisplayLabel ) );
  CTSLBasicLevelDisplayLabel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicLevelDisplayLabel( const CTSLBasicLevelDisplayLabel &other );

public:
  CTSLBasicLevelDisplayLabel & operator = ( const CTSLBasicLevelDisplayLabel & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicLevelDisplayLabel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicLevelDisplayLabel Value );
};
//------------------------------------------------------------------------------
class CTSLLevelDisplayLabel : public CTSLBasicLevelDisplayLabel
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicLevelDisplayLabel inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTString> Text;

public:
  CTSLLevelDisplayLabel( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLLevelDisplayLabel( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLLevelDisplayLabel( CLPClassProperty *a_property, CTSLLevelDisplayLabel ( CLPBaseClass::*a_getter )() );
  CTSLLevelDisplayLabel( CLPClassProperty *a_property, CTSLLevelDisplayLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLevelDisplayLabel ) );
  CTSLLevelDisplayLabel( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLLevelDisplayLabel ) );
  CTSLLevelDisplayLabel( CLPBaseComponent *a_control, CTSLLevelDisplayLabel ( CLPBaseClass::*a_getter )() );
  CTSLLevelDisplayLabel( CLPBaseComponent *a_control, CTSLLevelDisplayLabel ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLLevelDisplayLabel ) );
  CTSLLevelDisplayLabel( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLLevelDisplayLabel( const CTSLLevelDisplayLabel &other );

public:
  CTSLLevelDisplayLabel & operator = ( const CTSLLevelDisplayLabel & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLLevelDisplayLabel ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLLevelDisplayLabel Value );
};
//------------------------------------------------------------------------------
class CTSLBasicLevelDisplayLevelView : public CTSLTrackingOptionalAxis
{
//DOM-IGNORE-BEGIN
  typedef CTSLTrackingOptionalAxis inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLLevelDisplayColors &Colors;

public:    // Properties
  CLPProperty<int> BarWidth;
  CLPProperty<bool> GrayScale;

public:

public:
  CTSLBasicLevelDisplayLevelView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLBasicLevelDisplayLevelView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLBasicLevelDisplayLevelView( CLPClassProperty *a_property, CTSLBasicLevelDisplayLevelView ( CLPBaseClass::*a_getter )() );
  CTSLBasicLevelDisplayLevelView( CLPClassProperty *a_property, CTSLBasicLevelDisplayLevelView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicLevelDisplayLevelView ) );
  CTSLBasicLevelDisplayLevelView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLBasicLevelDisplayLevelView ) );
  CTSLBasicLevelDisplayLevelView( CLPBaseComponent *a_control, CTSLBasicLevelDisplayLevelView ( CLPBaseClass::*a_getter )() );
  CTSLBasicLevelDisplayLevelView( CLPBaseComponent *a_control, CTSLBasicLevelDisplayLevelView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLBasicLevelDisplayLevelView ) );
  CTSLBasicLevelDisplayLevelView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLBasicLevelDisplayLevelView( const CTSLBasicLevelDisplayLevelView &other );
  virtual ~CTSLBasicLevelDisplayLevelView();

public:
  CTSLBasicLevelDisplayLevelView & operator = ( const CTSLBasicLevelDisplayLevelView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLBasicLevelDisplayLevelView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLBasicLevelDisplayLevelView Value );
};
//------------------------------------------------------------------------------
class CTSLAxisDisplayLevelView : public CTSLBasicLevelDisplayLevelView
{
//DOM-IGNORE-BEGIN
  typedef CTSLBasicLevelDisplayLevelView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLLevelAxis &Axis;

public:
  CTSLAxisDisplayLevelView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLAxisDisplayLevelView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLAxisDisplayLevelView( CLPClassProperty *a_property, CTSLAxisDisplayLevelView ( CLPBaseClass::*a_getter )() );
  CTSLAxisDisplayLevelView( CLPClassProperty *a_property, CTSLAxisDisplayLevelView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisDisplayLevelView ) );
  CTSLAxisDisplayLevelView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLAxisDisplayLevelView ) );
  CTSLAxisDisplayLevelView( CLPBaseComponent *a_control, CTSLAxisDisplayLevelView ( CLPBaseClass::*a_getter )() );
  CTSLAxisDisplayLevelView( CLPBaseComponent *a_control, CTSLAxisDisplayLevelView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLAxisDisplayLevelView ) );
  CTSLAxisDisplayLevelView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLAxisDisplayLevelView( const CTSLAxisDisplayLevelView &other );
  virtual ~CTSLAxisDisplayLevelView();

public:
  CTSLAxisDisplayLevelView & operator = ( const CTSLAxisDisplayLevelView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLAxisDisplayLevelView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLAxisDisplayLevelView Value );
};
//------------------------------------------------------------------------------
class CTSLDisplayLevelView : public CTSLAxisDisplayLevelView
{
//DOM-IGNORE-BEGIN
  typedef CTSLAxisDisplayLevelView inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabScopePkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTSLLevelDisplayLabel &LevelLabel;

protected:
  CTSLLevelDisplayLabel GetLevelLabel();
  void SetLevelLabel( CTSLLevelDisplayLabel AValue );

public:
  CTSLDisplayLevelView( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTSLDisplayLevelView( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTSLDisplayLevelView( CLPClassProperty *a_property, CTSLDisplayLevelView ( CLPBaseClass::*a_getter )() );
  CTSLDisplayLevelView( CLPClassProperty *a_property, CTSLDisplayLevelView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayLevelView ) );
  CTSLDisplayLevelView( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTSLDisplayLevelView ) );
  CTSLDisplayLevelView( CLPBaseComponent *a_control, CTSLDisplayLevelView ( CLPBaseClass::*a_getter )() );
  CTSLDisplayLevelView( CLPBaseComponent *a_control, CTSLDisplayLevelView ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTSLDisplayLevelView ) );
  CTSLDisplayLevelView( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTSLDisplayLevelView( const CTSLDisplayLevelView &other );
  virtual ~CTSLDisplayLevelView();

public:
  CTSLDisplayLevelView & operator = ( const CTSLDisplayLevelView & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTSLDisplayLevelView ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTSLDisplayLevelView Value );
};
//------------------------------------------------------------------------------
#include <CSLLevelDisplayCode.h>
//------------------------------------------------------------------------------
#endif   // CSLLevelDisplay_H_
//------------------------------------------------------------------------------
