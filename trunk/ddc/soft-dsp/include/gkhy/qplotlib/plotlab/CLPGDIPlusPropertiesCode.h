//------------------------------------------------------------------------------
//
//                    Generated by VCL C++ .NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2009
//                              www.mitov.com
//
//------------------------------------------------------------------------------
#ifndef CLPGDIPlusPropertiesCode_H_
#define CLPGDIPlusPropertiesCode_H_

//------------------------------------------------------------------------------
inline CTLPGPImage::CTLPGPImage( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Height( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetHeight),
  Width( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetWidth)
{
}
//------------------------------------------------------------------------------
inline CTLPGPImage::CTLPGPImage( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Height( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetHeight),
  Width( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetWidth)
{
}
//------------------------------------------------------------------------------
inline CTLPGPImage::CTLPGPImage( CLPClassProperty *a_property, CTLPGPImage ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Height( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetHeight),
  Width( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetWidth)
{
}
//------------------------------------------------------------------------------
inline CTLPGPImage::CTLPGPImage( CLPClassProperty *a_property, CTLPGPImage ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPImage ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Height( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetHeight),
  Width( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetWidth)
{
}
//------------------------------------------------------------------------------
inline CTLPGPImage::CTLPGPImage( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPImage ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Height( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetHeight),
  Width( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetWidth)
{
}
//------------------------------------------------------------------------------
inline CTLPGPImage::CTLPGPImage( CLPBaseComponent *a_control, CTLPGPImage ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Height( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetHeight),
  Width( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetWidth)
{
}
//------------------------------------------------------------------------------
inline CTLPGPImage::CTLPGPImage( CLPBaseComponent *a_control, CTLPGPImage ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPImage ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Height( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetHeight),
  Width( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetWidth)
{
}
//------------------------------------------------------------------------------
inline CTLPGPImage::CTLPGPImage( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Height( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetHeight),
  Width( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetWidth)
{
}
//------------------------------------------------------------------------------
inline CTLPGPImage::CTLPGPImage( const CTLPGPImage &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Height( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetHeight),
  Width( (CTLPGPImage *)GetInstance(), &CTLPGPImage::GetWidth)
{
}
//------------------------------------------------------------------------------
inline CTLPGPImage & CTLPGPImage::operator = ( const CTLPGPImage & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPImage::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTLPGPImage::LoadFromFile( CTString FileName )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPImage@LoadFromFile$qqrx17System@AnsiString" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
#ifdef USE_STD_STRING
    const char * __1_Param1 = FileName.c_str();
#else
 #ifdef _UNICODE
    int __1_Length = FileName.GetLength();
    char * __1_Param1 = new char[ __1_Length * 2 + 1 ];
    wchar_t * __1_wch_ = FileName.LockBuffer();
  #if _MSC_VER >= 1400
    size_t   __1_i_;
    wcstombs_s( &__1_i_, __1_Param1, __1_Length * 2, __1_wch_, __1_Length );
  #else
    wcstombs( __1_Param1, __1_wch_, __1_Length );
  #endif
 #else
    char * __1_Param1 = FileName.LockBuffer();
 #endif
#endif

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }

#ifdef _UNICODE
    delete []__1_Param1;
#endif
#ifndef USE_STD_STRING
    FileName.UnlockBuffer();
#endif
    }

}
//------------------------------------------------------------------------------
inline void CTLPGPImage::SaveToFile( CTString FileName, CTString Format )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPImage@SaveToFile$qqrx17System@AnsiString" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
#ifdef USE_STD_STRING
    const char * __1_Param1 = FileName.c_str();
#else
 #ifdef _UNICODE
    // int __1_Length = FileName.GetLength();
	int __1_Length_zj = FileName.GetLength();
    char * __1_Param1 = new char[ __1_Length_zj * 2 + 1 ];
    wchar_t * __1_wch_zj = FileName.LockBuffer();
  #if _MSC_VER >= 1400
    size_t   __1_i_zj;
    wcstombs_s( &__1_i_zj, __1_Param1, __1_Length_zj * 2, __1_wch_zj, __1_Length_zj );
  #else
    wcstombs( __1_Param1, __1_wch_zj, __1_Length_zj );
  #endif
 #else
    char * __1_Param1 = FileName.LockBuffer();
 #endif
#endif
#ifdef USE_STD_STRING
    const char * __1_Param2 = Format.c_str();
#else
 #ifdef _UNICODE
    int __1_Length = Format.GetLength();
    char * __1_Param2 = new char[ __1_Length * 2 + 1 ];
    wchar_t * __1_wch_ = Format.LockBuffer();
  #if _MSC_VER >= 1400
    size_t   __1_i_;
    wcstombs_s( &__1_i_, __1_Param2, __1_Length * 2, __1_wch_, __1_Length );
  #else
    wcstombs( __1_Param2, __1_wch_, __1_Length );
  #endif
 #else
    char * __1_Param2 = Format.LockBuffer();
 #endif
#endif

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }

#ifdef _UNICODE
    delete []__1_Param2;
#endif
#ifndef USE_STD_STRING
    Format.UnlockBuffer();
#endif

#ifdef _UNICODE
    delete []__1_Param2;
#endif
#ifndef USE_STD_STRING
    FileName.UnlockBuffer();
#endif
    }

}
//------------------------------------------------------------------------------
inline void CTLPGPImage::SaveToFile( CTString FileName )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPImage@SaveToFile$qqrx17System@AnsiString" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
#ifdef USE_STD_STRING
    const char * __1_Param1 = FileName.c_str();
#else
 #ifdef _UNICODE
    int __1_Length = FileName.GetLength();
    char * __1_Param1 = new char[ __1_Length * 2 + 1 ];
    wchar_t * __1_wch_ = FileName.LockBuffer();
  #if _MSC_VER >= 1400
    size_t   __1_i_;
    wcstombs_s( &__1_i_, __1_Param1, __1_Length * 2, __1_wch_, __1_Length );
  #else
    wcstombs( __1_Param1, __1_wch_, __1_Length );
  #endif
 #else
    char * __1_Param1 = FileName.LockBuffer();
 #endif
#endif

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }

#ifdef _UNICODE
    delete []__1_Param1;
#endif
#ifndef USE_STD_STRING
    FileName.UnlockBuffer();
#endif
    }

}
//------------------------------------------------------------------------------
inline void CTLPGPImage::GetFormats( CTStrings AFormats )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPImage@GetFormats$qqrp17System@TMetaClassp16Classes@TStrings" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    VCLHANDLE __1_Param1 = AFormats.GetInternalHandle();

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline bool CTLPGPImage::IsEmpty()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPImage@IsEmpty$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  bool __0_RtnValue_ = (bool)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (bool)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTLPGPImage::Clear()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPImage@Clear$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTLPGPImage::GetHeight()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPImage@GetHeight$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline int CTLPGPImage::GetWidth()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPImage@GetWidth$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTLPGPPoint::CTLPGPPoint( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetX, &CTLPGPPoint::SetX),
  Y( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetY, &CTLPGPPoint::SetY)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoint::CTLPGPPoint( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetX, &CTLPGPPoint::SetX),
  Y( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetY, &CTLPGPPoint::SetY)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoint::CTLPGPPoint( CLPClassProperty *a_property, CTLPGPPoint ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  X( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetX, &CTLPGPPoint::SetX),
  Y( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetY, &CTLPGPPoint::SetY)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoint::CTLPGPPoint( CLPClassProperty *a_property, CTLPGPPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPoint ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  X( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetX, &CTLPGPPoint::SetX),
  Y( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetY, &CTLPGPPoint::SetY)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoint::CTLPGPPoint( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPPoint ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  X( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetX, &CTLPGPPoint::SetX),
  Y( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetY, &CTLPGPPoint::SetY)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoint::CTLPGPPoint( CLPBaseComponent *a_control, CTLPGPPoint ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  X( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetX, &CTLPGPPoint::SetX),
  Y( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetY, &CTLPGPPoint::SetY)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoint::CTLPGPPoint( CLPBaseComponent *a_control, CTLPGPPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPoint ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  X( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetX, &CTLPGPPoint::SetX),
  Y( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetY, &CTLPGPPoint::SetY)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoint::CTLPGPPoint( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetX, &CTLPGPPoint::SetX),
  Y( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetY, &CTLPGPPoint::SetY)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoint::CTLPGPPoint( const CTLPGPPoint &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  X( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetX, &CTLPGPPoint::SetX),
  Y( (CTLPGPPoint *)GetInstance(), &CTLPGPPoint::GetY, &CTLPGPPoint::SetY)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoint & CTLPGPPoint::operator = ( const CTLPGPPoint & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPPoint::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline float CTLPGPPoint::GetY()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPPoint@GetY$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  float __0_RtnValue_ = (float)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return (float)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTLPGPPoint::SetY( float AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPPoint@SetY$qqrf" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    float __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      push __1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline float CTLPGPPoint::GetX()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPPoint@GetX$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  float __0_RtnValue_ = (float)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return (float)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTLPGPPoint::SetX( float AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPPoint@SetX$qqrf" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    float __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      push __1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTLPGPSize::CTLPGPSize( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetWidth, &CTLPGPSize::SetWidth),
  Height( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetHeight, &CTLPGPSize::SetHeight)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSize::CTLPGPSize( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetWidth, &CTLPGPSize::SetWidth),
  Height( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetHeight, &CTLPGPSize::SetHeight)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSize::CTLPGPSize( CLPClassProperty *a_property, CTLPGPSize ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Width( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetWidth, &CTLPGPSize::SetWidth),
  Height( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetHeight, &CTLPGPSize::SetHeight)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSize::CTLPGPSize( CLPClassProperty *a_property, CTLPGPSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPSize ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Width( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetWidth, &CTLPGPSize::SetWidth),
  Height( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetHeight, &CTLPGPSize::SetHeight)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSize::CTLPGPSize( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPSize ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Width( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetWidth, &CTLPGPSize::SetWidth),
  Height( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetHeight, &CTLPGPSize::SetHeight)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSize::CTLPGPSize( CLPBaseComponent *a_control, CTLPGPSize ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Width( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetWidth, &CTLPGPSize::SetWidth),
  Height( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetHeight, &CTLPGPSize::SetHeight)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSize::CTLPGPSize( CLPBaseComponent *a_control, CTLPGPSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPSize ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Width( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetWidth, &CTLPGPSize::SetWidth),
  Height( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetHeight, &CTLPGPSize::SetHeight)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSize::CTLPGPSize( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetWidth, &CTLPGPSize::SetWidth),
  Height( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetHeight, &CTLPGPSize::SetHeight)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSize::CTLPGPSize( const CTLPGPSize &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Width( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetWidth, &CTLPGPSize::SetWidth),
  Height( (CTLPGPSize *)GetInstance(), &CTLPGPSize::GetHeight, &CTLPGPSize::SetHeight)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSize & CTLPGPSize::operator = ( const CTLPGPSize & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPSize::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline float CTLPGPSize::GetHeight()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPSize@GetHeight$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  float __0_RtnValue_ = (float)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return (float)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTLPGPSize::SetHeight( float AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPSize@SetHeight$qqrf" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    float __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      push __1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline float CTLPGPSize::GetWidth()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPSize@GetWidth$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  float __0_RtnValue_ = (float)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  eax
      }
    }

  return (float)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTLPGPSize::SetWidth( float AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPSize@SetWidth$qqrf" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    float __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      push __1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTLPGPBlends::CTLPGPBlends( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetItem, &CTLPGPBlends::SetItem),
  Count( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlends::CTLPGPBlends( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetItem, &CTLPGPBlends::SetItem),
  Count( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlends::CTLPGPBlends( CLPClassProperty *a_property, CTLPGPBlends ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Items( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetItem, &CTLPGPBlends::SetItem),
  Count( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlends::CTLPGPBlends( CLPClassProperty *a_property, CTLPGPBlends ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBlends ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Items( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetItem, &CTLPGPBlends::SetItem),
  Count( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlends::CTLPGPBlends( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPBlends ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Items( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetItem, &CTLPGPBlends::SetItem),
  Count( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlends::CTLPGPBlends( CLPBaseComponent *a_control, CTLPGPBlends ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Items( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetItem, &CTLPGPBlends::SetItem),
  Count( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlends::CTLPGPBlends( CLPBaseComponent *a_control, CTLPGPBlends ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBlends ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Items( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetItem, &CTLPGPBlends::SetItem),
  Count( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlends::CTLPGPBlends( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetItem, &CTLPGPBlends::SetItem),
  Count( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlends::CTLPGPBlends( const CTLPGPBlends &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetItem, &CTLPGPBlends::SetItem),
  Count( (CTLPGPBlends *)GetInstance(), &CTLPGPBlends::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlends & CTLPGPBlends::operator = ( const CTLPGPBlends & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPBlends::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTGPBlend CTLPGPBlends::GetItem( int AIndex )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPBlends@GetItem$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  CTGPBlend __0_RtnValue_;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AIndex;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      lea ecx,__0_RtnValue_
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

  return (CTGPBlend)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTLPGPBlends::SetItem( int AIndex, CTGPBlend AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPBlends@SetItem$qqrirx17Igdiplus@TGPBlend" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AIndex;
    CTGPBlend __1_Param2 = AValue;
    const int __1_Param2__Size__ = sizeof( CTGPBlend ) / sizeof( int );

    _asm
      {
      push eax
      push edx
      push ecx
      lea  edx,__1_Param2
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTLPGPBlends::GetCount()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPBlends@GetCount$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTLPGPBlendShape::CTLPGPBlendShape( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ShapeType( GetInstance(), _T( "ShapeType" ) ),
  Focus( GetInstance(), _T( "Focus" ) ),
  Scale( GetInstance(), _T( "Scale" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlendShape::CTLPGPBlendShape( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ShapeType( GetInstance(), _T( "ShapeType" ) ),
  Focus( GetInstance(), _T( "Focus" ) ),
  Scale( GetInstance(), _T( "Scale" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlendShape::CTLPGPBlendShape( CLPClassProperty *a_property, CTLPGPBlendShape ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  ShapeType( GetInstance(), _T( "ShapeType" ) ),
  Focus( GetInstance(), _T( "Focus" ) ),
  Scale( GetInstance(), _T( "Scale" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlendShape::CTLPGPBlendShape( CLPClassProperty *a_property, CTLPGPBlendShape ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBlendShape ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  ShapeType( GetInstance(), _T( "ShapeType" ) ),
  Focus( GetInstance(), _T( "Focus" ) ),
  Scale( GetInstance(), _T( "Scale" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlendShape::CTLPGPBlendShape( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPBlendShape ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  ShapeType( GetInstance(), _T( "ShapeType" ) ),
  Focus( GetInstance(), _T( "Focus" ) ),
  Scale( GetInstance(), _T( "Scale" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlendShape::CTLPGPBlendShape( CLPBaseComponent *a_control, CTLPGPBlendShape ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  ShapeType( GetInstance(), _T( "ShapeType" ) ),
  Focus( GetInstance(), _T( "Focus" ) ),
  Scale( GetInstance(), _T( "Scale" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlendShape::CTLPGPBlendShape( CLPBaseComponent *a_control, CTLPGPBlendShape ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBlendShape ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  ShapeType( GetInstance(), _T( "ShapeType" ) ),
  Focus( GetInstance(), _T( "Focus" ) ),
  Scale( GetInstance(), _T( "Scale" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlendShape::CTLPGPBlendShape( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ShapeType( GetInstance(), _T( "ShapeType" ) ),
  Focus( GetInstance(), _T( "Focus" ) ),
  Scale( GetInstance(), _T( "Scale" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlendShape::CTLPGPBlendShape( const CTLPGPBlendShape &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ShapeType( GetInstance(), _T( "ShapeType" ) ),
  Focus( GetInstance(), _T( "Focus" ) ),
  Scale( GetInstance(), _T( "Scale" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlendShape & CTLPGPBlendShape::operator = ( const CTLPGPBlendShape & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPBlendShape::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPBlend::CTLPGPBlend( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Blends( *new CTLPGPBlends( GetInstance(), _T( "Blends" ))),
  Shape( *new CTLPGPBlendShape( GetInstance(), _T( "Shape" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlend::CTLPGPBlend( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Blends( *new CTLPGPBlends( GetInstance(), _T( "Blends" ))),
  Shape( *new CTLPGPBlendShape( GetInstance(), _T( "Shape" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlend::CTLPGPBlend( CLPClassProperty *a_property, CTLPGPBlend ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Blends( *new CTLPGPBlends( GetInstance(), _T( "Blends" ))),
  Shape( *new CTLPGPBlendShape( GetInstance(), _T( "Shape" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlend::CTLPGPBlend( CLPClassProperty *a_property, CTLPGPBlend ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBlend ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Blends( *new CTLPGPBlends( GetInstance(), _T( "Blends" ))),
  Shape( *new CTLPGPBlendShape( GetInstance(), _T( "Shape" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlend::CTLPGPBlend( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPBlend ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Blends( *new CTLPGPBlends( GetInstance(), _T( "Blends" ))),
  Shape( *new CTLPGPBlendShape( GetInstance(), _T( "Shape" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlend::CTLPGPBlend( CLPBaseComponent *a_control, CTLPGPBlend ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Blends( *new CTLPGPBlends( GetInstance(), _T( "Blends" ))),
  Shape( *new CTLPGPBlendShape( GetInstance(), _T( "Shape" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlend::CTLPGPBlend( CLPBaseComponent *a_control, CTLPGPBlend ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBlend ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Blends( *new CTLPGPBlends( GetInstance(), _T( "Blends" ))),
  Shape( *new CTLPGPBlendShape( GetInstance(), _T( "Shape" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlend::CTLPGPBlend( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Blends( *new CTLPGPBlends( GetInstance(), _T( "Blends" ))),
  Shape( *new CTLPGPBlendShape( GetInstance(), _T( "Shape" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlend::CTLPGPBlend( const CTLPGPBlend &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) ),
  Blends( *new CTLPGPBlends( GetInstance(), _T( "Blends" ))),
  Shape( *new CTLPGPBlendShape( GetInstance(), _T( "Shape" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPBlend::~CTLPGPBlend()
{
  delete &Blends;
  delete &Shape;
}
//------------------------------------------------------------------------------
inline CTLPGPBlend & CTLPGPBlend::operator = ( const CTLPGPBlend & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPBlend::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPPoints::CTLPGPPoints( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetItem, &CTLPGPPoints::SetItem),
  Count( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoints::CTLPGPPoints( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetItem, &CTLPGPPoints::SetItem),
  Count( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoints::CTLPGPPoints( CLPClassProperty *a_property, CTLPGPPoints ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Items( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetItem, &CTLPGPPoints::SetItem),
  Count( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoints::CTLPGPPoints( CLPClassProperty *a_property, CTLPGPPoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPoints ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Items( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetItem, &CTLPGPPoints::SetItem),
  Count( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoints::CTLPGPPoints( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPPoints ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Items( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetItem, &CTLPGPPoints::SetItem),
  Count( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoints::CTLPGPPoints( CLPBaseComponent *a_control, CTLPGPPoints ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Items( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetItem, &CTLPGPPoints::SetItem),
  Count( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoints::CTLPGPPoints( CLPBaseComponent *a_control, CTLPGPPoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPoints ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Items( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetItem, &CTLPGPPoints::SetItem),
  Count( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoints::CTLPGPPoints( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetItem, &CTLPGPPoints::SetItem),
  Count( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoints::CTLPGPPoints( const CTLPGPPoints &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetItem, &CTLPGPPoints::SetItem),
  Count( (CTLPGPPoints *)GetInstance(), &CTLPGPPoints::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPoints & CTLPGPPoints::operator = ( const CTLPGPPoints & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPPoints::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTLPGPPoints::Clear()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPPoints@Clear$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTLPGPPoints::Add( float X, float Y )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPPoints@Add$qqrff" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    float __1_Param1 = X;
    float __1_Param2 = Y;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param1
      push __1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTLPGPPoints::BeginUpdate()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPPoints@BeginUpdate$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTLPGPPoints::EndUpdate()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPPoints@EndUpdate$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline CTGPPointF CTLPGPPoints::GetItem( int AIndex )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPPoints@GetItem$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  CTGPPointF __0_RtnValue_;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AIndex;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      lea ecx,__0_RtnValue_
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

  return (CTGPPointF)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTLPGPPoints::SetItem( int AIndex, CTGPPointF AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPPoints@SetItem$qqrirx18Igdiplus@TGPPointF" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AIndex;
    CTGPPointF __1_Param2 = AValue;
    const int __1_Param2__Size__ = sizeof( CTGPPointF ) / sizeof( int );

    _asm
      {
      push eax
      push edx
      push ecx
      lea  edx,__1_Param2
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTLPGPPoints::GetCount()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPPoints@GetCount$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTLPGPColors::CTLPGPColors( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetItem, &CTLPGPColors::SetItem),
  Count( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColors::CTLPGPColors( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetItem, &CTLPGPColors::SetItem),
  Count( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColors::CTLPGPColors( CLPClassProperty *a_property, CTLPGPColors ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Items( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetItem, &CTLPGPColors::SetItem),
  Count( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColors::CTLPGPColors( CLPClassProperty *a_property, CTLPGPColors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPColors ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Items( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetItem, &CTLPGPColors::SetItem),
  Count( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColors::CTLPGPColors( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPColors ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Items( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetItem, &CTLPGPColors::SetItem),
  Count( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColors::CTLPGPColors( CLPBaseComponent *a_control, CTLPGPColors ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Items( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetItem, &CTLPGPColors::SetItem),
  Count( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColors::CTLPGPColors( CLPBaseComponent *a_control, CTLPGPColors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPColors ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Items( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetItem, &CTLPGPColors::SetItem),
  Count( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColors::CTLPGPColors( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetItem, &CTLPGPColors::SetItem),
  Count( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColors::CTLPGPColors( const CTLPGPColors &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetItem, &CTLPGPColors::SetItem),
  Count( (CTLPGPColors *)GetInstance(), &CTLPGPColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColors & CTLPGPColors::operator = ( const CTLPGPColors & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPColors::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTLPGPColors::Clear()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPColors@Clear$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTLPGPColors::Add( CTGPColor AColor )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPColors@Add$qqrui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    CTGPColor __1_Param1 = AColor;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTLPGPColors::BeginUpdate()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPColors@BeginUpdate$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTLPGPColors::EndUpdate()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPColors@EndUpdate$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline CTGPColor CTLPGPColors::GetItem( int AIndex )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPColors@GetItem$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  CTGPColor __0_RtnValue_ = (CTGPColor)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AIndex;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  edx
      pop  eax
      }
    }

  return (CTGPColor)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTLPGPColors::SetItem( int AIndex, CTGPColor AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPColors@SetItem$qqriui" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AIndex;
    CTGPColor __1_Param2 = AValue;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTLPGPColors::GetCount()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPColors@GetCount$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTLPGPInterpolationColors::CTLPGPInterpolationColors( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetItem, &CTLPGPInterpolationColors::SetItem),
  Count( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPInterpolationColors::CTLPGPInterpolationColors( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetItem, &CTLPGPInterpolationColors::SetItem),
  Count( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPInterpolationColors::CTLPGPInterpolationColors( CLPClassProperty *a_property, CTLPGPInterpolationColors ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Items( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetItem, &CTLPGPInterpolationColors::SetItem),
  Count( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPInterpolationColors::CTLPGPInterpolationColors( CLPClassProperty *a_property, CTLPGPInterpolationColors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPInterpolationColors ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Items( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetItem, &CTLPGPInterpolationColors::SetItem),
  Count( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPInterpolationColors::CTLPGPInterpolationColors( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPInterpolationColors ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Items( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetItem, &CTLPGPInterpolationColors::SetItem),
  Count( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPInterpolationColors::CTLPGPInterpolationColors( CLPBaseComponent *a_control, CTLPGPInterpolationColors ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Items( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetItem, &CTLPGPInterpolationColors::SetItem),
  Count( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPInterpolationColors::CTLPGPInterpolationColors( CLPBaseComponent *a_control, CTLPGPInterpolationColors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPInterpolationColors ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Items( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetItem, &CTLPGPInterpolationColors::SetItem),
  Count( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPInterpolationColors::CTLPGPInterpolationColors( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetItem, &CTLPGPInterpolationColors::SetItem),
  Count( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPInterpolationColors::CTLPGPInterpolationColors( const CTLPGPInterpolationColors &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetItem, &CTLPGPInterpolationColors::SetItem),
  Count( (CTLPGPInterpolationColors *)GetInstance(), &CTLPGPInterpolationColors::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPInterpolationColors & CTLPGPInterpolationColors::operator = ( const CTLPGPInterpolationColors & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPInterpolationColors::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTGPInterpolationColor CTLPGPInterpolationColors::GetItem( int AIndex )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPInterpolationColors@GetItem$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  CTGPInterpolationColor __0_RtnValue_;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AIndex;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      lea ecx,__0_RtnValue_
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

  return (CTGPInterpolationColor)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTLPGPInterpolationColors::SetItem( int AIndex, CTGPInterpolationColor AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPInterpolationColors@SetItem$qqrirx30Igdiplus@TGPInterpolationColor" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AIndex;
    CTGPInterpolationColor __1_Param2 = AValue;
    const int __1_Param2__Size__ = sizeof( CTGPInterpolationColor ) / sizeof( int );

    _asm
      {
      push eax
      push edx
      push ecx
      lea  edx,__1_Param2
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTLPGPInterpolationColors::GetCount()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPInterpolationColors@GetCount$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTLPGPHatch::CTLPGPHatch( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ForegroundColor( GetInstance(), _T( "ForegroundColor" ) ),
  BackgroundColor( GetInstance(), _T( "BackgroundColor" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPHatch::CTLPGPHatch( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ForegroundColor( GetInstance(), _T( "ForegroundColor" ) ),
  BackgroundColor( GetInstance(), _T( "BackgroundColor" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPHatch::CTLPGPHatch( CLPClassProperty *a_property, CTLPGPHatch ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  ForegroundColor( GetInstance(), _T( "ForegroundColor" ) ),
  BackgroundColor( GetInstance(), _T( "BackgroundColor" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPHatch::CTLPGPHatch( CLPClassProperty *a_property, CTLPGPHatch ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPHatch ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  ForegroundColor( GetInstance(), _T( "ForegroundColor" ) ),
  BackgroundColor( GetInstance(), _T( "BackgroundColor" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPHatch::CTLPGPHatch( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPHatch ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  ForegroundColor( GetInstance(), _T( "ForegroundColor" ) ),
  BackgroundColor( GetInstance(), _T( "BackgroundColor" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPHatch::CTLPGPHatch( CLPBaseComponent *a_control, CTLPGPHatch ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  ForegroundColor( GetInstance(), _T( "ForegroundColor" ) ),
  BackgroundColor( GetInstance(), _T( "BackgroundColor" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPHatch::CTLPGPHatch( CLPBaseComponent *a_control, CTLPGPHatch ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPHatch ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  ForegroundColor( GetInstance(), _T( "ForegroundColor" ) ),
  BackgroundColor( GetInstance(), _T( "BackgroundColor" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPHatch::CTLPGPHatch( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ForegroundColor( GetInstance(), _T( "ForegroundColor" ) ),
  BackgroundColor( GetInstance(), _T( "BackgroundColor" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPHatch::CTLPGPHatch( const CTLPGPHatch &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  ForegroundColor( GetInstance(), _T( "ForegroundColor" ) ),
  BackgroundColor( GetInstance(), _T( "BackgroundColor" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPHatch & CTLPGPHatch::operator = ( const CTLPGPHatch & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPHatch::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPCenterPoint::CTLPGPCenterPoint( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoCenter( GetInstance(), _T( "AutoCenter" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCenterPoint::CTLPGPCenterPoint( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoCenter( GetInstance(), _T( "AutoCenter" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCenterPoint::CTLPGPCenterPoint( CLPClassProperty *a_property, CTLPGPCenterPoint ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  AutoCenter( GetInstance(), _T( "AutoCenter" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCenterPoint::CTLPGPCenterPoint( CLPClassProperty *a_property, CTLPGPCenterPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPCenterPoint ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AutoCenter( GetInstance(), _T( "AutoCenter" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCenterPoint::CTLPGPCenterPoint( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPCenterPoint ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AutoCenter( GetInstance(), _T( "AutoCenter" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCenterPoint::CTLPGPCenterPoint( CLPBaseComponent *a_control, CTLPGPCenterPoint ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  AutoCenter( GetInstance(), _T( "AutoCenter" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCenterPoint::CTLPGPCenterPoint( CLPBaseComponent *a_control, CTLPGPCenterPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPCenterPoint ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  AutoCenter( GetInstance(), _T( "AutoCenter" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCenterPoint::CTLPGPCenterPoint( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoCenter( GetInstance(), _T( "AutoCenter" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCenterPoint::CTLPGPCenterPoint( const CTLPGPCenterPoint &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AutoCenter( GetInstance(), _T( "AutoCenter" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCenterPoint & CTLPGPCenterPoint::operator = ( const CTLPGPCenterPoint & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPCenterPoint::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTGPCenterColor::CTGPCenterColor( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Point( *new CTLPGPCenterPoint( GetInstance(), _T( "Point" )))
{
}
//------------------------------------------------------------------------------
inline CTGPCenterColor::CTGPCenterColor( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Point( *new CTLPGPCenterPoint( GetInstance(), _T( "Point" )))
{
}
//------------------------------------------------------------------------------
inline CTGPCenterColor::CTGPCenterColor( CLPClassProperty *a_property, CTGPCenterColor ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Point( *new CTLPGPCenterPoint( GetInstance(), _T( "Point" )))
{
}
//------------------------------------------------------------------------------
inline CTGPCenterColor::CTGPCenterColor( CLPClassProperty *a_property, CTGPCenterColor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTGPCenterColor ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Point( *new CTLPGPCenterPoint( GetInstance(), _T( "Point" )))
{
}
//------------------------------------------------------------------------------
inline CTGPCenterColor::CTGPCenterColor( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTGPCenterColor ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) ),
  Point( *new CTLPGPCenterPoint( GetInstance(), _T( "Point" )))
{
}
//------------------------------------------------------------------------------
inline CTGPCenterColor::CTGPCenterColor( CLPBaseComponent *a_control, CTGPCenterColor ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  Point( *new CTLPGPCenterPoint( GetInstance(), _T( "Point" )))
{
}
//------------------------------------------------------------------------------
inline CTGPCenterColor::CTGPCenterColor( CLPBaseComponent *a_control, CTGPCenterColor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTGPCenterColor ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) ),
  Point( *new CTLPGPCenterPoint( GetInstance(), _T( "Point" )))
{
}
//------------------------------------------------------------------------------
inline CTGPCenterColor::CTGPCenterColor( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Point( *new CTLPGPCenterPoint( GetInstance(), _T( "Point" )))
{
}
//------------------------------------------------------------------------------
inline CTGPCenterColor::CTGPCenterColor( const CTGPCenterColor &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) ),
  Point( *new CTLPGPCenterPoint( GetInstance(), _T( "Point" )))
{
}
//------------------------------------------------------------------------------
inline CTGPCenterColor::~CTGPCenterColor()
{
  delete &Point;
}
//------------------------------------------------------------------------------
inline CTGPCenterColor & CTGPCenterColor::operator = ( const CTGPCenterColor & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTGPCenterColor::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPGradient::CTLPGPGradient( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Path( *new CTLPGPPoints( GetInstance(), _T( "Path" ))),
  Colors( *new CTLPGPColors( GetInstance(), _T( "Colors" ))),
  CenterColor( *new CTGPCenterColor( GetInstance(), _T( "CenterColor" ))),
  GammaCorrection( GetInstance(), _T( "GammaCorrection" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPGradient::CTLPGPGradient( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Path( *new CTLPGPPoints( GetInstance(), _T( "Path" ))),
  Colors( *new CTLPGPColors( GetInstance(), _T( "Colors" ))),
  CenterColor( *new CTGPCenterColor( GetInstance(), _T( "CenterColor" ))),
  GammaCorrection( GetInstance(), _T( "GammaCorrection" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPGradient::CTLPGPGradient( CLPClassProperty *a_property, CTLPGPGradient ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Path( *new CTLPGPPoints( GetInstance(), _T( "Path" ))),
  Colors( *new CTLPGPColors( GetInstance(), _T( "Colors" ))),
  CenterColor( *new CTGPCenterColor( GetInstance(), _T( "CenterColor" ))),
  GammaCorrection( GetInstance(), _T( "GammaCorrection" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPGradient::CTLPGPGradient( CLPClassProperty *a_property, CTLPGPGradient ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPGradient ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Path( *new CTLPGPPoints( GetInstance(), _T( "Path" ))),
  Colors( *new CTLPGPColors( GetInstance(), _T( "Colors" ))),
  CenterColor( *new CTGPCenterColor( GetInstance(), _T( "CenterColor" ))),
  GammaCorrection( GetInstance(), _T( "GammaCorrection" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPGradient::CTLPGPGradient( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPGradient ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Path( *new CTLPGPPoints( GetInstance(), _T( "Path" ))),
  Colors( *new CTLPGPColors( GetInstance(), _T( "Colors" ))),
  CenterColor( *new CTGPCenterColor( GetInstance(), _T( "CenterColor" ))),
  GammaCorrection( GetInstance(), _T( "GammaCorrection" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPGradient::CTLPGPGradient( CLPBaseComponent *a_control, CTLPGPGradient ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Path( *new CTLPGPPoints( GetInstance(), _T( "Path" ))),
  Colors( *new CTLPGPColors( GetInstance(), _T( "Colors" ))),
  CenterColor( *new CTGPCenterColor( GetInstance(), _T( "CenterColor" ))),
  GammaCorrection( GetInstance(), _T( "GammaCorrection" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPGradient::CTLPGPGradient( CLPBaseComponent *a_control, CTLPGPGradient ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPGradient ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Path( *new CTLPGPPoints( GetInstance(), _T( "Path" ))),
  Colors( *new CTLPGPColors( GetInstance(), _T( "Colors" ))),
  CenterColor( *new CTGPCenterColor( GetInstance(), _T( "CenterColor" ))),
  GammaCorrection( GetInstance(), _T( "GammaCorrection" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPGradient::CTLPGPGradient( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Path( *new CTLPGPPoints( GetInstance(), _T( "Path" ))),
  Colors( *new CTLPGPColors( GetInstance(), _T( "Colors" ))),
  CenterColor( *new CTGPCenterColor( GetInstance(), _T( "CenterColor" ))),
  GammaCorrection( GetInstance(), _T( "GammaCorrection" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPGradient::CTLPGPGradient( const CTLPGPGradient &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Path( *new CTLPGPPoints( GetInstance(), _T( "Path" ))),
  Colors( *new CTLPGPColors( GetInstance(), _T( "Colors" ))),
  CenterColor( *new CTGPCenterColor( GetInstance(), _T( "CenterColor" ))),
  GammaCorrection( GetInstance(), _T( "GammaCorrection" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPGradient::~CTLPGPGradient()
{
  delete &Path;
  delete &Colors;
  delete &CenterColor;
}
//------------------------------------------------------------------------------
inline CTLPGPGradient & CTLPGPGradient::operator = ( const CTLPGPGradient & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPGradient::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPBrush::CTLPGPBrush( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  BrushType( GetInstance(), _T( "BrushType" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Texture( *new CTLPGPImage( GetInstance(), _T( "Texture" ))),
  Gradient( *new CTLPGPGradient( GetInstance(), _T( "Gradient" ))),
  Hatch( *new CTLPGPHatch( GetInstance(), _T( "Hatch" ))),
  InterpolationColors( *new CTLPGPInterpolationColors( GetInstance(), _T( "InterpolationColors" ))),
  WrapMode( GetInstance(), _T( "WrapMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBrush::CTLPGPBrush( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  BrushType( GetInstance(), _T( "BrushType" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Texture( *new CTLPGPImage( GetInstance(), _T( "Texture" ))),
  Gradient( *new CTLPGPGradient( GetInstance(), _T( "Gradient" ))),
  Hatch( *new CTLPGPHatch( GetInstance(), _T( "Hatch" ))),
  InterpolationColors( *new CTLPGPInterpolationColors( GetInstance(), _T( "InterpolationColors" ))),
  WrapMode( GetInstance(), _T( "WrapMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBrush::CTLPGPBrush( CLPClassProperty *a_property, CTLPGPBrush ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  BrushType( GetInstance(), _T( "BrushType" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Texture( *new CTLPGPImage( GetInstance(), _T( "Texture" ))),
  Gradient( *new CTLPGPGradient( GetInstance(), _T( "Gradient" ))),
  Hatch( *new CTLPGPHatch( GetInstance(), _T( "Hatch" ))),
  InterpolationColors( *new CTLPGPInterpolationColors( GetInstance(), _T( "InterpolationColors" ))),
  WrapMode( GetInstance(), _T( "WrapMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBrush::CTLPGPBrush( CLPClassProperty *a_property, CTLPGPBrush ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBrush ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  BrushType( GetInstance(), _T( "BrushType" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Texture( *new CTLPGPImage( GetInstance(), _T( "Texture" ))),
  Gradient( *new CTLPGPGradient( GetInstance(), _T( "Gradient" ))),
  Hatch( *new CTLPGPHatch( GetInstance(), _T( "Hatch" ))),
  InterpolationColors( *new CTLPGPInterpolationColors( GetInstance(), _T( "InterpolationColors" ))),
  WrapMode( GetInstance(), _T( "WrapMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBrush::CTLPGPBrush( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPBrush ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  BrushType( GetInstance(), _T( "BrushType" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Texture( *new CTLPGPImage( GetInstance(), _T( "Texture" ))),
  Gradient( *new CTLPGPGradient( GetInstance(), _T( "Gradient" ))),
  Hatch( *new CTLPGPHatch( GetInstance(), _T( "Hatch" ))),
  InterpolationColors( *new CTLPGPInterpolationColors( GetInstance(), _T( "InterpolationColors" ))),
  WrapMode( GetInstance(), _T( "WrapMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBrush::CTLPGPBrush( CLPBaseComponent *a_control, CTLPGPBrush ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  BrushType( GetInstance(), _T( "BrushType" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Texture( *new CTLPGPImage( GetInstance(), _T( "Texture" ))),
  Gradient( *new CTLPGPGradient( GetInstance(), _T( "Gradient" ))),
  Hatch( *new CTLPGPHatch( GetInstance(), _T( "Hatch" ))),
  InterpolationColors( *new CTLPGPInterpolationColors( GetInstance(), _T( "InterpolationColors" ))),
  WrapMode( GetInstance(), _T( "WrapMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBrush::CTLPGPBrush( CLPBaseComponent *a_control, CTLPGPBrush ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBrush ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  BrushType( GetInstance(), _T( "BrushType" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Texture( *new CTLPGPImage( GetInstance(), _T( "Texture" ))),
  Gradient( *new CTLPGPGradient( GetInstance(), _T( "Gradient" ))),
  Hatch( *new CTLPGPHatch( GetInstance(), _T( "Hatch" ))),
  InterpolationColors( *new CTLPGPInterpolationColors( GetInstance(), _T( "InterpolationColors" ))),
  WrapMode( GetInstance(), _T( "WrapMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBrush::CTLPGPBrush( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  BrushType( GetInstance(), _T( "BrushType" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Texture( *new CTLPGPImage( GetInstance(), _T( "Texture" ))),
  Gradient( *new CTLPGPGradient( GetInstance(), _T( "Gradient" ))),
  Hatch( *new CTLPGPHatch( GetInstance(), _T( "Hatch" ))),
  InterpolationColors( *new CTLPGPInterpolationColors( GetInstance(), _T( "InterpolationColors" ))),
  WrapMode( GetInstance(), _T( "WrapMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBrush::CTLPGPBrush( const CTLPGPBrush &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  BrushType( GetInstance(), _T( "BrushType" ) ),
  Color( GetInstance(), _T( "Color" ) ),
  Texture( *new CTLPGPImage( GetInstance(), _T( "Texture" ))),
  Gradient( *new CTLPGPGradient( GetInstance(), _T( "Gradient" ))),
  Hatch( *new CTLPGPHatch( GetInstance(), _T( "Hatch" ))),
  InterpolationColors( *new CTLPGPInterpolationColors( GetInstance(), _T( "InterpolationColors" ))),
  WrapMode( GetInstance(), _T( "WrapMode" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBrush::~CTLPGPBrush()
{
  delete &Texture;
  delete &Gradient;
  delete &Hatch;
  delete &InterpolationColors;
}
//------------------------------------------------------------------------------
inline CTLPGPBrush & CTLPGPBrush::operator = ( const CTLPGPBrush & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPBrush::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPSingleArray::CTLPGPSingleArray( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetItem, &CTLPGPSingleArray::SetItemProp),
  Count( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSingleArray::CTLPGPSingleArray( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetItem, &CTLPGPSingleArray::SetItemProp),
  Count( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSingleArray::CTLPGPSingleArray( CLPClassProperty *a_property, CTLPGPSingleArray ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Items( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetItem, &CTLPGPSingleArray::SetItemProp),
  Count( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSingleArray::CTLPGPSingleArray( CLPClassProperty *a_property, CTLPGPSingleArray ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPSingleArray ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Items( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetItem, &CTLPGPSingleArray::SetItemProp),
  Count( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSingleArray::CTLPGPSingleArray( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPSingleArray ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Items( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetItem, &CTLPGPSingleArray::SetItemProp),
  Count( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSingleArray::CTLPGPSingleArray( CLPBaseComponent *a_control, CTLPGPSingleArray ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Items( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetItem, &CTLPGPSingleArray::SetItemProp),
  Count( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSingleArray::CTLPGPSingleArray( CLPBaseComponent *a_control, CTLPGPSingleArray ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPSingleArray ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Items( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetItem, &CTLPGPSingleArray::SetItemProp),
  Count( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSingleArray::CTLPGPSingleArray( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetItem, &CTLPGPSingleArray::SetItemProp),
  Count( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSingleArray::CTLPGPSingleArray( const CTLPGPSingleArray &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Items( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetItem, &CTLPGPSingleArray::SetItemProp),
  Count( (CTLPGPSingleArray *)GetInstance(), &CTLPGPSingleArray::GetCount)
{
}
//------------------------------------------------------------------------------
inline CTLPGPSingleArray & CTLPGPSingleArray::operator = ( const CTLPGPSingleArray & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPSingleArray::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTLPGPSingleArray::Clear()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPSingleArray@Clear$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTLPGPSingleArray::Add( float AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPSingleArray@Add$qqrf" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    float __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      push __1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTLPGPSingleArray::BeginUpdate()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPSingleArray@BeginUpdate$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTLPGPSingleArray::EndUpdate()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPSingleArray@EndUpdate$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline float CTLPGPSingleArray::GetItem( int AIndex )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPSingleArray@GetItem$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  float __0_RtnValue_ = (float)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AIndex;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      fstp __0_RtnValue_
      pop  edx
      pop  eax
      }
    }

  return (float)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTLPGPSingleArray::SetItemProp( int AIndex, float AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPSingleArray@SetItemProp$qqrif" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AIndex;
    float __1_Param2 = AValue;

    _asm
      {
      push eax
      push edx
      push ecx
      push __1_Param2
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTLPGPSingleArray::GetCount()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPSingleArray@GetCount$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTLPGPCustomDash::CTLPGPCustomDash( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCustomDash::CTLPGPCustomDash( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCustomDash::CTLPGPCustomDash( CLPClassProperty *a_property, CTLPGPCustomDash ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTLPGPCustomDash::CTLPGPCustomDash( CLPClassProperty *a_property, CTLPGPCustomDash ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPCustomDash ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTLPGPCustomDash::CTLPGPCustomDash( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPCustomDash ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTLPGPCustomDash::CTLPGPCustomDash( CLPBaseComponent *a_control, CTLPGPCustomDash ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTLPGPCustomDash::CTLPGPCustomDash( CLPBaseComponent *a_control, CTLPGPCustomDash ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPCustomDash ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTLPGPCustomDash::CTLPGPCustomDash( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCustomDash::CTLPGPCustomDash( const CTLPGPCustomDash &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPCustomDash & CTLPGPCustomDash::operator = ( const CTLPGPCustomDash & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPCustomDash::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPDashStyle::CTLPGPDashStyle( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Style( GetInstance(), _T( "Style" ) ),
  Offset( GetInstance(), _T( "Offset" ) ),
  CustomDash( *new CTLPGPCustomDash( GetInstance(), _T( "CustomDash" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPDashStyle::CTLPGPDashStyle( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Style( GetInstance(), _T( "Style" ) ),
  Offset( GetInstance(), _T( "Offset" ) ),
  CustomDash( *new CTLPGPCustomDash( GetInstance(), _T( "CustomDash" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPDashStyle::CTLPGPDashStyle( CLPClassProperty *a_property, CTLPGPDashStyle ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Style( GetInstance(), _T( "Style" ) ),
  Offset( GetInstance(), _T( "Offset" ) ),
  CustomDash( *new CTLPGPCustomDash( GetInstance(), _T( "CustomDash" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPDashStyle::CTLPGPDashStyle( CLPClassProperty *a_property, CTLPGPDashStyle ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPDashStyle ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Style( GetInstance(), _T( "Style" ) ),
  Offset( GetInstance(), _T( "Offset" ) ),
  CustomDash( *new CTLPGPCustomDash( GetInstance(), _T( "CustomDash" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPDashStyle::CTLPGPDashStyle( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPDashStyle ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Style( GetInstance(), _T( "Style" ) ),
  Offset( GetInstance(), _T( "Offset" ) ),
  CustomDash( *new CTLPGPCustomDash( GetInstance(), _T( "CustomDash" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPDashStyle::CTLPGPDashStyle( CLPBaseComponent *a_control, CTLPGPDashStyle ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Style( GetInstance(), _T( "Style" ) ),
  Offset( GetInstance(), _T( "Offset" ) ),
  CustomDash( *new CTLPGPCustomDash( GetInstance(), _T( "CustomDash" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPDashStyle::CTLPGPDashStyle( CLPBaseComponent *a_control, CTLPGPDashStyle ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPDashStyle ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Style( GetInstance(), _T( "Style" ) ),
  Offset( GetInstance(), _T( "Offset" ) ),
  CustomDash( *new CTLPGPCustomDash( GetInstance(), _T( "CustomDash" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPDashStyle::CTLPGPDashStyle( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Style( GetInstance(), _T( "Style" ) ),
  Offset( GetInstance(), _T( "Offset" ) ),
  CustomDash( *new CTLPGPCustomDash( GetInstance(), _T( "CustomDash" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPDashStyle::CTLPGPDashStyle( const CTLPGPDashStyle &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Style( GetInstance(), _T( "Style" ) ),
  Offset( GetInstance(), _T( "Offset" ) ),
  CustomDash( *new CTLPGPCustomDash( GetInstance(), _T( "CustomDash" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPDashStyle::~CTLPGPDashStyle()
{
  delete &CustomDash;
}
//------------------------------------------------------------------------------
inline CTLPGPDashStyle & CTLPGPDashStyle::operator = ( const CTLPGPDashStyle & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPDashStyle::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPPenCompound::CTLPGPPenCompound( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCompound::CTLPGPPenCompound( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCompound::CTLPGPPenCompound( CLPClassProperty *a_property, CTLPGPPenCompound ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCompound::CTLPGPPenCompound( CLPClassProperty *a_property, CTLPGPPenCompound ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPenCompound ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCompound::CTLPGPPenCompound( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPPenCompound ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCompound::CTLPGPPenCompound( CLPBaseComponent *a_control, CTLPGPPenCompound ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCompound::CTLPGPPenCompound( CLPBaseComponent *a_control, CTLPGPPenCompound ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPenCompound ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCompound::CTLPGPPenCompound( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCompound::CTLPGPPenCompound( const CTLPGPPenCompound &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCompound & CTLPGPPenCompound::operator = ( const CTLPGPPenCompound & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPPenCompound::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTLPGPPenCompound::Add( float AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Lpgdiplusproperties@TLPGPPenCompound@Add$qqrf" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    float __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      push __1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
inline CTLPGPPen::CTLPGPPen( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  Alignment( GetInstance(), _T( "Alignment" ) ),
  MiterLimit( GetInstance(), _T( "MiterLimit" ) ),
  DashStyle( *new CTLPGPDashStyle( GetInstance(), _T( "DashStyle" ))),
  LineJoin( GetInstance(), _T( "LineJoin" ) ),
  Compound( *new CTLPGPPenCompound( GetInstance(), _T( "Compound" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPen::CTLPGPPen( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  Alignment( GetInstance(), _T( "Alignment" ) ),
  MiterLimit( GetInstance(), _T( "MiterLimit" ) ),
  DashStyle( *new CTLPGPDashStyle( GetInstance(), _T( "DashStyle" ))),
  LineJoin( GetInstance(), _T( "LineJoin" ) ),
  Compound( *new CTLPGPPenCompound( GetInstance(), _T( "Compound" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPen::CTLPGPPen( CLPClassProperty *a_property, CTLPGPPen ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  Alignment( GetInstance(), _T( "Alignment" ) ),
  MiterLimit( GetInstance(), _T( "MiterLimit" ) ),
  DashStyle( *new CTLPGPDashStyle( GetInstance(), _T( "DashStyle" ))),
  LineJoin( GetInstance(), _T( "LineJoin" ) ),
  Compound( *new CTLPGPPenCompound( GetInstance(), _T( "Compound" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPen::CTLPGPPen( CLPClassProperty *a_property, CTLPGPPen ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPen ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  Alignment( GetInstance(), _T( "Alignment" ) ),
  MiterLimit( GetInstance(), _T( "MiterLimit" ) ),
  DashStyle( *new CTLPGPDashStyle( GetInstance(), _T( "DashStyle" ))),
  LineJoin( GetInstance(), _T( "LineJoin" ) ),
  Compound( *new CTLPGPPenCompound( GetInstance(), _T( "Compound" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPen::CTLPGPPen( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPPen ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  Alignment( GetInstance(), _T( "Alignment" ) ),
  MiterLimit( GetInstance(), _T( "MiterLimit" ) ),
  DashStyle( *new CTLPGPDashStyle( GetInstance(), _T( "DashStyle" ))),
  LineJoin( GetInstance(), _T( "LineJoin" ) ),
  Compound( *new CTLPGPPenCompound( GetInstance(), _T( "Compound" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPen::CTLPGPPen( CLPBaseComponent *a_control, CTLPGPPen ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  Alignment( GetInstance(), _T( "Alignment" ) ),
  MiterLimit( GetInstance(), _T( "MiterLimit" ) ),
  DashStyle( *new CTLPGPDashStyle( GetInstance(), _T( "DashStyle" ))),
  LineJoin( GetInstance(), _T( "LineJoin" ) ),
  Compound( *new CTLPGPPenCompound( GetInstance(), _T( "Compound" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPen::CTLPGPPen( CLPBaseComponent *a_control, CTLPGPPen ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPen ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  Alignment( GetInstance(), _T( "Alignment" ) ),
  MiterLimit( GetInstance(), _T( "MiterLimit" ) ),
  DashStyle( *new CTLPGPDashStyle( GetInstance(), _T( "DashStyle" ))),
  LineJoin( GetInstance(), _T( "LineJoin" ) ),
  Compound( *new CTLPGPPenCompound( GetInstance(), _T( "Compound" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPen::CTLPGPPen( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  Alignment( GetInstance(), _T( "Alignment" ) ),
  MiterLimit( GetInstance(), _T( "MiterLimit" ) ),
  DashStyle( *new CTLPGPDashStyle( GetInstance(), _T( "DashStyle" ))),
  LineJoin( GetInstance(), _T( "LineJoin" ) ),
  Compound( *new CTLPGPPenCompound( GetInstance(), _T( "Compound" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPen::CTLPGPPen( const CTLPGPPen &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Width( GetInstance(), _T( "Width" ) ),
  Alignment( GetInstance(), _T( "Alignment" ) ),
  MiterLimit( GetInstance(), _T( "MiterLimit" ) ),
  DashStyle( *new CTLPGPDashStyle( GetInstance(), _T( "DashStyle" ))),
  LineJoin( GetInstance(), _T( "LineJoin" ) ),
  Compound( *new CTLPGPPenCompound( GetInstance(), _T( "Compound" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPen::~CTLPGPPen()
{
  delete &Brush;
  delete &DashStyle;
  delete &Compound;
}
//------------------------------------------------------------------------------
inline CTLPGPPen & CTLPGPPen::operator = ( const CTLPGPPen & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPPen::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollectionItem::CTLPGPPenCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Pen( *new CTLPGPPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollectionItem::CTLPGPPenCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Pen( *new CTLPGPPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollectionItem::CTLPGPPenCollectionItem( CLPClassProperty *a_property, CTLPGPPenCollectionItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Pen( *new CTLPGPPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollectionItem::CTLPGPPenCollectionItem( CLPClassProperty *a_property, CTLPGPPenCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPenCollectionItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Pen( *new CTLPGPPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollectionItem::CTLPGPPenCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPPenCollectionItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Pen( *new CTLPGPPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollectionItem::CTLPGPPenCollectionItem( CLPBaseComponent *a_control, CTLPGPPenCollectionItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Pen( *new CTLPGPPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollectionItem::CTLPGPPenCollectionItem( CLPBaseComponent *a_control, CTLPGPPenCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPenCollectionItem ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Pen( *new CTLPGPPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollectionItem::CTLPGPPenCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Pen( *new CTLPGPPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollectionItem::CTLPGPPenCollectionItem( const CTLPGPPenCollectionItem &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Pen( *new CTLPGPPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollectionItem::~CTLPGPPenCollectionItem()
{
  delete &Pen;
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollectionItem & CTLPGPPenCollectionItem::operator = ( const CTLPGPPenCollectionItem & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPPenCollectionItem::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollection::CTLPGPPenCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollection::CTLPGPPenCollection( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollection::CTLPGPPenCollection( CLPClassProperty *a_property, CTLPGPPenCollection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollection::CTLPGPPenCollection( CLPClassProperty *a_property, CTLPGPPenCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPenCollection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollection::CTLPGPPenCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPPenCollection ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollection::CTLPGPPenCollection( CLPBaseComponent *a_control, CTLPGPPenCollection ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollection::CTLPGPPenCollection( CLPBaseComponent *a_control, CTLPGPPenCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPenCollection ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollection::CTLPGPPenCollection( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollection::CTLPGPPenCollection( const CTLPGPPenCollection &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPPenCollection & CTLPGPPenCollection::operator = ( const CTLPGPPenCollection & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPPenCollection::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalPen::CTLPGPOptionalPen( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalPen::CTLPGPOptionalPen( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalPen::CTLPGPOptionalPen( CLPClassProperty *a_property, CTLPGPOptionalPen ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalPen::CTLPGPOptionalPen( CLPClassProperty *a_property, CTLPGPOptionalPen ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPOptionalPen ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalPen::CTLPGPOptionalPen( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPOptionalPen ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalPen::CTLPGPOptionalPen( CLPBaseComponent *a_control, CTLPGPOptionalPen ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalPen::CTLPGPOptionalPen( CLPBaseComponent *a_control, CTLPGPOptionalPen ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPOptionalPen ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalPen::CTLPGPOptionalPen( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalPen::CTLPGPOptionalPen( const CTLPGPOptionalPen &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalPen & CTLPGPOptionalPen::operator = ( const CTLPGPOptionalPen & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPOptionalPen::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalMultiPen::CTLPGPOptionalMultiPen( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AdditionalPens( *new CTLPGPPenCollection( GetInstance(), _T( "AdditionalPens" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalMultiPen::CTLPGPOptionalMultiPen( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AdditionalPens( *new CTLPGPPenCollection( GetInstance(), _T( "AdditionalPens" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalMultiPen::CTLPGPOptionalMultiPen( CLPClassProperty *a_property, CTLPGPOptionalMultiPen ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  AdditionalPens( *new CTLPGPPenCollection( GetInstance(), _T( "AdditionalPens" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalMultiPen::CTLPGPOptionalMultiPen( CLPClassProperty *a_property, CTLPGPOptionalMultiPen ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPOptionalMultiPen ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AdditionalPens( *new CTLPGPPenCollection( GetInstance(), _T( "AdditionalPens" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalMultiPen::CTLPGPOptionalMultiPen( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPOptionalMultiPen ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  AdditionalPens( *new CTLPGPPenCollection( GetInstance(), _T( "AdditionalPens" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalMultiPen::CTLPGPOptionalMultiPen( CLPBaseComponent *a_control, CTLPGPOptionalMultiPen ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  AdditionalPens( *new CTLPGPPenCollection( GetInstance(), _T( "AdditionalPens" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalMultiPen::CTLPGPOptionalMultiPen( CLPBaseComponent *a_control, CTLPGPOptionalMultiPen ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPOptionalMultiPen ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  AdditionalPens( *new CTLPGPPenCollection( GetInstance(), _T( "AdditionalPens" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalMultiPen::CTLPGPOptionalMultiPen( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AdditionalPens( *new CTLPGPPenCollection( GetInstance(), _T( "AdditionalPens" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalMultiPen::CTLPGPOptionalMultiPen( const CTLPGPOptionalMultiPen &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  AdditionalPens( *new CTLPGPPenCollection( GetInstance(), _T( "AdditionalPens" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalMultiPen::~CTLPGPOptionalMultiPen()
{
  delete &AdditionalPens;
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalMultiPen & CTLPGPOptionalMultiPen::operator = ( const CTLPGPOptionalMultiPen & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPOptionalMultiPen::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPBasicFont::CTLPGPBasicFont( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Name( GetInstance(), _T( "Name" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBasicFont::CTLPGPBasicFont( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Name( GetInstance(), _T( "Name" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBasicFont::CTLPGPBasicFont( CLPClassProperty *a_property, CTLPGPBasicFont ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Name( GetInstance(), _T( "Name" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBasicFont::CTLPGPBasicFont( CLPClassProperty *a_property, CTLPGPBasicFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBasicFont ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Name( GetInstance(), _T( "Name" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBasicFont::CTLPGPBasicFont( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPBasicFont ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Name( GetInstance(), _T( "Name" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBasicFont::CTLPGPBasicFont( CLPBaseComponent *a_control, CTLPGPBasicFont ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Name( GetInstance(), _T( "Name" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBasicFont::CTLPGPBasicFont( CLPBaseComponent *a_control, CTLPGPBasicFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBasicFont ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Name( GetInstance(), _T( "Name" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBasicFont::CTLPGPBasicFont( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Name( GetInstance(), _T( "Name" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBasicFont::CTLPGPBasicFont( const CTLPGPBasicFont &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Name( GetInstance(), _T( "Name" ) ),
  Style( GetInstance(), _T( "Style" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPBasicFont & CTLPGPBasicFont::operator = ( const CTLPGPBasicFont & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPBasicFont::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPSimpleFont::CTLPGPSimpleFont( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTLPGPOptionalMultiPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPSimpleFont::CTLPGPSimpleFont( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTLPGPOptionalMultiPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPSimpleFont::CTLPGPSimpleFont( CLPClassProperty *a_property, CTLPGPSimpleFont ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTLPGPOptionalMultiPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPSimpleFont::CTLPGPSimpleFont( CLPClassProperty *a_property, CTLPGPSimpleFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPSimpleFont ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTLPGPOptionalMultiPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPSimpleFont::CTLPGPSimpleFont( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPSimpleFont ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTLPGPOptionalMultiPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPSimpleFont::CTLPGPSimpleFont( CLPBaseComponent *a_control, CTLPGPSimpleFont ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTLPGPOptionalMultiPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPSimpleFont::CTLPGPSimpleFont( CLPBaseComponent *a_control, CTLPGPSimpleFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPSimpleFont ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTLPGPOptionalMultiPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPSimpleFont::CTLPGPSimpleFont( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTLPGPOptionalMultiPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPSimpleFont::CTLPGPSimpleFont( const CTLPGPSimpleFont &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Brush( *new CTLPGPBrush( GetInstance(), _T( "Brush" ))),
  Pen( *new CTLPGPOptionalMultiPen( GetInstance(), _T( "Pen" )))
{
}
//------------------------------------------------------------------------------
inline CTLPGPSimpleFont::~CTLPGPSimpleFont()
{
  delete &Brush;
  delete &Pen;
}
//------------------------------------------------------------------------------
inline CTLPGPSimpleFont & CTLPGPSimpleFont::operator = ( const CTLPGPSimpleFont & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPSimpleFont::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPFont::CTLPGPFont( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPFont::CTLPGPFont( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPFont::CTLPGPFont( CLPClassProperty *a_property, CTLPGPFont ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPFont::CTLPGPFont( CLPClassProperty *a_property, CTLPGPFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPFont ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPFont::CTLPGPFont( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPFont ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPFont::CTLPGPFont( CLPBaseComponent *a_control, CTLPGPFont ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPFont::CTLPGPFont( CLPBaseComponent *a_control, CTLPGPFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPFont ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPFont::CTLPGPFont( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPFont::CTLPGPFont( const CTLPGPFont &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Size( GetInstance(), _T( "Size" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPFont & CTLPGPFont::operator = ( const CTLPGPFont & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPFont::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalText::CTLPGPOptionalText( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTLPGPFont( GetInstance(), _T( "Font" ))),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalText::CTLPGPOptionalText( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTLPGPFont( GetInstance(), _T( "Font" ))),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalText::CTLPGPOptionalText( CLPClassProperty *a_property, CTLPGPOptionalText ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Font( *new CTLPGPFont( GetInstance(), _T( "Font" ))),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalText::CTLPGPOptionalText( CLPClassProperty *a_property, CTLPGPOptionalText ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPOptionalText ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Font( *new CTLPGPFont( GetInstance(), _T( "Font" ))),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalText::CTLPGPOptionalText( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPOptionalText ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Font( *new CTLPGPFont( GetInstance(), _T( "Font" ))),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalText::CTLPGPOptionalText( CLPBaseComponent *a_control, CTLPGPOptionalText ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Font( *new CTLPGPFont( GetInstance(), _T( "Font" ))),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalText::CTLPGPOptionalText( CLPBaseComponent *a_control, CTLPGPOptionalText ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPOptionalText ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Font( *new CTLPGPFont( GetInstance(), _T( "Font" ))),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalText::CTLPGPOptionalText( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTLPGPFont( GetInstance(), _T( "Font" ))),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalText::CTLPGPOptionalText( const CTLPGPOptionalText &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Font( *new CTLPGPFont( GetInstance(), _T( "Font" ))),
  Enabled( GetInstance(), _T( "Enabled" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalText::~CTLPGPOptionalText()
{
  delete &Font;
}
//------------------------------------------------------------------------------
inline CTLPGPOptionalText & CTLPGPOptionalText::operator = ( const CTLPGPOptionalText & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPOptionalText::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPColorItem::CTLPGPColorItem( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItem::CTLPGPColorItem( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItem::CTLPGPColorItem( CLPClassProperty *a_property, CTLPGPColorItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItem::CTLPGPColorItem( CLPClassProperty *a_property, CTLPGPColorItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPColorItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItem::CTLPGPColorItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPColorItem ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItem::CTLPGPColorItem( CLPBaseComponent *a_control, CTLPGPColorItem ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItem::CTLPGPColorItem( CLPBaseComponent *a_control, CTLPGPColorItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPColorItem ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItem::CTLPGPColorItem( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItem::CTLPGPColorItem( const CTLPGPColorItem &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  Color( GetInstance(), _T( "Color" ) )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItem & CTLPGPColorItem::operator = ( const CTLPGPColorItem & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPColorItem::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTLPGPBasicColorItems<_TMP_TYPE_>::CTLPGPBasicColorItems( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTLPGPBasicColorItems<_TMP_TYPE_>::CTLPGPBasicColorItems( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTLPGPBasicColorItems<_TMP_TYPE_>::CTLPGPBasicColorItems( CLPClassProperty *a_property, CTLPGPBasicColorItems ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTLPGPBasicColorItems<_TMP_TYPE_>::CTLPGPBasicColorItems( CLPClassProperty *a_property, CTLPGPBasicColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBasicColorItems ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTLPGPBasicColorItems<_TMP_TYPE_>::CTLPGPBasicColorItems( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPBasicColorItems ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTLPGPBasicColorItems<_TMP_TYPE_>::CTLPGPBasicColorItems( CLPBaseComponent *a_control, CTLPGPBasicColorItems ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTLPGPBasicColorItems<_TMP_TYPE_>::CTLPGPBasicColorItems( CLPBaseComponent *a_control, CTLPGPBasicColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBasicColorItems ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTLPGPBasicColorItems<_TMP_TYPE_>::CTLPGPBasicColorItems( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTLPGPBasicColorItems<_TMP_TYPE_>::CTLPGPBasicColorItems( const CTLPGPBasicColorItems &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> CTLPGPBasicColorItems<_TMP_TYPE_> & CTLPGPBasicColorItems<_TMP_TYPE_>::operator = ( const CTLPGPBasicColorItems & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> VCLHANDLE CTLPGPBasicColorItems<_TMP_TYPE_>::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline CTLPGPColorItems::CTLPGPColorItems( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItems::CTLPGPColorItems( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItems::CTLPGPColorItems( CLPClassProperty *a_property, CTLPGPColorItems ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItems::CTLPGPColorItems( CLPClassProperty *a_property, CTLPGPColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPColorItems ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItems::CTLPGPColorItems( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPColorItems ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItems::CTLPGPColorItems( CLPBaseComponent *a_control, CTLPGPColorItems ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItems::CTLPGPColorItems( CLPBaseComponent *a_control, CTLPGPColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPColorItems ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control)
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItems::CTLPGPColorItems( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItems::CTLPGPColorItems( const CTLPGPColorItems &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL )
{
}
//------------------------------------------------------------------------------
inline CTLPGPColorItems & CTLPGPColorItems::operator = ( const CTLPGPColorItems & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTLPGPColorItems::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
#endif   // CLPGDIPlusPropertiesCode_H_
//------------------------------------------------------------------------------
