//------------------------------------------------------------------------------
//
//                    Generated by VCL C++ .NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2009
//                              www.mitov.com
//
//------------------------------------------------------------------------------
#ifndef CVLBasicBitmapCode_H_
#define CVLBasicBitmapCode_H_

//------------------------------------------------------------------------------
inline CTVLBasicBitmap::CTVLBasicBitmap() :
  inherited( VCL_CreateCall( ::Get_SignalLabBasicPkgCB6(), "@Vlbasicbitmap@TVLBasicBitmap@", "@Vlbasicbitmap@TVLBasicBitmap@$bctr$qqrv" ), hmOwned ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  PixelFormat( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetPixelFormat, &CTVLBasicBitmap::SetPixelFormat),
  Height( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Height, &CTVLBasicBitmap::SetHeight),
  Width( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Width, &CTVLBasicBitmap::SetWidth)
{
}
//------------------------------------------------------------------------------
inline CTVLBasicBitmap::CTVLBasicBitmap( CLPBaseComponent *a_control, const CLPString a_PropertyName ) :
  inherited( a_control, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  PixelFormat( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetPixelFormat, &CTVLBasicBitmap::SetPixelFormat),
  Height( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Height, &CTVLBasicBitmap::SetHeight),
  Width( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Width, &CTVLBasicBitmap::SetWidth)
{
}
//------------------------------------------------------------------------------
inline CTVLBasicBitmap::CTVLBasicBitmap( CLPClassProperty *a_property, const CLPString a_PropertyName ) :
  inherited( a_property, a_PropertyName ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  PixelFormat( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetPixelFormat, &CTVLBasicBitmap::SetPixelFormat),
  Height( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Height, &CTVLBasicBitmap::SetHeight),
  Width( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Width, &CTVLBasicBitmap::SetWidth)
{
}
//------------------------------------------------------------------------------
inline CTVLBasicBitmap::CTVLBasicBitmap( CLPClassProperty *a_property, CTVLBasicBitmap ( CLPBaseClass::*a_getter )() ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_property),
  PixelFormat( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetPixelFormat, &CTVLBasicBitmap::SetPixelFormat),
  Height( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Height, &CTVLBasicBitmap::SetHeight),
  Width( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Width, &CTVLBasicBitmap::SetWidth)
{
}
//------------------------------------------------------------------------------
inline CTVLBasicBitmap::CTVLBasicBitmap( CLPClassProperty *a_property, CTVLBasicBitmap ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTVLBasicBitmap ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  PixelFormat( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetPixelFormat, &CTVLBasicBitmap::SetPixelFormat),
  Height( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Height, &CTVLBasicBitmap::SetHeight),
  Width( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Width, &CTVLBasicBitmap::SetWidth)
{
}
//------------------------------------------------------------------------------
inline CTVLBasicBitmap::CTVLBasicBitmap( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTVLBasicBitmap ) ) :
  inherited( a_property, _T( "-" ) ),
  m_Property_Getter(NULL),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_property),
  PixelFormat( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetPixelFormat, &CTVLBasicBitmap::SetPixelFormat),
  Height( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Height, &CTVLBasicBitmap::SetHeight),
  Width( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Width, &CTVLBasicBitmap::SetWidth)
{
}
//------------------------------------------------------------------------------
inline CTVLBasicBitmap::CTVLBasicBitmap( CLPBaseComponent *a_control, CTVLBasicBitmap ( CLPBaseClass::*a_getter )() ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(NULL),
  m_Owner_Property(a_control),
  PixelFormat( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetPixelFormat, &CTVLBasicBitmap::SetPixelFormat),
  Height( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Height, &CTVLBasicBitmap::SetHeight),
  Width( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Width, &CTVLBasicBitmap::SetWidth)
{
}
//------------------------------------------------------------------------------
inline CTVLBasicBitmap::CTVLBasicBitmap( CLPBaseComponent *a_control, CTVLBasicBitmap ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTVLBasicBitmap ) ) :
  inherited( a_control, _T( "-" ) ),
  m_Property_Getter(a_getter),
  m_Property_Setter(a_setter),
  m_Owner_Property(a_control),
  PixelFormat( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetPixelFormat, &CTVLBasicBitmap::SetPixelFormat),
  Height( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Height, &CTVLBasicBitmap::SetHeight),
  Width( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Width, &CTVLBasicBitmap::SetWidth)
{
}
//------------------------------------------------------------------------------
inline CTVLBasicBitmap::CTVLBasicBitmap( VCLHANDLE handle, ELPHandleMode owns_handle ) :
  inherited( handle, owns_handle ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  PixelFormat( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetPixelFormat, &CTVLBasicBitmap::SetPixelFormat),
  Height( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Height, &CTVLBasicBitmap::SetHeight),
  Width( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Width, &CTVLBasicBitmap::SetWidth)
{
}
//------------------------------------------------------------------------------
inline CTVLBasicBitmap::CTVLBasicBitmap( const CTVLBasicBitmap &other ) :
  inherited( other ),
  m_Property_Getter( NULL ),
  m_Property_Setter( NULL ),
  m_Owner_Property( NULL ),
  PixelFormat( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetPixelFormat, &CTVLBasicBitmap::SetPixelFormat),
  Height( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Height, &CTVLBasicBitmap::SetHeight),
  Width( (CTVLBasicBitmap *)GetInstance(), &CTVLBasicBitmap::GetVC_Width, &CTVLBasicBitmap::SetWidth)
{
}
//------------------------------------------------------------------------------
inline CTVLBasicBitmap & CTVLBasicBitmap::operator = ( const CTVLBasicBitmap & other )
{
  if( m_Property_Setter )
	  (m_Owner_Property->*m_Property_Setter)( other );

  else
	  inherited::operator = ( other );

  return *this;
}
//------------------------------------------------------------------------------
inline VCLHANDLE CTVLBasicBitmap::Get_VCL_Handle() const
{
  if( m_Property_Getter )
	  {
		if( ! m_Object )
		  m_Object = new CVCLObject( (m_Owner_Property->*m_Property_Getter)().Get_VCL_Handle() );

	  }

  return inherited::Get_VCL_Handle();
}
//------------------------------------------------------------------------------
inline void CTVLBasicBitmap::Resize( int AWidth, int AHeight )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Vlbasicbitmap@TVLBasicBitmap@Resize$qqrii" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AWidth;
    int __1_Param2 = AHeight;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTVLBasicBitmap::FromBuffer( BYTE * APtr, int AScanlineStep )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Vlbasicbitmap@TVLBasicBitmap@FromBuffer$qqrpuci" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    BYTE * __1_Param1 = APtr;
    int __1_Param2 = AScanlineStep;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTVLBasicBitmap::ToBuffer( BYTE * APtr, int AScanlineStep )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Vlbasicbitmap@TVLBasicBitmap@ToBuffer$qqrpuci" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    BYTE * __1_Param1 = APtr;
    int __1_Param2 = AScanlineStep;

    _asm
      {
      push eax
      push edx
      push ecx
      mov  edx,__1_Param1
      mov  ecx,__1_Param2
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  ecx
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTVLBasicBitmap::ToBitmap( HBITMAP &ABitmap )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Vlbasicbitmap@TVLBasicBitmap@ToBitmap$qqrp16Graphics@TBitmap" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    VCLHANDLE __1_Param1 = VC_VLCreateBitmap( ABitmap );

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }

    ABitmap = VC_VLDestroyBitmap( __1_Param1 );
    }

}
//------------------------------------------------------------------------------
inline HDC CTVLBasicBitmap::GetDC()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Vlbasicbitmap@TVLBasicBitmap@GetDC$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  HDC __0_RtnValue_ = (HDC)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (HDC)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline unsigned char CTVLBasicBitmap::GetPixelFormat()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Vlbasicbitmap@TVLBasicBitmap@GetPixelFormat$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  unsigned char __0_RtnValue_ = 0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,al
      pop  eax
      }
    }

  return (unsigned char)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline void CTVLBasicBitmap::SetPixelFormat( unsigned char AValue )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Vlbasicbitmap@TVLBasicBitmap@SetPixelFormat$qqr21Graphics@TPixelFormat" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    unsigned char __1_Param1 = AValue;

    _asm
      {
      push eax
      push edx
      mov  edx,0
      mov  dl,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTVLBasicBitmap::SetHeight( int AHeight )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Vlbasicbitmap@TVLBasicBitmap@SetHeight$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AHeight;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline void CTVLBasicBitmap::SetWidth( int AWidth )
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Vlbasicbitmap@TVLBasicBitmap@SetWidth$qqri" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    int __1_Param1 = AWidth;

    _asm
      {
      push eax
      push edx
      mov  edx,__1_Param1
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      pop  edx
      pop  eax
      }
    }

}
//------------------------------------------------------------------------------
inline int CTVLBasicBitmap::GetVC_Height()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Vlbasicbitmap@TVLBasicBitmap@GetVC_Height$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
inline int CTVLBasicBitmap::GetVC_Width()
{
  static void *__0_FuncPtr_ = NULL;
  if( __0_FuncPtr_ == NULL )
    __0_FuncPtr_ = (void *)( GetFunction( "@Vlbasicbitmap@TVLBasicBitmap@GetVC_Width$qqrv" ));

  VCLHANDLE __0_ThisPtr_ = Get_VCL_FunctionHandle();

  int __0_RtnValue_ = (int)0;

  if( __0_FuncPtr_ && __0_ThisPtr_ )
    {
    _asm
      {
      push eax
      mov  eax,dword ptr [ __0_ThisPtr_ ]
      call dword ptr [ __0_FuncPtr_ ]
      mov  __0_RtnValue_,eax
      pop  eax
      }
    }

  return (int)__0_RtnValue_;
}
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
#endif   // CVLBasicBitmapCode_H_
//------------------------------------------------------------------------------
