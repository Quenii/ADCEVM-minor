//------------------------------------------------------------------------------
//
//                    Generated by VCL C++ .NET FrontEnd.
//                   (C)Copyright Boian Mitov 2005 - 2009
//                              www.mitov.com
//
//------------------------------------------------------------------------------
#ifndef CLPGDIPlusProperties_H_
#define CLPGDIPlusProperties_H_

//------------------------------------------------------------------------------
#ifndef VCLSupportH
  #include <VCLSupport.h>
#endif

#ifndef CSignalLabBasicPkgCB6_H_
  #include <CSignalLabBasicPkgCB6.h>
#endif
#ifndef CSLStreamTypes_H_
  #include <CSLStreamTypes.h>
#endif


//------------------------------------------------------------------------------

enum CTLPGPBlendShapeType { bstNone, bstTriangular, bstBell };

//------------------------------------------------------------------------------
class CTLPGPImage : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPReadAccessProperty<CTLPGPImage,int> Height;
  CLPReadAccessProperty<CTLPGPImage,int> Width;

protected:
  int GetHeight();
  int GetWidth();

public:
  void LoadFromFile( CTString FileName );
  void SaveToFile( CTString FileName, CTString Format );
  void SaveToFile( CTString FileName );
  void GetFormats( CTStrings AFormats );
  bool IsEmpty();
  void Clear();

public:
  CTLPGPImage( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPImage( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPImage( CLPClassProperty *a_property, CTLPGPImage ( CLPBaseClass::*a_getter )() );
  CTLPGPImage( CLPClassProperty *a_property, CTLPGPImage ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPImage ) );
  CTLPGPImage( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPImage ) );
  CTLPGPImage( CLPBaseComponent *a_control, CTLPGPImage ( CLPBaseClass::*a_getter )() );
  CTLPGPImage( CLPBaseComponent *a_control, CTLPGPImage ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPImage ) );
  CTLPGPImage( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPImage( const CTLPGPImage &other );

public:
  CTLPGPImage & operator = ( const CTLPGPImage & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPImage ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPImage Value );
};
//------------------------------------------------------------------------------
class CTLPGPPoint : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPAccessProperty<CTLPGPPoint,float> X;
  CLPAccessProperty<CTLPGPPoint,float> Y;

protected:
  float GetY();
  void SetY( float AValue );
  float GetX();
  void SetX( float AValue );

public:
  CTLPGPPoint( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPPoint( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPPoint( CLPClassProperty *a_property, CTLPGPPoint ( CLPBaseClass::*a_getter )() );
  CTLPGPPoint( CLPClassProperty *a_property, CTLPGPPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPoint ) );
  CTLPGPPoint( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPPoint ) );
  CTLPGPPoint( CLPBaseComponent *a_control, CTLPGPPoint ( CLPBaseClass::*a_getter )() );
  CTLPGPPoint( CLPBaseComponent *a_control, CTLPGPPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPoint ) );
  CTLPGPPoint( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPPoint( const CTLPGPPoint &other );

public:
  CTLPGPPoint & operator = ( const CTLPGPPoint & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPPoint ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPPoint Value );
};
//------------------------------------------------------------------------------
class CTLPGPSize : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPAccessProperty<CTLPGPSize,float> Width;
  CLPAccessProperty<CTLPGPSize,float> Height;

protected:
  float GetHeight();
  void SetHeight( float AValue );
  float GetWidth();
  void SetWidth( float AValue );

public:
  CTLPGPSize( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPSize( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPSize( CLPClassProperty *a_property, CTLPGPSize ( CLPBaseClass::*a_getter )() );
  CTLPGPSize( CLPClassProperty *a_property, CTLPGPSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPSize ) );
  CTLPGPSize( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPSize ) );
  CTLPGPSize( CLPBaseComponent *a_control, CTLPGPSize ( CLPBaseClass::*a_getter )() );
  CTLPGPSize( CLPBaseComponent *a_control, CTLPGPSize ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPSize ) );
  CTLPGPSize( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPSize( const CTLPGPSize &other );

public:
  CTLPGPSize & operator = ( const CTLPGPSize & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPSize ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPSize Value );
};
//------------------------------------------------------------------------------
class CTLPGPBlends : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPIndexProperty_1<CTLPGPBlends,int,CTGPBlend> Items;
  CLPReadAccessProperty<CTLPGPBlends,int> Count;

protected:
  CTGPBlend GetItem( int AIndex );
  void SetItem( int AIndex, CTGPBlend AValue );
  int GetCount();

public:
  CTLPGPBlends( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPBlends( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPBlends( CLPClassProperty *a_property, CTLPGPBlends ( CLPBaseClass::*a_getter )() );
  CTLPGPBlends( CLPClassProperty *a_property, CTLPGPBlends ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBlends ) );
  CTLPGPBlends( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPBlends ) );
  CTLPGPBlends( CLPBaseComponent *a_control, CTLPGPBlends ( CLPBaseClass::*a_getter )() );
  CTLPGPBlends( CLPBaseComponent *a_control, CTLPGPBlends ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBlends ) );
  CTLPGPBlends( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPBlends( const CTLPGPBlends &other );

public:
  CTLPGPBlends & operator = ( const CTLPGPBlends & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPBlends ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPBlends Value );
};
//------------------------------------------------------------------------------
class CTLPGPBlendShape : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPEnumProperty<CTLPGPBlendShapeType> ShapeType;
  CLPProperty<float> Focus;
  CLPProperty<float> Scale;

public:
  CTLPGPBlendShape( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPBlendShape( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPBlendShape( CLPClassProperty *a_property, CTLPGPBlendShape ( CLPBaseClass::*a_getter )() );
  CTLPGPBlendShape( CLPClassProperty *a_property, CTLPGPBlendShape ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBlendShape ) );
  CTLPGPBlendShape( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPBlendShape ) );
  CTLPGPBlendShape( CLPBaseComponent *a_control, CTLPGPBlendShape ( CLPBaseClass::*a_getter )() );
  CTLPGPBlendShape( CLPBaseComponent *a_control, CTLPGPBlendShape ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBlendShape ) );
  CTLPGPBlendShape( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPBlendShape( const CTLPGPBlendShape &other );

public:
  CTLPGPBlendShape & operator = ( const CTLPGPBlendShape & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPBlendShape ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPBlendShape Value );
};
//------------------------------------------------------------------------------
class CTLPGPBlend : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTLPGPBlends &Blends;
  class CTLPGPBlendShape &Shape;

public:    // Properties
  CLPProperty<bool> Enabled;

public:
  CTLPGPBlend( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPBlend( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPBlend( CLPClassProperty *a_property, CTLPGPBlend ( CLPBaseClass::*a_getter )() );
  CTLPGPBlend( CLPClassProperty *a_property, CTLPGPBlend ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBlend ) );
  CTLPGPBlend( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPBlend ) );
  CTLPGPBlend( CLPBaseComponent *a_control, CTLPGPBlend ( CLPBaseClass::*a_getter )() );
  CTLPGPBlend( CLPBaseComponent *a_control, CTLPGPBlend ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBlend ) );
  CTLPGPBlend( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPBlend( const CTLPGPBlend &other );
  virtual ~CTLPGPBlend();

public:
  CTLPGPBlend & operator = ( const CTLPGPBlend & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPBlend ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPBlend Value );
};
//------------------------------------------------------------------------------
class CTLPGPPoints : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPIndexProperty_1<CTLPGPPoints,int,CTGPPointF> Items;
  CLPReadAccessProperty<CTLPGPPoints,int> Count;

protected:
  CTGPPointF GetItem( int AIndex );
  void SetItem( int AIndex, CTGPPointF AValue );
  int GetCount();

public:
  void Clear();
  void Add( float X, float Y );
  void BeginUpdate();
  void EndUpdate();

public:
  CTLPGPPoints( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPPoints( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPPoints( CLPClassProperty *a_property, CTLPGPPoints ( CLPBaseClass::*a_getter )() );
  CTLPGPPoints( CLPClassProperty *a_property, CTLPGPPoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPoints ) );
  CTLPGPPoints( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPPoints ) );
  CTLPGPPoints( CLPBaseComponent *a_control, CTLPGPPoints ( CLPBaseClass::*a_getter )() );
  CTLPGPPoints( CLPBaseComponent *a_control, CTLPGPPoints ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPoints ) );
  CTLPGPPoints( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPPoints( const CTLPGPPoints &other );

public:
  CTLPGPPoints & operator = ( const CTLPGPPoints & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPPoints ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPPoints Value );
};
//------------------------------------------------------------------------------
class CTLPGPColors : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPIndexProperty_1<CTLPGPColors,int,CTGPColor> Items;
  CLPReadAccessProperty<CTLPGPColors,int> Count;

protected:
  CTGPColor GetItem( int AIndex );
  void SetItem( int AIndex, CTGPColor AValue );
  int GetCount();

public:
  void Clear();
  void Add( CTGPColor AColor );
  void BeginUpdate();
  void EndUpdate();

public:
  CTLPGPColors( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPColors( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPColors( CLPClassProperty *a_property, CTLPGPColors ( CLPBaseClass::*a_getter )() );
  CTLPGPColors( CLPClassProperty *a_property, CTLPGPColors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPColors ) );
  CTLPGPColors( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPColors ) );
  CTLPGPColors( CLPBaseComponent *a_control, CTLPGPColors ( CLPBaseClass::*a_getter )() );
  CTLPGPColors( CLPBaseComponent *a_control, CTLPGPColors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPColors ) );
  CTLPGPColors( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPColors( const CTLPGPColors &other );

public:
  CTLPGPColors & operator = ( const CTLPGPColors & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPColors ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPColors Value );
};
//------------------------------------------------------------------------------
class CTLPGPInterpolationColors : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPIndexProperty_1<CTLPGPInterpolationColors,int,CTGPInterpolationColor> Items;
  CLPReadAccessProperty<CTLPGPInterpolationColors,int> Count;

protected:
  CTGPInterpolationColor GetItem( int AIndex );
  void SetItem( int AIndex, CTGPInterpolationColor AValue );
  int GetCount();

public:
  CTLPGPInterpolationColors( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPInterpolationColors( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPInterpolationColors( CLPClassProperty *a_property, CTLPGPInterpolationColors ( CLPBaseClass::*a_getter )() );
  CTLPGPInterpolationColors( CLPClassProperty *a_property, CTLPGPInterpolationColors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPInterpolationColors ) );
  CTLPGPInterpolationColors( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPInterpolationColors ) );
  CTLPGPInterpolationColors( CLPBaseComponent *a_control, CTLPGPInterpolationColors ( CLPBaseClass::*a_getter )() );
  CTLPGPInterpolationColors( CLPBaseComponent *a_control, CTLPGPInterpolationColors ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPInterpolationColors ) );
  CTLPGPInterpolationColors( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPInterpolationColors( const CTLPGPInterpolationColors &other );

public:
  CTLPGPInterpolationColors & operator = ( const CTLPGPInterpolationColors & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPInterpolationColors ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPInterpolationColors Value );
};
//------------------------------------------------------------------------------
class CTLPGPHatch : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTGPColor> ForegroundColor;
  CLPProperty<CTGPColor> BackgroundColor;
  CLPEnumProperty<unsigned char> Style;

public:
  CTLPGPHatch( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPHatch( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPHatch( CLPClassProperty *a_property, CTLPGPHatch ( CLPBaseClass::*a_getter )() );
  CTLPGPHatch( CLPClassProperty *a_property, CTLPGPHatch ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPHatch ) );
  CTLPGPHatch( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPHatch ) );
  CTLPGPHatch( CLPBaseComponent *a_control, CTLPGPHatch ( CLPBaseClass::*a_getter )() );
  CTLPGPHatch( CLPBaseComponent *a_control, CTLPGPHatch ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPHatch ) );
  CTLPGPHatch( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPHatch( const CTLPGPHatch &other );

public:
  CTLPGPHatch & operator = ( const CTLPGPHatch & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPHatch ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPHatch Value );
};
//------------------------------------------------------------------------------
class CTLPGPCenterPoint : public CTLPGPPoint
{
//DOM-IGNORE-BEGIN
  typedef CTLPGPPoint inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> AutoCenter;

public:
  CTLPGPCenterPoint( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPCenterPoint( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPCenterPoint( CLPClassProperty *a_property, CTLPGPCenterPoint ( CLPBaseClass::*a_getter )() );
  CTLPGPCenterPoint( CLPClassProperty *a_property, CTLPGPCenterPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPCenterPoint ) );
  CTLPGPCenterPoint( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPCenterPoint ) );
  CTLPGPCenterPoint( CLPBaseComponent *a_control, CTLPGPCenterPoint ( CLPBaseClass::*a_getter )() );
  CTLPGPCenterPoint( CLPBaseComponent *a_control, CTLPGPCenterPoint ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPCenterPoint ) );
  CTLPGPCenterPoint( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPCenterPoint( const CTLPGPCenterPoint &other );

public:
  CTLPGPCenterPoint & operator = ( const CTLPGPCenterPoint & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPCenterPoint ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPCenterPoint Value );
};
//------------------------------------------------------------------------------
class CTGPCenterColor : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTLPGPCenterPoint &Point;

public:    // Properties
  CLPProperty<CTGPColor> Color;

public:
  CTGPCenterColor( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTGPCenterColor( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTGPCenterColor( CLPClassProperty *a_property, CTGPCenterColor ( CLPBaseClass::*a_getter )() );
  CTGPCenterColor( CLPClassProperty *a_property, CTGPCenterColor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTGPCenterColor ) );
  CTGPCenterColor( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTGPCenterColor ) );
  CTGPCenterColor( CLPBaseComponent *a_control, CTGPCenterColor ( CLPBaseClass::*a_getter )() );
  CTGPCenterColor( CLPBaseComponent *a_control, CTGPCenterColor ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTGPCenterColor ) );
  CTGPCenterColor( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTGPCenterColor( const CTGPCenterColor &other );
  virtual ~CTGPCenterColor();

public:
  CTGPCenterColor & operator = ( const CTGPCenterColor & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTGPCenterColor ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTGPCenterColor Value );
};
//------------------------------------------------------------------------------
class CTLPGPGradient : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTLPGPPoints &Path;
  class CTLPGPColors &Colors;
  class CTGPCenterColor &CenterColor;

public:    // Properties
  CLPProperty<bool> GammaCorrection;

public:
  CTLPGPGradient( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPGradient( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPGradient( CLPClassProperty *a_property, CTLPGPGradient ( CLPBaseClass::*a_getter )() );
  CTLPGPGradient( CLPClassProperty *a_property, CTLPGPGradient ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPGradient ) );
  CTLPGPGradient( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPGradient ) );
  CTLPGPGradient( CLPBaseComponent *a_control, CTLPGPGradient ( CLPBaseClass::*a_getter )() );
  CTLPGPGradient( CLPBaseComponent *a_control, CTLPGPGradient ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPGradient ) );
  CTLPGPGradient( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPGradient( const CTLPGPGradient &other );
  virtual ~CTLPGPGradient();

public:
  CTLPGPGradient & operator = ( const CTLPGPGradient & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPGradient ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPGradient Value );
};
//------------------------------------------------------------------------------
class CTLPGPBrush : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTLPGPImage &Texture;
  class CTLPGPGradient &Gradient;
  class CTLPGPHatch &Hatch;
  class CTLPGPInterpolationColors &InterpolationColors;

public:    // Properties
  CLPEnumProperty<unsigned char> BrushType;
  CLPProperty<CTGPColor> Color;
  CLPEnumProperty<unsigned char> WrapMode;

public:
  CTLPGPBrush( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPBrush( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPBrush( CLPClassProperty *a_property, CTLPGPBrush ( CLPBaseClass::*a_getter )() );
  CTLPGPBrush( CLPClassProperty *a_property, CTLPGPBrush ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBrush ) );
  CTLPGPBrush( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPBrush ) );
  CTLPGPBrush( CLPBaseComponent *a_control, CTLPGPBrush ( CLPBaseClass::*a_getter )() );
  CTLPGPBrush( CLPBaseComponent *a_control, CTLPGPBrush ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBrush ) );
  CTLPGPBrush( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPBrush( const CTLPGPBrush &other );
  virtual ~CTLPGPBrush();

public:
  CTLPGPBrush & operator = ( const CTLPGPBrush & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPBrush ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPBrush Value );
};
//------------------------------------------------------------------------------
class CTLPGPSingleArray : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPIndexProperty_1<CTLPGPSingleArray,int,float> Items;
  CLPReadAccessProperty<CTLPGPSingleArray,int> Count;

protected:
  float GetItem( int AIndex );
  void SetItemProp( int AIndex, float AValue );
  int GetCount();

public:
  void Clear();
  virtual void Add( float AValue );
  void BeginUpdate();
  void EndUpdate();

public:
  CTLPGPSingleArray( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPSingleArray( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPSingleArray( CLPClassProperty *a_property, CTLPGPSingleArray ( CLPBaseClass::*a_getter )() );
  CTLPGPSingleArray( CLPClassProperty *a_property, CTLPGPSingleArray ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPSingleArray ) );
  CTLPGPSingleArray( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPSingleArray ) );
  CTLPGPSingleArray( CLPBaseComponent *a_control, CTLPGPSingleArray ( CLPBaseClass::*a_getter )() );
  CTLPGPSingleArray( CLPBaseComponent *a_control, CTLPGPSingleArray ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPSingleArray ) );
  CTLPGPSingleArray( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPSingleArray( const CTLPGPSingleArray &other );

public:
  CTLPGPSingleArray & operator = ( const CTLPGPSingleArray & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPSingleArray ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPSingleArray Value );
};
//------------------------------------------------------------------------------
class CTLPGPCustomDash : public CTLPGPSingleArray
{
//DOM-IGNORE-BEGIN
  typedef CTLPGPSingleArray inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTLPGPCustomDash( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPCustomDash( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPCustomDash( CLPClassProperty *a_property, CTLPGPCustomDash ( CLPBaseClass::*a_getter )() );
  CTLPGPCustomDash( CLPClassProperty *a_property, CTLPGPCustomDash ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPCustomDash ) );
  CTLPGPCustomDash( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPCustomDash ) );
  CTLPGPCustomDash( CLPBaseComponent *a_control, CTLPGPCustomDash ( CLPBaseClass::*a_getter )() );
  CTLPGPCustomDash( CLPBaseComponent *a_control, CTLPGPCustomDash ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPCustomDash ) );
  CTLPGPCustomDash( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPCustomDash( const CTLPGPCustomDash &other );

public:
  CTLPGPCustomDash & operator = ( const CTLPGPCustomDash & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPCustomDash ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPCustomDash Value );
};
//------------------------------------------------------------------------------
class CTLPGPDashStyle : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTLPGPCustomDash &CustomDash;

public:    // Properties
  CLPEnumProperty<unsigned char> Style;
  CLPProperty<float> Offset;

public:
  CTLPGPDashStyle( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPDashStyle( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPDashStyle( CLPClassProperty *a_property, CTLPGPDashStyle ( CLPBaseClass::*a_getter )() );
  CTLPGPDashStyle( CLPClassProperty *a_property, CTLPGPDashStyle ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPDashStyle ) );
  CTLPGPDashStyle( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPDashStyle ) );
  CTLPGPDashStyle( CLPBaseComponent *a_control, CTLPGPDashStyle ( CLPBaseClass::*a_getter )() );
  CTLPGPDashStyle( CLPBaseComponent *a_control, CTLPGPDashStyle ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPDashStyle ) );
  CTLPGPDashStyle( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPDashStyle( const CTLPGPDashStyle &other );
  virtual ~CTLPGPDashStyle();

public:
  CTLPGPDashStyle & operator = ( const CTLPGPDashStyle & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPDashStyle ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPDashStyle Value );
};
//------------------------------------------------------------------------------
class CTLPGPPenCompound : public CTLPGPSingleArray
{
//DOM-IGNORE-BEGIN
  typedef CTLPGPSingleArray inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  virtual void Add( float AValue );

public:
  CTLPGPPenCompound( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPPenCompound( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPPenCompound( CLPClassProperty *a_property, CTLPGPPenCompound ( CLPBaseClass::*a_getter )() );
  CTLPGPPenCompound( CLPClassProperty *a_property, CTLPGPPenCompound ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPenCompound ) );
  CTLPGPPenCompound( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPPenCompound ) );
  CTLPGPPenCompound( CLPBaseComponent *a_control, CTLPGPPenCompound ( CLPBaseClass::*a_getter )() );
  CTLPGPPenCompound( CLPBaseComponent *a_control, CTLPGPPenCompound ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPenCompound ) );
  CTLPGPPenCompound( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPPenCompound( const CTLPGPPenCompound &other );

public:
  CTLPGPPenCompound & operator = ( const CTLPGPPenCompound & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPPenCompound ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPPenCompound Value );
};
//------------------------------------------------------------------------------
class CTLPGPPen : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTLPGPBrush &Brush;
  class CTLPGPDashStyle &DashStyle;
  class CTLPGPPenCompound &Compound;

public:    // Properties
  CLPProperty<float> Width;
  CLPEnumProperty<unsigned char> Alignment;
  CLPProperty<float> MiterLimit;
  CLPEnumProperty<CTGPLineJoin> LineJoin;

public:
  CTLPGPPen( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPPen( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPPen( CLPClassProperty *a_property, CTLPGPPen ( CLPBaseClass::*a_getter )() );
  CTLPGPPen( CLPClassProperty *a_property, CTLPGPPen ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPen ) );
  CTLPGPPen( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPPen ) );
  CTLPGPPen( CLPBaseComponent *a_control, CTLPGPPen ( CLPBaseClass::*a_getter )() );
  CTLPGPPen( CLPBaseComponent *a_control, CTLPGPPen ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPen ) );
  CTLPGPPen( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPPen( const CTLPGPPen &other );
  virtual ~CTLPGPPen();

public:
  CTLPGPPen & operator = ( const CTLPGPPen & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPPen ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPPen Value );
};
//------------------------------------------------------------------------------
class CTLPGPPenCollectionItem : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTLPGPPen &Pen;

public:
  CTLPGPPenCollectionItem( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPPenCollectionItem( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPPenCollectionItem( CLPClassProperty *a_property, CTLPGPPenCollectionItem ( CLPBaseClass::*a_getter )() );
  CTLPGPPenCollectionItem( CLPClassProperty *a_property, CTLPGPPenCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPenCollectionItem ) );
  CTLPGPPenCollectionItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPPenCollectionItem ) );
  CTLPGPPenCollectionItem( CLPBaseComponent *a_control, CTLPGPPenCollectionItem ( CLPBaseClass::*a_getter )() );
  CTLPGPPenCollectionItem( CLPBaseComponent *a_control, CTLPGPPenCollectionItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPenCollectionItem ) );
  CTLPGPPenCollectionItem( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPPenCollectionItem( const CTLPGPPenCollectionItem &other );
  virtual ~CTLPGPPenCollectionItem();

public:
  CTLPGPPenCollectionItem & operator = ( const CTLPGPPenCollectionItem & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPPenCollectionItem ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPPenCollectionItem Value );
};
//------------------------------------------------------------------------------
class CTLPGPPenCollection : public CLPCollectionProperty<CTLPGPPenCollectionItem>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<CTLPGPPenCollectionItem> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTLPGPPenCollection( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPPenCollection( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPPenCollection( CLPClassProperty *a_property, CTLPGPPenCollection ( CLPBaseClass::*a_getter )() );
  CTLPGPPenCollection( CLPClassProperty *a_property, CTLPGPPenCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPenCollection ) );
  CTLPGPPenCollection( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPPenCollection ) );
  CTLPGPPenCollection( CLPBaseComponent *a_control, CTLPGPPenCollection ( CLPBaseClass::*a_getter )() );
  CTLPGPPenCollection( CLPBaseComponent *a_control, CTLPGPPenCollection ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPPenCollection ) );
  CTLPGPPenCollection( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPPenCollection( const CTLPGPPenCollection &other );

public:
  CTLPGPPenCollection & operator = ( const CTLPGPPenCollection & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPPenCollection ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPPenCollection Value );
};
//------------------------------------------------------------------------------
class CTLPGPOptionalPen : public CTLPGPPen
{
//DOM-IGNORE-BEGIN
  typedef CTLPGPPen inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<bool> Enabled;

public:
  CTLPGPOptionalPen( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPOptionalPen( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPOptionalPen( CLPClassProperty *a_property, CTLPGPOptionalPen ( CLPBaseClass::*a_getter )() );
  CTLPGPOptionalPen( CLPClassProperty *a_property, CTLPGPOptionalPen ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPOptionalPen ) );
  CTLPGPOptionalPen( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPOptionalPen ) );
  CTLPGPOptionalPen( CLPBaseComponent *a_control, CTLPGPOptionalPen ( CLPBaseClass::*a_getter )() );
  CTLPGPOptionalPen( CLPBaseComponent *a_control, CTLPGPOptionalPen ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPOptionalPen ) );
  CTLPGPOptionalPen( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPOptionalPen( const CTLPGPOptionalPen &other );

public:
  CTLPGPOptionalPen & operator = ( const CTLPGPOptionalPen & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPOptionalPen ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPOptionalPen Value );
};
//------------------------------------------------------------------------------
class CTLPGPOptionalMultiPen : public CTLPGPOptionalPen
{
//DOM-IGNORE-BEGIN
  typedef CTLPGPOptionalPen inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTLPGPPenCollection &AdditionalPens;

public:
  CTLPGPOptionalMultiPen( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPOptionalMultiPen( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPOptionalMultiPen( CLPClassProperty *a_property, CTLPGPOptionalMultiPen ( CLPBaseClass::*a_getter )() );
  CTLPGPOptionalMultiPen( CLPClassProperty *a_property, CTLPGPOptionalMultiPen ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPOptionalMultiPen ) );
  CTLPGPOptionalMultiPen( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPOptionalMultiPen ) );
  CTLPGPOptionalMultiPen( CLPBaseComponent *a_control, CTLPGPOptionalMultiPen ( CLPBaseClass::*a_getter )() );
  CTLPGPOptionalMultiPen( CLPBaseComponent *a_control, CTLPGPOptionalMultiPen ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPOptionalMultiPen ) );
  CTLPGPOptionalMultiPen( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPOptionalMultiPen( const CTLPGPOptionalMultiPen &other );
  virtual ~CTLPGPOptionalMultiPen();

public:
  CTLPGPOptionalMultiPen & operator = ( const CTLPGPOptionalMultiPen & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPOptionalMultiPen ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPOptionalMultiPen Value );
};
//------------------------------------------------------------------------------
class CTLPGPBasicFont : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTString> Name;
  CLPProperty<CTFontStyles> Style;

public:
  CTLPGPBasicFont( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPBasicFont( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPBasicFont( CLPClassProperty *a_property, CTLPGPBasicFont ( CLPBaseClass::*a_getter )() );
  CTLPGPBasicFont( CLPClassProperty *a_property, CTLPGPBasicFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBasicFont ) );
  CTLPGPBasicFont( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPBasicFont ) );
  CTLPGPBasicFont( CLPBaseComponent *a_control, CTLPGPBasicFont ( CLPBaseClass::*a_getter )() );
  CTLPGPBasicFont( CLPBaseComponent *a_control, CTLPGPBasicFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBasicFont ) );
  CTLPGPBasicFont( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPBasicFont( const CTLPGPBasicFont &other );

public:
  CTLPGPBasicFont & operator = ( const CTLPGPBasicFont & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPBasicFont ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPBasicFont Value );
};
//------------------------------------------------------------------------------
class CTLPGPSimpleFont : public CTLPGPBasicFont
{
//DOM-IGNORE-BEGIN
  typedef CTLPGPBasicFont inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTLPGPBrush &Brush;
  class CTLPGPOptionalMultiPen &Pen;

public:
  CTLPGPSimpleFont( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPSimpleFont( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPSimpleFont( CLPClassProperty *a_property, CTLPGPSimpleFont ( CLPBaseClass::*a_getter )() );
  CTLPGPSimpleFont( CLPClassProperty *a_property, CTLPGPSimpleFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPSimpleFont ) );
  CTLPGPSimpleFont( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPSimpleFont ) );
  CTLPGPSimpleFont( CLPBaseComponent *a_control, CTLPGPSimpleFont ( CLPBaseClass::*a_getter )() );
  CTLPGPSimpleFont( CLPBaseComponent *a_control, CTLPGPSimpleFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPSimpleFont ) );
  CTLPGPSimpleFont( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPSimpleFont( const CTLPGPSimpleFont &other );
  virtual ~CTLPGPSimpleFont();

public:
  CTLPGPSimpleFont & operator = ( const CTLPGPSimpleFont & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPSimpleFont ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPSimpleFont Value );
};
//------------------------------------------------------------------------------
class CTLPGPFont : public CTLPGPSimpleFont
{
//DOM-IGNORE-BEGIN
  typedef CTLPGPSimpleFont inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<int> Size;

public:
  CTLPGPFont( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPFont( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPFont( CLPClassProperty *a_property, CTLPGPFont ( CLPBaseClass::*a_getter )() );
  CTLPGPFont( CLPClassProperty *a_property, CTLPGPFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPFont ) );
  CTLPGPFont( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPFont ) );
  CTLPGPFont( CLPBaseComponent *a_control, CTLPGPFont ( CLPBaseClass::*a_getter )() );
  CTLPGPFont( CLPBaseComponent *a_control, CTLPGPFont ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPFont ) );
  CTLPGPFont( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPFont( const CTLPGPFont &other );

public:
  CTLPGPFont & operator = ( const CTLPGPFont & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPFont ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPFont Value );
};
//------------------------------------------------------------------------------
class CTLPGPOptionalText : public CTLPLockedPersistentNotify
{
//DOM-IGNORE-BEGIN
  typedef CTLPLockedPersistentNotify inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Class Properties
  class CTLPGPFont &Font;

public:    // Properties
  CLPProperty<bool> Enabled;

public:
  CTLPGPOptionalText( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPOptionalText( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPOptionalText( CLPClassProperty *a_property, CTLPGPOptionalText ( CLPBaseClass::*a_getter )() );
  CTLPGPOptionalText( CLPClassProperty *a_property, CTLPGPOptionalText ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPOptionalText ) );
  CTLPGPOptionalText( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPOptionalText ) );
  CTLPGPOptionalText( CLPBaseComponent *a_control, CTLPGPOptionalText ( CLPBaseClass::*a_getter )() );
  CTLPGPOptionalText( CLPBaseComponent *a_control, CTLPGPOptionalText ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPOptionalText ) );
  CTLPGPOptionalText( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPOptionalText( const CTLPGPOptionalText &other );
  virtual ~CTLPGPOptionalText();

public:
  CTLPGPOptionalText & operator = ( const CTLPGPOptionalText & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPOptionalText ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPOptionalText Value );
};
//------------------------------------------------------------------------------
class CTLPGPColorItem : public CLPClassProperty
{
//DOM-IGNORE-BEGIN
  typedef CLPClassProperty inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:    // Properties
  CLPProperty<CTGPColor> Color;

public:
  CTLPGPColorItem( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPColorItem( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPColorItem( CLPClassProperty *a_property, CTLPGPColorItem ( CLPBaseClass::*a_getter )() );
  CTLPGPColorItem( CLPClassProperty *a_property, CTLPGPColorItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPColorItem ) );
  CTLPGPColorItem( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPColorItem ) );
  CTLPGPColorItem( CLPBaseComponent *a_control, CTLPGPColorItem ( CLPBaseClass::*a_getter )() );
  CTLPGPColorItem( CLPBaseComponent *a_control, CTLPGPColorItem ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPColorItem ) );
  CTLPGPColorItem( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPColorItem( const CTLPGPColorItem &other );

public:
  CTLPGPColorItem & operator = ( const CTLPGPColorItem & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPColorItem ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPColorItem Value );
};
//------------------------------------------------------------------------------
template<typename _TMP_TYPE_> class CTLPGPBasicColorItems : public CLPCollectionProperty<_TMP_TYPE_>
{
//DOM-IGNORE-BEGIN
  typedef CLPCollectionProperty<_TMP_TYPE_> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTLPGPBasicColorItems( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPBasicColorItems( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPBasicColorItems( CLPClassProperty *a_property, CTLPGPBasicColorItems ( CLPBaseClass::*a_getter )() );
  CTLPGPBasicColorItems( CLPClassProperty *a_property, CTLPGPBasicColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBasicColorItems ) );
  CTLPGPBasicColorItems( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPBasicColorItems ) );
  CTLPGPBasicColorItems( CLPBaseComponent *a_control, CTLPGPBasicColorItems ( CLPBaseClass::*a_getter )() );
  CTLPGPBasicColorItems( CLPBaseComponent *a_control, CTLPGPBasicColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPBasicColorItems ) );
  CTLPGPBasicColorItems( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPBasicColorItems( const CTLPGPBasicColorItems &other );

public:
  CTLPGPBasicColorItems & operator = ( const CTLPGPBasicColorItems & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPBasicColorItems ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPBasicColorItems Value );
};
//------------------------------------------------------------------------------
class CTLPGPColorItems : public CTLPGPBasicColorItems<CTLPGPColorItem>
{
//DOM-IGNORE-BEGIN
  typedef CTLPGPBasicColorItems<CTLPGPColorItem> inherited;
//DOM-IGNORE-END

protected:
  virtual TLPFunctionEntry  GetFunction( const char *function_name )
  {
    TLPFunctionEntry Result = VCL_GetFunction( ::Get_SignalLabBasicPkgCB6(), function_name );
    if( Result )
      return Result;

    return inherited::GetFunction( function_name );
  }

public:
  CTLPGPColorItems( CLPBaseComponent *a_control, const CLPString a_PropertyName );
  CTLPGPColorItems( CLPClassProperty *a_property, const CLPString a_PropertyName );
  CTLPGPColorItems( CLPClassProperty *a_property, CTLPGPColorItems ( CLPBaseClass::*a_getter )() );
  CTLPGPColorItems( CLPClassProperty *a_property, CTLPGPColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPColorItems ) );
  CTLPGPColorItems( CLPClassProperty *a_property, void ( CLPBaseClass::*a_setter )( CTLPGPColorItems ) );
  CTLPGPColorItems( CLPBaseComponent *a_control, CTLPGPColorItems ( CLPBaseClass::*a_getter )() );
  CTLPGPColorItems( CLPBaseComponent *a_control, CTLPGPColorItems ( CLPBaseClass::*a_getter )(), void ( CLPBaseClass::*a_setter )( CTLPGPColorItems ) );
  CTLPGPColorItems( VCLHANDLE handle, ELPHandleMode owns_handle = hmNone );
  CTLPGPColorItems( const CTLPGPColorItems &other );

public:
  CTLPGPColorItems & operator = ( const CTLPGPColorItems & other );

protected:
  virtual VCLHANDLE Get_VCL_Handle() const;

protected:
  CLPBaseClass        *m_Owner_Property;
  CTLPGPColorItems ( CLPBaseClass::*m_Property_Getter )();
  void ( CLPBaseClass::*m_Property_Setter )( CTLPGPColorItems Value );
};
//------------------------------------------------------------------------------
#include <CLPGDIPlusPropertiesCode.h>
//------------------------------------------------------------------------------
#endif   // CLPGDIPlusProperties_H_
//------------------------------------------------------------------------------
